
Code_Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006800  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a38  0800693c  0800693c  0001693c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007374  08007374  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08007374  08007374  00017374  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800737c  0800737c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800737c  0800737c  0001737c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007380  08007380  00017380  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08007384  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a04  20000090  08007414  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a94  08007414  00021a94  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a50a  00000000  00000000  000200b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000219b  00000000  00000000  0002a5c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f0  00000000  00000000  0002c760  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000958  00000000  00000000  0002d150  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017387  00000000  00000000  0002daa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b306  00000000  00000000  00044e2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d5de  00000000  00000000  00050135  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dd713  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030b4  00000000  00000000  000dd764  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000090 	.word	0x20000090
 8000158:	00000000 	.word	0x00000000
 800015c:	08006924 	.word	0x08006924

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000094 	.word	0x20000094
 8000178:	08006924 	.word	0x08006924

0800017c <setjmp>:
 800017c:	46ec      	mov	ip, sp
 800017e:	e8a0 5ff0 	stmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 8000182:	f04f 0000 	mov.w	r0, #0
 8000186:	4770      	bx	lr

08000188 <longjmp>:
 8000188:	e8b0 5ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
 800018c:	46e5      	mov	sp, ip
 800018e:	0008      	movs	r0, r1
 8000190:	bf08      	it	eq
 8000192:	2001      	moveq	r0, #1
 8000194:	4770      	bx	lr
 8000196:	bf00      	nop

08000198 <strcmp>:
 8000198:	f810 2b01 	ldrb.w	r2, [r0], #1
 800019c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001a0:	2a01      	cmp	r2, #1
 80001a2:	bf28      	it	cs
 80001a4:	429a      	cmpcs	r2, r3
 80001a6:	d0f7      	beq.n	8000198 <strcmp>
 80001a8:	1ad0      	subs	r0, r2, r3
 80001aa:	4770      	bx	lr

080001ac <strlen>:
 80001ac:	4603      	mov	r3, r0
 80001ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001b2:	2a00      	cmp	r2, #0
 80001b4:	d1fb      	bne.n	80001ae <strlen+0x2>
 80001b6:	1a18      	subs	r0, r3, r0
 80001b8:	3801      	subs	r0, #1
 80001ba:	4770      	bx	lr

080001bc <__aeabi_uldivmod>:
 80001bc:	b953      	cbnz	r3, 80001d4 <__aeabi_uldivmod+0x18>
 80001be:	b94a      	cbnz	r2, 80001d4 <__aeabi_uldivmod+0x18>
 80001c0:	2900      	cmp	r1, #0
 80001c2:	bf08      	it	eq
 80001c4:	2800      	cmpeq	r0, #0
 80001c6:	bf1c      	itt	ne
 80001c8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001cc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001d0:	f000 b976 	b.w	80004c0 <__aeabi_idiv0>
 80001d4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001d8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001dc:	f000 f806 	bl	80001ec <__udivmoddi4>
 80001e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001e8:	b004      	add	sp, #16
 80001ea:	4770      	bx	lr

080001ec <__udivmoddi4>:
 80001ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001f0:	9e08      	ldr	r6, [sp, #32]
 80001f2:	460d      	mov	r5, r1
 80001f4:	4604      	mov	r4, r0
 80001f6:	4688      	mov	r8, r1
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d14d      	bne.n	8000298 <__udivmoddi4+0xac>
 80001fc:	428a      	cmp	r2, r1
 80001fe:	4694      	mov	ip, r2
 8000200:	d968      	bls.n	80002d4 <__udivmoddi4+0xe8>
 8000202:	fab2 f282 	clz	r2, r2
 8000206:	b152      	cbz	r2, 800021e <__udivmoddi4+0x32>
 8000208:	fa01 f302 	lsl.w	r3, r1, r2
 800020c:	f1c2 0120 	rsb	r1, r2, #32
 8000210:	fa20 f101 	lsr.w	r1, r0, r1
 8000214:	fa0c fc02 	lsl.w	ip, ip, r2
 8000218:	ea41 0803 	orr.w	r8, r1, r3
 800021c:	4094      	lsls	r4, r2
 800021e:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000222:	fbb8 f7f1 	udiv	r7, r8, r1
 8000226:	fa1f fe8c 	uxth.w	lr, ip
 800022a:	fb01 8817 	mls	r8, r1, r7, r8
 800022e:	fb07 f00e 	mul.w	r0, r7, lr
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000238:	4298      	cmp	r0, r3
 800023a:	d90a      	bls.n	8000252 <__udivmoddi4+0x66>
 800023c:	eb1c 0303 	adds.w	r3, ip, r3
 8000240:	f107 35ff 	add.w	r5, r7, #4294967295	; 0xffffffff
 8000244:	f080 811e 	bcs.w	8000484 <__udivmoddi4+0x298>
 8000248:	4298      	cmp	r0, r3
 800024a:	f240 811b 	bls.w	8000484 <__udivmoddi4+0x298>
 800024e:	3f02      	subs	r7, #2
 8000250:	4463      	add	r3, ip
 8000252:	1a1b      	subs	r3, r3, r0
 8000254:	fbb3 f0f1 	udiv	r0, r3, r1
 8000258:	fb01 3310 	mls	r3, r1, r0, r3
 800025c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000260:	b2a4      	uxth	r4, r4
 8000262:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000266:	45a6      	cmp	lr, r4
 8000268:	d90a      	bls.n	8000280 <__udivmoddi4+0x94>
 800026a:	eb1c 0404 	adds.w	r4, ip, r4
 800026e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000272:	f080 8109 	bcs.w	8000488 <__udivmoddi4+0x29c>
 8000276:	45a6      	cmp	lr, r4
 8000278:	f240 8106 	bls.w	8000488 <__udivmoddi4+0x29c>
 800027c:	4464      	add	r4, ip
 800027e:	3802      	subs	r0, #2
 8000280:	2100      	movs	r1, #0
 8000282:	eba4 040e 	sub.w	r4, r4, lr
 8000286:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800028a:	b11e      	cbz	r6, 8000294 <__udivmoddi4+0xa8>
 800028c:	2300      	movs	r3, #0
 800028e:	40d4      	lsrs	r4, r2
 8000290:	e9c6 4300 	strd	r4, r3, [r6]
 8000294:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000298:	428b      	cmp	r3, r1
 800029a:	d908      	bls.n	80002ae <__udivmoddi4+0xc2>
 800029c:	2e00      	cmp	r6, #0
 800029e:	f000 80ee 	beq.w	800047e <__udivmoddi4+0x292>
 80002a2:	2100      	movs	r1, #0
 80002a4:	e9c6 0500 	strd	r0, r5, [r6]
 80002a8:	4608      	mov	r0, r1
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d14a      	bne.n	800034c <__udivmoddi4+0x160>
 80002b6:	42ab      	cmp	r3, r5
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xd4>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 80fc 	bhi.w	80004b8 <__udivmoddi4+0x2cc>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb65 0303 	sbc.w	r3, r5, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4698      	mov	r8, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d0e2      	beq.n	8000294 <__udivmoddi4+0xa8>
 80002ce:	e9c6 4800 	strd	r4, r8, [r6]
 80002d2:	e7df      	b.n	8000294 <__udivmoddi4+0xa8>
 80002d4:	b902      	cbnz	r2, 80002d8 <__udivmoddi4+0xec>
 80002d6:	deff      	udf	#255	; 0xff
 80002d8:	fab2 f282 	clz	r2, r2
 80002dc:	2a00      	cmp	r2, #0
 80002de:	f040 8091 	bne.w	8000404 <__udivmoddi4+0x218>
 80002e2:	eba1 000c 	sub.w	r0, r1, ip
 80002e6:	2101      	movs	r1, #1
 80002e8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ec:	fa1f fe8c 	uxth.w	lr, ip
 80002f0:	fbb0 f3f7 	udiv	r3, r0, r7
 80002f4:	fb07 0013 	mls	r0, r7, r3, r0
 80002f8:	0c25      	lsrs	r5, r4, #16
 80002fa:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002fe:	fb0e f003 	mul.w	r0, lr, r3
 8000302:	42a8      	cmp	r0, r5
 8000304:	d908      	bls.n	8000318 <__udivmoddi4+0x12c>
 8000306:	eb1c 0505 	adds.w	r5, ip, r5
 800030a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0x12a>
 8000310:	42a8      	cmp	r0, r5
 8000312:	f200 80ce 	bhi.w	80004b2 <__udivmoddi4+0x2c6>
 8000316:	4643      	mov	r3, r8
 8000318:	1a2d      	subs	r5, r5, r0
 800031a:	fbb5 f0f7 	udiv	r0, r5, r7
 800031e:	fb07 5510 	mls	r5, r7, r0, r5
 8000322:	fb0e fe00 	mul.w	lr, lr, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800032c:	45a6      	cmp	lr, r4
 800032e:	d908      	bls.n	8000342 <__udivmoddi4+0x156>
 8000330:	eb1c 0404 	adds.w	r4, ip, r4
 8000334:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000338:	d202      	bcs.n	8000340 <__udivmoddi4+0x154>
 800033a:	45a6      	cmp	lr, r4
 800033c:	f200 80b6 	bhi.w	80004ac <__udivmoddi4+0x2c0>
 8000340:	4628      	mov	r0, r5
 8000342:	eba4 040e 	sub.w	r4, r4, lr
 8000346:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800034a:	e79e      	b.n	800028a <__udivmoddi4+0x9e>
 800034c:	f1c1 0720 	rsb	r7, r1, #32
 8000350:	408b      	lsls	r3, r1
 8000352:	fa22 fc07 	lsr.w	ip, r2, r7
 8000356:	ea4c 0c03 	orr.w	ip, ip, r3
 800035a:	fa25 fa07 	lsr.w	sl, r5, r7
 800035e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000362:	fbba f8f9 	udiv	r8, sl, r9
 8000366:	fa20 f307 	lsr.w	r3, r0, r7
 800036a:	fb09 aa18 	mls	sl, r9, r8, sl
 800036e:	408d      	lsls	r5, r1
 8000370:	fa1f fe8c 	uxth.w	lr, ip
 8000374:	431d      	orrs	r5, r3
 8000376:	fa00 f301 	lsl.w	r3, r0, r1
 800037a:	fb08 f00e 	mul.w	r0, r8, lr
 800037e:	0c2c      	lsrs	r4, r5, #16
 8000380:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000384:	42a0      	cmp	r0, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	d90b      	bls.n	80003a4 <__udivmoddi4+0x1b8>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000394:	f080 8088 	bcs.w	80004a8 <__udivmoddi4+0x2bc>
 8000398:	42a0      	cmp	r0, r4
 800039a:	f240 8085 	bls.w	80004a8 <__udivmoddi4+0x2bc>
 800039e:	f1a8 0802 	sub.w	r8, r8, #2
 80003a2:	4464      	add	r4, ip
 80003a4:	1a24      	subs	r4, r4, r0
 80003a6:	fbb4 f0f9 	udiv	r0, r4, r9
 80003aa:	fb09 4410 	mls	r4, r9, r0, r4
 80003ae:	fb00 fe0e 	mul.w	lr, r0, lr
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x1e2>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80003c4:	d26c      	bcs.n	80004a0 <__udivmoddi4+0x2b4>
 80003c6:	45a6      	cmp	lr, r4
 80003c8:	d96a      	bls.n	80004a0 <__udivmoddi4+0x2b4>
 80003ca:	3802      	subs	r0, #2
 80003cc:	4464      	add	r4, ip
 80003ce:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003d2:	fba0 9502 	umull	r9, r5, r0, r2
 80003d6:	eba4 040e 	sub.w	r4, r4, lr
 80003da:	42ac      	cmp	r4, r5
 80003dc:	46c8      	mov	r8, r9
 80003de:	46ae      	mov	lr, r5
 80003e0:	d356      	bcc.n	8000490 <__udivmoddi4+0x2a4>
 80003e2:	d053      	beq.n	800048c <__udivmoddi4+0x2a0>
 80003e4:	2e00      	cmp	r6, #0
 80003e6:	d069      	beq.n	80004bc <__udivmoddi4+0x2d0>
 80003e8:	ebb3 0208 	subs.w	r2, r3, r8
 80003ec:	eb64 040e 	sbc.w	r4, r4, lr
 80003f0:	fa22 f301 	lsr.w	r3, r2, r1
 80003f4:	fa04 f707 	lsl.w	r7, r4, r7
 80003f8:	431f      	orrs	r7, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	2100      	movs	r1, #0
 8000402:	e747      	b.n	8000294 <__udivmoddi4+0xa8>
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	f1c2 0120 	rsb	r1, r2, #32
 800040c:	fa25 f301 	lsr.w	r3, r5, r1
 8000410:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000414:	fa20 f101 	lsr.w	r1, r0, r1
 8000418:	4095      	lsls	r5, r2
 800041a:	430d      	orrs	r5, r1
 800041c:	fbb3 f1f7 	udiv	r1, r3, r7
 8000420:	fb07 3311 	mls	r3, r7, r1, r3
 8000424:	fa1f fe8c 	uxth.w	lr, ip
 8000428:	0c28      	lsrs	r0, r5, #16
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	fb01 f30e 	mul.w	r3, r1, lr
 8000432:	4283      	cmp	r3, r0
 8000434:	fa04 f402 	lsl.w	r4, r4, r2
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x260>
 800043a:	eb1c 0000 	adds.w	r0, ip, r0
 800043e:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 8000442:	d22f      	bcs.n	80004a4 <__udivmoddi4+0x2b8>
 8000444:	4283      	cmp	r3, r0
 8000446:	d92d      	bls.n	80004a4 <__udivmoddi4+0x2b8>
 8000448:	3902      	subs	r1, #2
 800044a:	4460      	add	r0, ip
 800044c:	1ac0      	subs	r0, r0, r3
 800044e:	fbb0 f3f7 	udiv	r3, r0, r7
 8000452:	fb07 0013 	mls	r0, r7, r3, r0
 8000456:	b2ad      	uxth	r5, r5
 8000458:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 800045c:	fb03 f00e 	mul.w	r0, r3, lr
 8000460:	42a8      	cmp	r0, r5
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x28a>
 8000464:	eb1c 0505 	adds.w	r5, ip, r5
 8000468:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800046c:	d216      	bcs.n	800049c <__udivmoddi4+0x2b0>
 800046e:	42a8      	cmp	r0, r5
 8000470:	d914      	bls.n	800049c <__udivmoddi4+0x2b0>
 8000472:	3b02      	subs	r3, #2
 8000474:	4465      	add	r5, ip
 8000476:	1a28      	subs	r0, r5, r0
 8000478:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800047c:	e738      	b.n	80002f0 <__udivmoddi4+0x104>
 800047e:	4631      	mov	r1, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e707      	b.n	8000294 <__udivmoddi4+0xa8>
 8000484:	462f      	mov	r7, r5
 8000486:	e6e4      	b.n	8000252 <__udivmoddi4+0x66>
 8000488:	4618      	mov	r0, r3
 800048a:	e6f9      	b.n	8000280 <__udivmoddi4+0x94>
 800048c:	454b      	cmp	r3, r9
 800048e:	d2a9      	bcs.n	80003e4 <__udivmoddi4+0x1f8>
 8000490:	ebb9 0802 	subs.w	r8, r9, r2
 8000494:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000498:	3801      	subs	r0, #1
 800049a:	e7a3      	b.n	80003e4 <__udivmoddi4+0x1f8>
 800049c:	4643      	mov	r3, r8
 800049e:	e7ea      	b.n	8000476 <__udivmoddi4+0x28a>
 80004a0:	4628      	mov	r0, r5
 80004a2:	e794      	b.n	80003ce <__udivmoddi4+0x1e2>
 80004a4:	4641      	mov	r1, r8
 80004a6:	e7d1      	b.n	800044c <__udivmoddi4+0x260>
 80004a8:	46d0      	mov	r8, sl
 80004aa:	e77b      	b.n	80003a4 <__udivmoddi4+0x1b8>
 80004ac:	4464      	add	r4, ip
 80004ae:	3802      	subs	r0, #2
 80004b0:	e747      	b.n	8000342 <__udivmoddi4+0x156>
 80004b2:	3b02      	subs	r3, #2
 80004b4:	4465      	add	r5, ip
 80004b6:	e72f      	b.n	8000318 <__udivmoddi4+0x12c>
 80004b8:	4608      	mov	r0, r1
 80004ba:	e706      	b.n	80002ca <__udivmoddi4+0xde>
 80004bc:	4631      	mov	r1, r6
 80004be:	e6e9      	b.n	8000294 <__udivmoddi4+0xa8>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <crc16_byte>:
          0x4400, 0x84C1, 0x8581, 0x4540, 0x8701, 0x47C0, 0x4680, 0x8641,
          0x8201, 0x42C0, 0x4380, 0x8341, 0x4100, 0x81C1, 0x8081, 0x4040
  };

static inline uint16_t crc16_byte(uint16_t crc, uint8_t data)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	4603      	mov	r3, r0
 80004cc:	460a      	mov	r2, r1
 80004ce:	80fb      	strh	r3, [r7, #6]
 80004d0:	4613      	mov	r3, r2
 80004d2:	717b      	strb	r3, [r7, #5]
   return (crc >> 8) ^ crc16_table[(crc ^ data) & 0xff];
 80004d4:	88fb      	ldrh	r3, [r7, #6]
 80004d6:	0a1b      	lsrs	r3, r3, #8
 80004d8:	b29a      	uxth	r2, r3
 80004da:	88f9      	ldrh	r1, [r7, #6]
 80004dc:	797b      	ldrb	r3, [r7, #5]
 80004de:	404b      	eors	r3, r1
 80004e0:	b2db      	uxtb	r3, r3
 80004e2:	4905      	ldr	r1, [pc, #20]	; (80004f8 <crc16_byte+0x34>)
 80004e4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80004e8:	4053      	eors	r3, r2
 80004ea:	b29b      	uxth	r3, r3
}
 80004ec:	4618      	mov	r0, r3
 80004ee:	370c      	adds	r7, #12
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bc80      	pop	{r7}
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	08006eec 	.word	0x08006eec

080004fc <crc16>:
uint8_t transport_buffer[PACKET_SIZE];

extern uint32_t write_pos;
uint16_t checksum;

uint16_t crc16(uint16_t crc, uint8_t *buffer, size_t len) {
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af00      	add	r7, sp, #0
 8000502:	4603      	mov	r3, r0
 8000504:	60b9      	str	r1, [r7, #8]
 8000506:	607a      	str	r2, [r7, #4]
 8000508:	81fb      	strh	r3, [r7, #14]
	while (len--)
 800050a:	e00a      	b.n	8000522 <crc16+0x26>
		crc = crc16_byte(crc, *buffer++);
 800050c:	68bb      	ldr	r3, [r7, #8]
 800050e:	1c5a      	adds	r2, r3, #1
 8000510:	60ba      	str	r2, [r7, #8]
 8000512:	781a      	ldrb	r2, [r3, #0]
 8000514:	89fb      	ldrh	r3, [r7, #14]
 8000516:	4611      	mov	r1, r2
 8000518:	4618      	mov	r0, r3
 800051a:	f7ff ffd3 	bl	80004c4 <crc16_byte>
 800051e:	4603      	mov	r3, r0
 8000520:	81fb      	strh	r3, [r7, #14]
	while (len--)
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	1e5a      	subs	r2, r3, #1
 8000526:	607a      	str	r2, [r7, #4]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d1ef      	bne.n	800050c <crc16+0x10>
	return crc;
 800052c:	89fb      	ldrh	r3, [r7, #14]
}
 800052e:	4618      	mov	r0, r3
 8000530:	3710      	adds	r7, #16
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
	...

08000538 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000538:	b590      	push	{r4, r7, lr}
 800053a:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 800053e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	init_interpreter();
 8000540:	f002 f93e 	bl	80027c0 <init_interpreter>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000544:	f002 f9a3 	bl	800288e <HAL_Init>

	/* USER CODE BEGIN Init */
	const uint32_t sram_end = (uint32_t) g_pfnVectors[0];
 8000548:	4bad      	ldr	r3, [pc, #692]	; (8000800 <main+0x2c8>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
	const uint32_t sram_size = sram_end - (uint32_t) SRAM_START;
 8000550:	4bac      	ldr	r3, [pc, #688]	; (8000804 <main+0x2cc>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	461a      	mov	r2, r3
 8000556:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 800055a:	1a9b      	subs	r3, r3, r2
 800055c:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000560:	f000 fbb2 	bl	8000cc8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000564:	f000 fcea 	bl	8000f3c <MX_GPIO_Init>
	MX_DMA_Init();
 8000568:	f000 fcba 	bl	8000ee0 <MX_DMA_Init>
	MX_ADC_Init();
 800056c:	f000 fbfa 	bl	8000d64 <MX_ADC_Init>
	MX_USART1_UART_Init();
 8000570:	f000 fc62 	bl	8000e38 <MX_USART1_UART_Init>
	MX_USART3_UART_Init();
 8000574:	f000 fc8a 	bl	8000e8c <MX_USART3_UART_Init>

	/* USER CODE BEGIN 2 */

	collect_bid(UID);
 8000578:	48a3      	ldr	r0, [pc, #652]	; (8000808 <main+0x2d0>)
 800057a:	f000 fd7b 	bl	8001074 <collect_bid>

	// Initialization of peripherals
	__HAL_ADC_ENABLE(&hadc);
 800057e:	4ba3      	ldr	r3, [pc, #652]	; (800080c <main+0x2d4>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	689a      	ldr	r2, [r3, #8]
 8000584:	4ba1      	ldr	r3, [pc, #644]	; (800080c <main+0x2d4>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f042 0201 	orr.w	r2, r2, #1
 800058c:	609a      	str	r2, [r3, #8]
	HAL_ADC_Start_DMA(&hadc, sensors, 2);
 800058e:	2202      	movs	r2, #2
 8000590:	499f      	ldr	r1, [pc, #636]	; (8000810 <main+0x2d8>)
 8000592:	489e      	ldr	r0, [pc, #632]	; (800080c <main+0x2d4>)
 8000594:	f002 fb30 	bl	8002bf8 <HAL_ADC_Start_DMA>

	RESET_UPWARDS();
 8000598:	f240 2221 	movw	r2, #545	; 0x221
 800059c:	499d      	ldr	r1, [pc, #628]	; (8000814 <main+0x2dc>)
 800059e:	489e      	ldr	r0, [pc, #632]	; (8000818 <main+0x2e0>)
 80005a0:	f004 fa8b 	bl	8004aba <HAL_UART_Receive_DMA>
	RESET_DOWNWARDS();
 80005a4:	f240 2221 	movw	r2, #545	; 0x221
 80005a8:	499c      	ldr	r1, [pc, #624]	; (800081c <main+0x2e4>)
 80005aa:	489d      	ldr	r0, [pc, #628]	; (8000820 <main+0x2e8>)
 80005ac:	f004 fa85 	bl	8004aba <HAL_UART_Receive_DMA>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (bytes_rx < PACKET_SIZE)
 80005b0:	4b9c      	ldr	r3, [pc, #624]	; (8000824 <main+0x2ec>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f5b3 7f08 	cmp.w	r3, #544	; 0x220
 80005b8:	f240 836e 	bls.w	8000c98 <main+0x760>
			continue;

		// Reset read counter
		bytes_rx = 0;
 80005bc:	4b99      	ldr	r3, [pc, #612]	; (8000824 <main+0x2ec>)
 80005be:	2200      	movs	r2, #0
 80005c0:	601a      	str	r2, [r3, #0]

		uint16_t temp = sensors[0];
 80005c2:	4b93      	ldr	r3, [pc, #588]	; (8000810 <main+0x2d8>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	f8a7 322e 	strh.w	r3, [r7, #558]	; 0x22e
		uint16_t vdd = sensors[1];
 80005ca:	4b91      	ldr	r3, [pc, #580]	; (8000810 <main+0x2d8>)
 80005cc:	685b      	ldr	r3, [r3, #4]
 80005ce:	f8a7 322c 	strh.w	r3, [r7, #556]	; 0x22c

		packet = parse_packet(buffer);
 80005d2:	4c95      	ldr	r4, [pc, #596]	; (8000828 <main+0x2f0>)
 80005d4:	463b      	mov	r3, r7
 80005d6:	498f      	ldr	r1, [pc, #572]	; (8000814 <main+0x2dc>)
 80005d8:	4618      	mov	r0, r3
 80005da:	f000 fda5 	bl	8001128 <parse_packet>
 80005de:	f507 730e 	add.w	r3, r7, #568	; 0x238
 80005e2:	f5a3 730e 	sub.w	r3, r3, #568	; 0x238
 80005e6:	4620      	mov	r0, r4
 80005e8:	4619      	mov	r1, r3
 80005ea:	f240 2321 	movw	r3, #545	; 0x221
 80005ee:	461a      	mov	r2, r3
 80005f0:	f005 f846 	bl	8005680 <memcpy>
		packet.pic += 1;
 80005f4:	4b8c      	ldr	r3, [pc, #560]	; (8000828 <main+0x2f0>)
 80005f6:	785b      	ldrb	r3, [r3, #1]
 80005f8:	3301      	adds	r3, #1
 80005fa:	b2da      	uxtb	r2, r3
 80005fc:	4b8a      	ldr	r3, [pc, #552]	; (8000828 <main+0x2f0>)
 80005fe:	705a      	strb	r2, [r3, #1]

		buffer[PACKET_SIZE - 2] = 0;
 8000600:	4b84      	ldr	r3, [pc, #528]	; (8000814 <main+0x2dc>)
 8000602:	2200      	movs	r2, #0
 8000604:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
		buffer[PACKET_SIZE - 1] = 0;
 8000608:	4b82      	ldr	r3, [pc, #520]	; (8000814 <main+0x2dc>)
 800060a:	2200      	movs	r2, #0
 800060c:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220

		checksum = crc16(0, buffer, PACKET_SIZE);
 8000610:	f240 2221 	movw	r2, #545	; 0x221
 8000614:	497f      	ldr	r1, [pc, #508]	; (8000814 <main+0x2dc>)
 8000616:	2000      	movs	r0, #0
 8000618:	f7ff ff70 	bl	80004fc <crc16>
 800061c:	4603      	mov	r3, r0
 800061e:	461a      	mov	r2, r3
 8000620:	4b82      	ldr	r3, [pc, #520]	; (800082c <main+0x2f4>)
 8000622:	801a      	strh	r2, [r3, #0]

		if (checksum != packet.checksum) {
 8000624:	4b80      	ldr	r3, [pc, #512]	; (8000828 <main+0x2f0>)
 8000626:	f8b3 321f 	ldrh.w	r3, [r3, #543]	; 0x21f
 800062a:	b29a      	uxth	r2, r3
 800062c:	4b7f      	ldr	r3, [pc, #508]	; (800082c <main+0x2f4>)
 800062e:	881b      	ldrh	r3, [r3, #0]
 8000630:	429a      	cmp	r2, r3
 8000632:	d01c      	beq.n	800066e <main+0x136>
			packet.command = ERR;
 8000634:	4b7c      	ldr	r3, [pc, #496]	; (8000828 <main+0x2f0>)
 8000636:	22ff      	movs	r2, #255	; 0xff
 8000638:	701a      	strb	r2, [r3, #0]
			packet.options = 1; // Checksum didn't match
 800063a:	4b7b      	ldr	r3, [pc, #492]	; (8000828 <main+0x2f0>)
 800063c:	2200      	movs	r2, #0
 800063e:	f042 0201 	orr.w	r2, r2, #1
 8000642:	805a      	strh	r2, [r3, #2]
 8000644:	2200      	movs	r2, #0
 8000646:	809a      	strh	r2, [r3, #4]
			packet.checksum = make_crc(&packet, buffer);
 8000648:	4972      	ldr	r1, [pc, #456]	; (8000814 <main+0x2dc>)
 800064a:	4877      	ldr	r0, [pc, #476]	; (8000828 <main+0x2f0>)
 800064c:	f000 fe54 	bl	80012f8 <make_crc>
 8000650:	4603      	mov	r3, r0
 8000652:	b29a      	uxth	r2, r3
 8000654:	4b74      	ldr	r3, [pc, #464]	; (8000828 <main+0x2f0>)
 8000656:	f8a3 221f 	strh.w	r2, [r3, #543]	; 0x21f
			send_packet(&huart1, &packet);
 800065a:	4973      	ldr	r1, [pc, #460]	; (8000828 <main+0x2f0>)
 800065c:	486e      	ldr	r0, [pc, #440]	; (8000818 <main+0x2e0>)
 800065e:	f000 fe10 	bl	8001282 <send_packet>
			RESET_UPWARDS();
 8000662:	f240 2221 	movw	r2, #545	; 0x221
 8000666:	496b      	ldr	r1, [pc, #428]	; (8000814 <main+0x2dc>)
 8000668:	486b      	ldr	r0, [pc, #428]	; (8000818 <main+0x2e0>)
 800066a:	f004 fa26 	bl	8004aba <HAL_UART_Receive_DMA>
		}
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		switch (packet.command) {
 800066e:	4b6e      	ldr	r3, [pc, #440]	; (8000828 <main+0x2f0>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	3b02      	subs	r3, #2
 8000674:	2b06      	cmp	r3, #6
 8000676:	f200 82ee 	bhi.w	8000c56 <main+0x71e>
 800067a:	a201      	add	r2, pc, #4	; (adr r2, 8000680 <main+0x148>)
 800067c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000680:	0800069d 	.word	0x0800069d
 8000684:	08000781 	.word	0x08000781
 8000688:	08000839 	.word	0x08000839
 800068c:	080008b9 	.word	0x080008b9
 8000690:	08000a75 	.word	0x08000a75
 8000694:	08000b35 	.word	0x08000b35
 8000698:	08000bc9 	.word	0x08000bc9
		case (PING):

			switch (packet.options) {
 800069c:	4b62      	ldr	r3, [pc, #392]	; (8000828 <main+0x2f0>)
 800069e:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d030      	beq.n	8000708 <main+0x1d0>
 80006a6:	2b01      	cmp	r3, #1
 80006a8:	f040 82f8 	bne.w	8000c9c <main+0x764>
			case OWN:
				if (STR_MATCH(UID, packet.uid)) {
 80006ac:	4960      	ldr	r1, [pc, #384]	; (8000830 <main+0x2f8>)
 80006ae:	4856      	ldr	r0, [pc, #344]	; (8000808 <main+0x2d0>)
 80006b0:	f7ff fd72 	bl	8000198 <strcmp>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d115      	bne.n	80006e6 <main+0x1ae>
					packet.options = sram_size;
 80006ba:	4a5b      	ldr	r2, [pc, #364]	; (8000828 <main+0x2f0>)
 80006bc:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 80006c0:	f8c2 3002 	str.w	r3, [r2, #2]
					packet.command = ACK;
 80006c4:	4b58      	ldr	r3, [pc, #352]	; (8000828 <main+0x2f0>)
 80006c6:	2201      	movs	r2, #1
 80006c8:	701a      	strb	r2, [r3, #0]
					packet.checksum = make_crc(&packet, buffer);
 80006ca:	4952      	ldr	r1, [pc, #328]	; (8000814 <main+0x2dc>)
 80006cc:	4856      	ldr	r0, [pc, #344]	; (8000828 <main+0x2f0>)
 80006ce:	f000 fe13 	bl	80012f8 <make_crc>
 80006d2:	4603      	mov	r3, r0
 80006d4:	b29a      	uxth	r2, r3
 80006d6:	4b54      	ldr	r3, [pc, #336]	; (8000828 <main+0x2f0>)
 80006d8:	f8a3 221f 	strh.w	r2, [r3, #543]	; 0x21f
					send_packet(&huart1, &packet);
 80006dc:	4952      	ldr	r1, [pc, #328]	; (8000828 <main+0x2f0>)
 80006de:	484e      	ldr	r0, [pc, #312]	; (8000818 <main+0x2e0>)
 80006e0:	f000 fdcf 	bl	8001282 <send_packet>
 80006e4:	e009      	b.n	80006fa <main+0x1c2>
				} else {
					send_packet(&huart3, &packet);
 80006e6:	4950      	ldr	r1, [pc, #320]	; (8000828 <main+0x2f0>)
 80006e8:	484d      	ldr	r0, [pc, #308]	; (8000820 <main+0x2e8>)
 80006ea:	f000 fdca 	bl	8001282 <send_packet>
					RESET_DOWNWARDS();
 80006ee:	f240 2221 	movw	r2, #545	; 0x221
 80006f2:	494a      	ldr	r1, [pc, #296]	; (800081c <main+0x2e4>)
 80006f4:	484a      	ldr	r0, [pc, #296]	; (8000820 <main+0x2e8>)
 80006f6:	f004 f9e0 	bl	8004aba <HAL_UART_Receive_DMA>
				}
				RESET_UPWARDS()
 80006fa:	f240 2221 	movw	r2, #545	; 0x221
 80006fe:	4945      	ldr	r1, [pc, #276]	; (8000814 <main+0x2dc>)
 8000700:	4845      	ldr	r0, [pc, #276]	; (8000818 <main+0x2e0>)
 8000702:	f004 f9da 	bl	8004aba <HAL_UART_Receive_DMA>
				break;
 8000706:	e03a      	b.n	800077e <main+0x246>
			case ALL:
				strcpy(packet.uid, UID);
 8000708:	493f      	ldr	r1, [pc, #252]	; (8000808 <main+0x2d0>)
 800070a:	4849      	ldr	r0, [pc, #292]	; (8000830 <main+0x2f8>)
 800070c:	f005 f82e 	bl	800576c <strcpy>
				packet.options = sram_size;
 8000710:	4a45      	ldr	r2, [pc, #276]	; (8000828 <main+0x2f0>)
 8000712:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8000716:	f8c2 3002 	str.w	r3, [r2, #2]
				packet.command = ACK;
 800071a:	4b43      	ldr	r3, [pc, #268]	; (8000828 <main+0x2f0>)
 800071c:	2201      	movs	r2, #1
 800071e:	701a      	strb	r2, [r3, #0]
				packet.checksum = make_crc(&packet, buffer);
 8000720:	493c      	ldr	r1, [pc, #240]	; (8000814 <main+0x2dc>)
 8000722:	4841      	ldr	r0, [pc, #260]	; (8000828 <main+0x2f0>)
 8000724:	f000 fde8 	bl	80012f8 <make_crc>
 8000728:	4603      	mov	r3, r0
 800072a:	b29a      	uxth	r2, r3
 800072c:	4b3e      	ldr	r3, [pc, #248]	; (8000828 <main+0x2f0>)
 800072e:	f8a3 221f 	strh.w	r2, [r3, #543]	; 0x21f
				send_packet(&huart1, &packet);
 8000732:	493d      	ldr	r1, [pc, #244]	; (8000828 <main+0x2f0>)
 8000734:	4838      	ldr	r0, [pc, #224]	; (8000818 <main+0x2e0>)
 8000736:	f000 fda4 	bl	8001282 <send_packet>
				RESET_UPWARDS()
 800073a:	f240 2221 	movw	r2, #545	; 0x221
 800073e:	4935      	ldr	r1, [pc, #212]	; (8000814 <main+0x2dc>)
 8000740:	4835      	ldr	r0, [pc, #212]	; (8000818 <main+0x2e0>)
 8000742:	f004 f9ba 	bl	8004aba <HAL_UART_Receive_DMA>

				packet.command = PING;
 8000746:	4b38      	ldr	r3, [pc, #224]	; (8000828 <main+0x2f0>)
 8000748:	2202      	movs	r2, #2
 800074a:	701a      	strb	r2, [r3, #0]
				packet.options = ALL;
 800074c:	4b36      	ldr	r3, [pc, #216]	; (8000828 <main+0x2f0>)
 800074e:	2200      	movs	r2, #0
 8000750:	805a      	strh	r2, [r3, #2]
 8000752:	2200      	movs	r2, #0
 8000754:	809a      	strh	r2, [r3, #4]
				packet.checksum = make_crc(&packet, buffer);
 8000756:	492f      	ldr	r1, [pc, #188]	; (8000814 <main+0x2dc>)
 8000758:	4833      	ldr	r0, [pc, #204]	; (8000828 <main+0x2f0>)
 800075a:	f000 fdcd 	bl	80012f8 <make_crc>
 800075e:	4603      	mov	r3, r0
 8000760:	b29a      	uxth	r2, r3
 8000762:	4b31      	ldr	r3, [pc, #196]	; (8000828 <main+0x2f0>)
 8000764:	f8a3 221f 	strh.w	r2, [r3, #543]	; 0x21f
				send_packet(&huart3, &packet);
 8000768:	492f      	ldr	r1, [pc, #188]	; (8000828 <main+0x2f0>)
 800076a:	482d      	ldr	r0, [pc, #180]	; (8000820 <main+0x2e8>)
 800076c:	f000 fd89 	bl	8001282 <send_packet>
				RESET_DOWNWARDS()
 8000770:	f240 2221 	movw	r2, #545	; 0x221
 8000774:	4929      	ldr	r1, [pc, #164]	; (800081c <main+0x2e4>)
 8000776:	482a      	ldr	r0, [pc, #168]	; (8000820 <main+0x2e8>)
 8000778:	f004 f99f 	bl	8004aba <HAL_UART_Receive_DMA>
				break;
 800077c:	bf00      	nop
			}
			continue;
 800077e:	e28d      	b.n	8000c9c <main+0x764>

		case (READ):
			if (!STR_MATCH(UID, packet.uid)) {
 8000780:	492b      	ldr	r1, [pc, #172]	; (8000830 <main+0x2f8>)
 8000782:	4821      	ldr	r0, [pc, #132]	; (8000808 <main+0x2d0>)
 8000784:	f7ff fd08 	bl	8000198 <strcmp>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d019      	beq.n	80007c2 <main+0x28a>
				packet.checksum = make_crc(&packet, buffer);
 800078e:	4921      	ldr	r1, [pc, #132]	; (8000814 <main+0x2dc>)
 8000790:	4825      	ldr	r0, [pc, #148]	; (8000828 <main+0x2f0>)
 8000792:	f000 fdb1 	bl	80012f8 <make_crc>
 8000796:	4603      	mov	r3, r0
 8000798:	b29a      	uxth	r2, r3
 800079a:	4b23      	ldr	r3, [pc, #140]	; (8000828 <main+0x2f0>)
 800079c:	f8a3 221f 	strh.w	r2, [r3, #543]	; 0x21f
				send_packet(&huart3, &packet);
 80007a0:	4921      	ldr	r1, [pc, #132]	; (8000828 <main+0x2f0>)
 80007a2:	481f      	ldr	r0, [pc, #124]	; (8000820 <main+0x2e8>)
 80007a4:	f000 fd6d 	bl	8001282 <send_packet>
				RESET_DOWNWARDS()
 80007a8:	f240 2221 	movw	r2, #545	; 0x221
 80007ac:	491b      	ldr	r1, [pc, #108]	; (800081c <main+0x2e4>)
 80007ae:	481c      	ldr	r0, [pc, #112]	; (8000820 <main+0x2e8>)
 80007b0:	f004 f983 	bl	8004aba <HAL_UART_Receive_DMA>
				RESET_UPWARDS()
 80007b4:	f240 2221 	movw	r2, #545	; 0x221
 80007b8:	4916      	ldr	r1, [pc, #88]	; (8000814 <main+0x2dc>)
 80007ba:	4817      	ldr	r0, [pc, #92]	; (8000818 <main+0x2e0>)
 80007bc:	f004 f97d 	bl	8004aba <HAL_UART_Receive_DMA>
				continue;
 80007c0:	e26d      	b.n	8000c9e <main+0x766>
			}

			packet.command = ACK;
 80007c2:	4b19      	ldr	r3, [pc, #100]	; (8000828 <main+0x2f0>)
 80007c4:	2201      	movs	r2, #1
 80007c6:	701a      	strb	r2, [r3, #0]
			read_sram(packet.options, packet.data);
 80007c8:	4b17      	ldr	r3, [pc, #92]	; (8000828 <main+0x2f0>)
 80007ca:	f8d3 3002 	ldr.w	r3, [r3, #2]
 80007ce:	b29b      	uxth	r3, r3
 80007d0:	4918      	ldr	r1, [pc, #96]	; (8000834 <main+0x2fc>)
 80007d2:	4618      	mov	r0, r3
 80007d4:	f000 fc0c 	bl	8000ff0 <read_sram>
			packet.checksum = make_crc(&packet, buffer);
 80007d8:	490e      	ldr	r1, [pc, #56]	; (8000814 <main+0x2dc>)
 80007da:	4813      	ldr	r0, [pc, #76]	; (8000828 <main+0x2f0>)
 80007dc:	f000 fd8c 	bl	80012f8 <make_crc>
 80007e0:	4603      	mov	r3, r0
 80007e2:	b29a      	uxth	r2, r3
 80007e4:	4b10      	ldr	r3, [pc, #64]	; (8000828 <main+0x2f0>)
 80007e6:	f8a3 221f 	strh.w	r2, [r3, #543]	; 0x21f
			send_packet(&huart1, &packet);
 80007ea:	490f      	ldr	r1, [pc, #60]	; (8000828 <main+0x2f0>)
 80007ec:	480a      	ldr	r0, [pc, #40]	; (8000818 <main+0x2e0>)
 80007ee:	f000 fd48 	bl	8001282 <send_packet>
			RESET_UPWARDS()
 80007f2:	f240 2221 	movw	r2, #545	; 0x221
 80007f6:	4907      	ldr	r1, [pc, #28]	; (8000814 <main+0x2dc>)
 80007f8:	4807      	ldr	r0, [pc, #28]	; (8000818 <main+0x2e0>)
 80007fa:	f004 f95e 	bl	8004aba <HAL_UART_Receive_DMA>
			break;
 80007fe:	e23e      	b.n	8000c7e <main+0x746>
 8000800:	08000000 	.word	0x08000000
 8000804:	20000000 	.word	0x20000000
 8000808:	20000254 	.word	0x20000254
 800080c:	200000ac 	.word	0x200000ac
 8000810:	20000498 	.word	0x20000498
 8000814:	200004a4 	.word	0x200004a4
 8000818:	20000144 	.word	0x20000144
 800081c:	200006c8 	.word	0x200006c8
 8000820:	20000188 	.word	0x20000188
 8000824:	200004a0 	.word	0x200004a0
 8000828:	20000270 	.word	0x20000270
 800082c:	200008ea 	.word	0x200008ea
 8000830:	20000276 	.word	0x20000276
 8000834:	2000028f 	.word	0x2000028f

		case (WRITE):
			if (!STR_MATCH(UID, packet.uid)) {
 8000838:	49a5      	ldr	r1, [pc, #660]	; (8000ad0 <main+0x598>)
 800083a:	48a6      	ldr	r0, [pc, #664]	; (8000ad4 <main+0x59c>)
 800083c:	f7ff fcac 	bl	8000198 <strcmp>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d019      	beq.n	800087a <main+0x342>
				packet.checksum = make_crc(&packet, buffer);
 8000846:	49a4      	ldr	r1, [pc, #656]	; (8000ad8 <main+0x5a0>)
 8000848:	48a4      	ldr	r0, [pc, #656]	; (8000adc <main+0x5a4>)
 800084a:	f000 fd55 	bl	80012f8 <make_crc>
 800084e:	4603      	mov	r3, r0
 8000850:	b29a      	uxth	r2, r3
 8000852:	4ba2      	ldr	r3, [pc, #648]	; (8000adc <main+0x5a4>)
 8000854:	f8a3 221f 	strh.w	r2, [r3, #543]	; 0x21f
				send_packet(&huart3, &packet);
 8000858:	49a0      	ldr	r1, [pc, #640]	; (8000adc <main+0x5a4>)
 800085a:	48a1      	ldr	r0, [pc, #644]	; (8000ae0 <main+0x5a8>)
 800085c:	f000 fd11 	bl	8001282 <send_packet>
				RESET_DOWNWARDS()
 8000860:	f240 2221 	movw	r2, #545	; 0x221
 8000864:	499f      	ldr	r1, [pc, #636]	; (8000ae4 <main+0x5ac>)
 8000866:	489e      	ldr	r0, [pc, #632]	; (8000ae0 <main+0x5a8>)
 8000868:	f004 f927 	bl	8004aba <HAL_UART_Receive_DMA>
				RESET_UPWARDS()
 800086c:	f240 2221 	movw	r2, #545	; 0x221
 8000870:	4999      	ldr	r1, [pc, #612]	; (8000ad8 <main+0x5a0>)
 8000872:	489d      	ldr	r0, [pc, #628]	; (8000ae8 <main+0x5b0>)
 8000874:	f004 f921 	bl	8004aba <HAL_UART_Receive_DMA>
				continue;
 8000878:	e211      	b.n	8000c9e <main+0x766>
			}
			write_sram(packet.options, packet.data);
 800087a:	4b98      	ldr	r3, [pc, #608]	; (8000adc <main+0x5a4>)
 800087c:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000880:	b29b      	uxth	r3, r3
 8000882:	499a      	ldr	r1, [pc, #616]	; (8000aec <main+0x5b4>)
 8000884:	4618      	mov	r0, r3
 8000886:	f000 fbcb 	bl	8001020 <write_sram>
			packet.command = ACK;
 800088a:	4b94      	ldr	r3, [pc, #592]	; (8000adc <main+0x5a4>)
 800088c:	2201      	movs	r2, #1
 800088e:	701a      	strb	r2, [r3, #0]
			packet.checksum = make_crc(&packet, buffer);
 8000890:	4991      	ldr	r1, [pc, #580]	; (8000ad8 <main+0x5a0>)
 8000892:	4892      	ldr	r0, [pc, #584]	; (8000adc <main+0x5a4>)
 8000894:	f000 fd30 	bl	80012f8 <make_crc>
 8000898:	4603      	mov	r3, r0
 800089a:	b29a      	uxth	r2, r3
 800089c:	4b8f      	ldr	r3, [pc, #572]	; (8000adc <main+0x5a4>)
 800089e:	f8a3 221f 	strh.w	r2, [r3, #543]	; 0x21f
			send_packet(&huart1, &packet);
 80008a2:	498e      	ldr	r1, [pc, #568]	; (8000adc <main+0x5a4>)
 80008a4:	4890      	ldr	r0, [pc, #576]	; (8000ae8 <main+0x5b0>)
 80008a6:	f000 fcec 	bl	8001282 <send_packet>
			RESET_UPWARDS()
 80008aa:	f240 2221 	movw	r2, #545	; 0x221
 80008ae:	498a      	ldr	r1, [pc, #552]	; (8000ad8 <main+0x5a0>)
 80008b0:	488d      	ldr	r0, [pc, #564]	; (8000ae8 <main+0x5b0>)
 80008b2:	f004 f902 	bl	8004aba <HAL_UART_Receive_DMA>
			break;
 80008b6:	e1e2      	b.n	8000c7e <main+0x746>

		case (SENSORS):
			if (!STR_MATCH(UID, packet.uid)) {
 80008b8:	4985      	ldr	r1, [pc, #532]	; (8000ad0 <main+0x598>)
 80008ba:	4886      	ldr	r0, [pc, #536]	; (8000ad4 <main+0x59c>)
 80008bc:	f7ff fc6c 	bl	8000198 <strcmp>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d019      	beq.n	80008fa <main+0x3c2>
				packet.checksum = make_crc(&packet, buffer);
 80008c6:	4984      	ldr	r1, [pc, #528]	; (8000ad8 <main+0x5a0>)
 80008c8:	4884      	ldr	r0, [pc, #528]	; (8000adc <main+0x5a4>)
 80008ca:	f000 fd15 	bl	80012f8 <make_crc>
 80008ce:	4603      	mov	r3, r0
 80008d0:	b29a      	uxth	r2, r3
 80008d2:	4b82      	ldr	r3, [pc, #520]	; (8000adc <main+0x5a4>)
 80008d4:	f8a3 221f 	strh.w	r2, [r3, #543]	; 0x21f
				send_packet(&huart3, &packet);
 80008d8:	4980      	ldr	r1, [pc, #512]	; (8000adc <main+0x5a4>)
 80008da:	4881      	ldr	r0, [pc, #516]	; (8000ae0 <main+0x5a8>)
 80008dc:	f000 fcd1 	bl	8001282 <send_packet>
				RESET_DOWNWARDS()
 80008e0:	f240 2221 	movw	r2, #545	; 0x221
 80008e4:	497f      	ldr	r1, [pc, #508]	; (8000ae4 <main+0x5ac>)
 80008e6:	487e      	ldr	r0, [pc, #504]	; (8000ae0 <main+0x5a8>)
 80008e8:	f004 f8e7 	bl	8004aba <HAL_UART_Receive_DMA>
				RESET_UPWARDS();
 80008ec:	f240 2221 	movw	r2, #545	; 0x221
 80008f0:	4979      	ldr	r1, [pc, #484]	; (8000ad8 <main+0x5a0>)
 80008f2:	487d      	ldr	r0, [pc, #500]	; (8000ae8 <main+0x5b0>)
 80008f4:	f004 f8e1 	bl	8004aba <HAL_UART_Receive_DMA>
				continue;
 80008f8:	e1d1      	b.n	8000c9e <main+0x766>
			}
			switch (packet.options) {
 80008fa:	4b78      	ldr	r3, [pc, #480]	; (8000adc <main+0x5a4>)
 80008fc:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000900:	2b02      	cmp	r3, #2
 8000902:	f000 8082 	beq.w	8000a0a <main+0x4d2>
 8000906:	2b02      	cmp	r3, #2
 8000908:	f200 809d 	bhi.w	8000a46 <main+0x50e>
 800090c:	2b00      	cmp	r3, #0
 800090e:	d002      	beq.n	8000916 <main+0x3de>
 8000910:	2b01      	cmp	r3, #1
 8000912:	d04c      	beq.n	80009ae <main+0x476>
 8000914:	e097      	b.n	8000a46 <main+0x50e>
			case ALL:
				packet.data[0] = *temp110_cal & 0xFF;
 8000916:	4b76      	ldr	r3, [pc, #472]	; (8000af0 <main+0x5b8>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	881b      	ldrh	r3, [r3, #0]
 800091c:	b2da      	uxtb	r2, r3
 800091e:	4b6f      	ldr	r3, [pc, #444]	; (8000adc <main+0x5a4>)
 8000920:	77da      	strb	r2, [r3, #31]
				packet.data[1] = (*temp110_cal >> 8) & 0xFF;
 8000922:	4b73      	ldr	r3, [pc, #460]	; (8000af0 <main+0x5b8>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	881b      	ldrh	r3, [r3, #0]
 8000928:	0a1b      	lsrs	r3, r3, #8
 800092a:	b29b      	uxth	r3, r3
 800092c:	b2da      	uxtb	r2, r3
 800092e:	4b6b      	ldr	r3, [pc, #428]	; (8000adc <main+0x5a4>)
 8000930:	f883 2020 	strb.w	r2, [r3, #32]

				packet.data[2] = *temp30_cal & 0xFF;
 8000934:	4b6f      	ldr	r3, [pc, #444]	; (8000af4 <main+0x5bc>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	881b      	ldrh	r3, [r3, #0]
 800093a:	b2da      	uxtb	r2, r3
 800093c:	4b67      	ldr	r3, [pc, #412]	; (8000adc <main+0x5a4>)
 800093e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				packet.data[3] = (*temp30_cal >> 8) & 0xFF;
 8000942:	4b6c      	ldr	r3, [pc, #432]	; (8000af4 <main+0x5bc>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	881b      	ldrh	r3, [r3, #0]
 8000948:	0a1b      	lsrs	r3, r3, #8
 800094a:	b29b      	uxth	r3, r3
 800094c:	b2da      	uxtb	r2, r3
 800094e:	4b63      	ldr	r3, [pc, #396]	; (8000adc <main+0x5a4>)
 8000950:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

				packet.data[4] = temp & 0x00FF;
 8000954:	f8b7 322e 	ldrh.w	r3, [r7, #558]	; 0x22e
 8000958:	b2da      	uxtb	r2, r3
 800095a:	4b60      	ldr	r3, [pc, #384]	; (8000adc <main+0x5a4>)
 800095c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
				packet.data[5] = (temp >> 8) & 0xFF;
 8000960:	f8b7 322e 	ldrh.w	r3, [r7, #558]	; 0x22e
 8000964:	0a1b      	lsrs	r3, r3, #8
 8000966:	b29b      	uxth	r3, r3
 8000968:	b2da      	uxtb	r2, r3
 800096a:	4b5c      	ldr	r3, [pc, #368]	; (8000adc <main+0x5a4>)
 800096c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

				packet.data[6] = *vdd_cal & 0xFF;
 8000970:	4b61      	ldr	r3, [pc, #388]	; (8000af8 <main+0x5c0>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	881b      	ldrh	r3, [r3, #0]
 8000976:	b2da      	uxtb	r2, r3
 8000978:	4b58      	ldr	r3, [pc, #352]	; (8000adc <main+0x5a4>)
 800097a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
				packet.data[7] = (*vdd_cal >> 8) & 0xFF;
 800097e:	4b5e      	ldr	r3, [pc, #376]	; (8000af8 <main+0x5c0>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	881b      	ldrh	r3, [r3, #0]
 8000984:	0a1b      	lsrs	r3, r3, #8
 8000986:	b29b      	uxth	r3, r3
 8000988:	b2da      	uxtb	r2, r3
 800098a:	4b54      	ldr	r3, [pc, #336]	; (8000adc <main+0x5a4>)
 800098c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

				packet.data[8] = vdd & 0xFF;
 8000990:	f8b7 322c 	ldrh.w	r3, [r7, #556]	; 0x22c
 8000994:	b2da      	uxtb	r2, r3
 8000996:	4b51      	ldr	r3, [pc, #324]	; (8000adc <main+0x5a4>)
 8000998:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
				packet.data[9] = (vdd >> 8) & 0xFF;
 800099c:	f8b7 322c 	ldrh.w	r3, [r7, #556]	; 0x22c
 80009a0:	0a1b      	lsrs	r3, r3, #8
 80009a2:	b29b      	uxth	r3, r3
 80009a4:	b2da      	uxtb	r2, r3
 80009a6:	4b4d      	ldr	r3, [pc, #308]	; (8000adc <main+0x5a4>)
 80009a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
				break;
 80009ac:	e04b      	b.n	8000a46 <main+0x50e>
			case TEMP:
				packet.data[0] = *temp110_cal & 0xFF;
 80009ae:	4b50      	ldr	r3, [pc, #320]	; (8000af0 <main+0x5b8>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	881b      	ldrh	r3, [r3, #0]
 80009b4:	b2da      	uxtb	r2, r3
 80009b6:	4b49      	ldr	r3, [pc, #292]	; (8000adc <main+0x5a4>)
 80009b8:	77da      	strb	r2, [r3, #31]
				packet.data[1] = (*temp110_cal >> 8) & 0xFF;
 80009ba:	4b4d      	ldr	r3, [pc, #308]	; (8000af0 <main+0x5b8>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	881b      	ldrh	r3, [r3, #0]
 80009c0:	0a1b      	lsrs	r3, r3, #8
 80009c2:	b29b      	uxth	r3, r3
 80009c4:	b2da      	uxtb	r2, r3
 80009c6:	4b45      	ldr	r3, [pc, #276]	; (8000adc <main+0x5a4>)
 80009c8:	f883 2020 	strb.w	r2, [r3, #32]

				packet.data[2] = *temp30_cal & 0xFF;
 80009cc:	4b49      	ldr	r3, [pc, #292]	; (8000af4 <main+0x5bc>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	881b      	ldrh	r3, [r3, #0]
 80009d2:	b2da      	uxtb	r2, r3
 80009d4:	4b41      	ldr	r3, [pc, #260]	; (8000adc <main+0x5a4>)
 80009d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				packet.data[3] = (*temp30_cal >> 8) & 0xFF;
 80009da:	4b46      	ldr	r3, [pc, #280]	; (8000af4 <main+0x5bc>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	881b      	ldrh	r3, [r3, #0]
 80009e0:	0a1b      	lsrs	r3, r3, #8
 80009e2:	b29b      	uxth	r3, r3
 80009e4:	b2da      	uxtb	r2, r3
 80009e6:	4b3d      	ldr	r3, [pc, #244]	; (8000adc <main+0x5a4>)
 80009e8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

				packet.data[4] = temp & 0x00FF;
 80009ec:	f8b7 322e 	ldrh.w	r3, [r7, #558]	; 0x22e
 80009f0:	b2da      	uxtb	r2, r3
 80009f2:	4b3a      	ldr	r3, [pc, #232]	; (8000adc <main+0x5a4>)
 80009f4:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
				packet.data[5] = (temp >> 8) & 0xFF;
 80009f8:	f8b7 322e 	ldrh.w	r3, [r7, #558]	; 0x22e
 80009fc:	0a1b      	lsrs	r3, r3, #8
 80009fe:	b29b      	uxth	r3, r3
 8000a00:	b2da      	uxtb	r2, r3
 8000a02:	4b36      	ldr	r3, [pc, #216]	; (8000adc <main+0x5a4>)
 8000a04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
				break;
 8000a08:	e01d      	b.n	8000a46 <main+0x50e>
			case VDD:
				packet.data[0] = *vdd_cal & 0xFF;
 8000a0a:	4b3b      	ldr	r3, [pc, #236]	; (8000af8 <main+0x5c0>)
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	881b      	ldrh	r3, [r3, #0]
 8000a10:	b2da      	uxtb	r2, r3
 8000a12:	4b32      	ldr	r3, [pc, #200]	; (8000adc <main+0x5a4>)
 8000a14:	77da      	strb	r2, [r3, #31]
				packet.data[1] = (*vdd_cal >> 8) & 0xFF;
 8000a16:	4b38      	ldr	r3, [pc, #224]	; (8000af8 <main+0x5c0>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	881b      	ldrh	r3, [r3, #0]
 8000a1c:	0a1b      	lsrs	r3, r3, #8
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	b2da      	uxtb	r2, r3
 8000a22:	4b2e      	ldr	r3, [pc, #184]	; (8000adc <main+0x5a4>)
 8000a24:	f883 2020 	strb.w	r2, [r3, #32]

				packet.data[2] = vdd & 0xFF;
 8000a28:	f8b7 322c 	ldrh.w	r3, [r7, #556]	; 0x22c
 8000a2c:	b2da      	uxtb	r2, r3
 8000a2e:	4b2b      	ldr	r3, [pc, #172]	; (8000adc <main+0x5a4>)
 8000a30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				packet.data[3] = (vdd >> 8) & 0xFF;
 8000a34:	f8b7 322c 	ldrh.w	r3, [r7, #556]	; 0x22c
 8000a38:	0a1b      	lsrs	r3, r3, #8
 8000a3a:	b29b      	uxth	r3, r3
 8000a3c:	b2da      	uxtb	r2, r3
 8000a3e:	4b27      	ldr	r3, [pc, #156]	; (8000adc <main+0x5a4>)
 8000a40:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
				break;
 8000a44:	bf00      	nop
			}
			packet.command = ACK;
 8000a46:	4b25      	ldr	r3, [pc, #148]	; (8000adc <main+0x5a4>)
 8000a48:	2201      	movs	r2, #1
 8000a4a:	701a      	strb	r2, [r3, #0]
			packet.checksum = make_crc(&packet, buffer);
 8000a4c:	4922      	ldr	r1, [pc, #136]	; (8000ad8 <main+0x5a0>)
 8000a4e:	4823      	ldr	r0, [pc, #140]	; (8000adc <main+0x5a4>)
 8000a50:	f000 fc52 	bl	80012f8 <make_crc>
 8000a54:	4603      	mov	r3, r0
 8000a56:	b29a      	uxth	r2, r3
 8000a58:	4b20      	ldr	r3, [pc, #128]	; (8000adc <main+0x5a4>)
 8000a5a:	f8a3 221f 	strh.w	r2, [r3, #543]	; 0x21f
			send_packet(&huart1, &packet);
 8000a5e:	491f      	ldr	r1, [pc, #124]	; (8000adc <main+0x5a4>)
 8000a60:	4821      	ldr	r0, [pc, #132]	; (8000ae8 <main+0x5b0>)
 8000a62:	f000 fc0e 	bl	8001282 <send_packet>
			RESET_UPWARDS()
 8000a66:	f240 2221 	movw	r2, #545	; 0x221
 8000a6a:	491b      	ldr	r1, [pc, #108]	; (8000ad8 <main+0x5a0>)
 8000a6c:	481e      	ldr	r0, [pc, #120]	; (8000ae8 <main+0x5b0>)
 8000a6e:	f004 f824 	bl	8004aba <HAL_UART_Receive_DMA>
			break;
 8000a72:	e104      	b.n	8000c7e <main+0x746>

			// Load source code into SRC_BUF
		case (LOAD):
			if (STR_MATCH(UID, packet.uid)) {
 8000a74:	4916      	ldr	r1, [pc, #88]	; (8000ad0 <main+0x598>)
 8000a76:	4817      	ldr	r0, [pc, #92]	; (8000ad4 <main+0x59c>)
 8000a78:	f7ff fb8e 	bl	8000198 <strcmp>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d13e      	bne.n	8000b00 <main+0x5c8>
				memcpy(SRC_BUF + (DATA_SIZE * packet.options), packet.data,
 8000a82:	4b1e      	ldr	r3, [pc, #120]	; (8000afc <main+0x5c4>)
 8000a84:	681a      	ldr	r2, [r3, #0]
 8000a86:	4b15      	ldr	r3, [pc, #84]	; (8000adc <main+0x5a4>)
 8000a88:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000a8c:	025b      	lsls	r3, r3, #9
 8000a8e:	441a      	add	r2, r3
 8000a90:	4b12      	ldr	r3, [pc, #72]	; (8000adc <main+0x5a4>)
 8000a92:	4610      	mov	r0, r2
 8000a94:	331f      	adds	r3, #31
 8000a96:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	f004 fdf0 	bl	8005680 <memcpy>
				DATA_SIZE);
				packet.command = ACK;
 8000aa0:	4b0e      	ldr	r3, [pc, #56]	; (8000adc <main+0x5a4>)
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	701a      	strb	r2, [r3, #0]
				packet.checksum = make_crc(&packet, buffer);
 8000aa6:	490c      	ldr	r1, [pc, #48]	; (8000ad8 <main+0x5a0>)
 8000aa8:	480c      	ldr	r0, [pc, #48]	; (8000adc <main+0x5a4>)
 8000aaa:	f000 fc25 	bl	80012f8 <make_crc>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	b29a      	uxth	r2, r3
 8000ab2:	4b0a      	ldr	r3, [pc, #40]	; (8000adc <main+0x5a4>)
 8000ab4:	f8a3 221f 	strh.w	r2, [r3, #543]	; 0x21f
				send_packet(&huart1, &packet);
 8000ab8:	4908      	ldr	r1, [pc, #32]	; (8000adc <main+0x5a4>)
 8000aba:	480b      	ldr	r0, [pc, #44]	; (8000ae8 <main+0x5b0>)
 8000abc:	f000 fbe1 	bl	8001282 <send_packet>
				RESET_UPWARDS()
 8000ac0:	f240 2221 	movw	r2, #545	; 0x221
 8000ac4:	4904      	ldr	r1, [pc, #16]	; (8000ad8 <main+0x5a0>)
 8000ac6:	4808      	ldr	r0, [pc, #32]	; (8000ae8 <main+0x5b0>)
 8000ac8:	f003 fff7 	bl	8004aba <HAL_UART_Receive_DMA>
				packet.checksum = make_crc(&packet, buffer);
				send_packet(&huart3, &packet);
				RESET_DOWNWARDS()
				RESET_UPWARDS()
			}
			break;
 8000acc:	e0d7      	b.n	8000c7e <main+0x746>
 8000ace:	bf00      	nop
 8000ad0:	20000276 	.word	0x20000276
 8000ad4:	20000254 	.word	0x20000254
 8000ad8:	200004a4 	.word	0x200004a4
 8000adc:	20000270 	.word	0x20000270
 8000ae0:	20000188 	.word	0x20000188
 8000ae4:	200006c8 	.word	0x200006c8
 8000ae8:	20000144 	.word	0x20000144
 8000aec:	2000028f 	.word	0x2000028f
 8000af0:	20000014 	.word	0x20000014
 8000af4:	20000010 	.word	0x20000010
 8000af8:	2000000c 	.word	0x2000000c
 8000afc:	20000004 	.word	0x20000004
				packet.checksum = make_crc(&packet, buffer);
 8000b00:	4967      	ldr	r1, [pc, #412]	; (8000ca0 <main+0x768>)
 8000b02:	4868      	ldr	r0, [pc, #416]	; (8000ca4 <main+0x76c>)
 8000b04:	f000 fbf8 	bl	80012f8 <make_crc>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	b29a      	uxth	r2, r3
 8000b0c:	4b65      	ldr	r3, [pc, #404]	; (8000ca4 <main+0x76c>)
 8000b0e:	f8a3 221f 	strh.w	r2, [r3, #543]	; 0x21f
				send_packet(&huart3, &packet);
 8000b12:	4964      	ldr	r1, [pc, #400]	; (8000ca4 <main+0x76c>)
 8000b14:	4864      	ldr	r0, [pc, #400]	; (8000ca8 <main+0x770>)
 8000b16:	f000 fbb4 	bl	8001282 <send_packet>
				RESET_DOWNWARDS()
 8000b1a:	f240 2221 	movw	r2, #545	; 0x221
 8000b1e:	4963      	ldr	r1, [pc, #396]	; (8000cac <main+0x774>)
 8000b20:	4861      	ldr	r0, [pc, #388]	; (8000ca8 <main+0x770>)
 8000b22:	f003 ffca 	bl	8004aba <HAL_UART_Receive_DMA>
				RESET_UPWARDS()
 8000b26:	f240 2221 	movw	r2, #545	; 0x221
 8000b2a:	495d      	ldr	r1, [pc, #372]	; (8000ca0 <main+0x768>)
 8000b2c:	4860      	ldr	r0, [pc, #384]	; (8000cb0 <main+0x778>)
 8000b2e:	f003 ffc4 	bl	8004aba <HAL_UART_Receive_DMA>
			break;
 8000b32:	e0a4      	b.n	8000c7e <main+0x746>

			// Execute the code in the given address
			// Results are stored to a region of FLASH
		case (EXEC):
			if (STR_MATCH(UID, packet.uid)) {
 8000b34:	495f      	ldr	r1, [pc, #380]	; (8000cb4 <main+0x77c>)
 8000b36:	4860      	ldr	r0, [pc, #384]	; (8000cb8 <main+0x780>)
 8000b38:	f7ff fb2e 	bl	8000198 <strcmp>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d128      	bne.n	8000b94 <main+0x65c>
				if (packet.options == 1) {
 8000b42:	4b58      	ldr	r3, [pc, #352]	; (8000ca4 <main+0x76c>)
 8000b44:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d102      	bne.n	8000b52 <main+0x61a>
					write_pos = 0;
 8000b4c:	4b5b      	ldr	r3, [pc, #364]	; (8000cbc <main+0x784>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
				}
				packet.options = eval_cmd((char*) SRC_BUF);
 8000b52:	4b5b      	ldr	r3, [pc, #364]	; (8000cc0 <main+0x788>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4618      	mov	r0, r3
 8000b58:	f001 fe42 	bl	80027e0 <eval_cmd>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	461a      	mov	r2, r3
 8000b60:	4b50      	ldr	r3, [pc, #320]	; (8000ca4 <main+0x76c>)
 8000b62:	f8c3 2002 	str.w	r2, [r3, #2]
				packet.command = ACK;
 8000b66:	4b4f      	ldr	r3, [pc, #316]	; (8000ca4 <main+0x76c>)
 8000b68:	2201      	movs	r2, #1
 8000b6a:	701a      	strb	r2, [r3, #0]
				packet.checksum = make_crc(&packet, buffer);
 8000b6c:	494c      	ldr	r1, [pc, #304]	; (8000ca0 <main+0x768>)
 8000b6e:	484d      	ldr	r0, [pc, #308]	; (8000ca4 <main+0x76c>)
 8000b70:	f000 fbc2 	bl	80012f8 <make_crc>
 8000b74:	4603      	mov	r3, r0
 8000b76:	b29a      	uxth	r2, r3
 8000b78:	4b4a      	ldr	r3, [pc, #296]	; (8000ca4 <main+0x76c>)
 8000b7a:	f8a3 221f 	strh.w	r2, [r3, #543]	; 0x21f
				send_packet(&huart1, &packet);
 8000b7e:	4949      	ldr	r1, [pc, #292]	; (8000ca4 <main+0x76c>)
 8000b80:	484b      	ldr	r0, [pc, #300]	; (8000cb0 <main+0x778>)
 8000b82:	f000 fb7e 	bl	8001282 <send_packet>
				RESET_UPWARDS()
 8000b86:	f240 2221 	movw	r2, #545	; 0x221
 8000b8a:	4945      	ldr	r1, [pc, #276]	; (8000ca0 <main+0x768>)
 8000b8c:	4848      	ldr	r0, [pc, #288]	; (8000cb0 <main+0x778>)
 8000b8e:	f003 ff94 	bl	8004aba <HAL_UART_Receive_DMA>
				packet.checksum = make_crc(&packet, buffer);
				send_packet(&huart3, &packet);
				RESET_DOWNWARDS()
				RESET_UPWARDS()
			}
			break;
 8000b92:	e074      	b.n	8000c7e <main+0x746>
				packet.checksum = make_crc(&packet, buffer);
 8000b94:	4942      	ldr	r1, [pc, #264]	; (8000ca0 <main+0x768>)
 8000b96:	4843      	ldr	r0, [pc, #268]	; (8000ca4 <main+0x76c>)
 8000b98:	f000 fbae 	bl	80012f8 <make_crc>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	b29a      	uxth	r2, r3
 8000ba0:	4b40      	ldr	r3, [pc, #256]	; (8000ca4 <main+0x76c>)
 8000ba2:	f8a3 221f 	strh.w	r2, [r3, #543]	; 0x21f
				send_packet(&huart3, &packet);
 8000ba6:	493f      	ldr	r1, [pc, #252]	; (8000ca4 <main+0x76c>)
 8000ba8:	483f      	ldr	r0, [pc, #252]	; (8000ca8 <main+0x770>)
 8000baa:	f000 fb6a 	bl	8001282 <send_packet>
				RESET_DOWNWARDS()
 8000bae:	f240 2221 	movw	r2, #545	; 0x221
 8000bb2:	493e      	ldr	r1, [pc, #248]	; (8000cac <main+0x774>)
 8000bb4:	483c      	ldr	r0, [pc, #240]	; (8000ca8 <main+0x770>)
 8000bb6:	f003 ff80 	bl	8004aba <HAL_UART_Receive_DMA>
				RESET_UPWARDS()
 8000bba:	f240 2221 	movw	r2, #545	; 0x221
 8000bbe:	4938      	ldr	r1, [pc, #224]	; (8000ca0 <main+0x768>)
 8000bc0:	483b      	ldr	r0, [pc, #236]	; (8000cb0 <main+0x778>)
 8000bc2:	f003 ff7a 	bl	8004aba <HAL_UART_Receive_DMA>
			break;
 8000bc6:	e05a      	b.n	8000c7e <main+0x746>

			// Retrieve results from the RETR Buffer
		case (RETR):
			if (STR_MATCH(UID, packet.uid)) {
 8000bc8:	493a      	ldr	r1, [pc, #232]	; (8000cb4 <main+0x77c>)
 8000bca:	483b      	ldr	r0, [pc, #236]	; (8000cb8 <main+0x780>)
 8000bcc:	f7ff fae4 	bl	8000198 <strcmp>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d125      	bne.n	8000c22 <main+0x6ea>
				memcpy(packet.data, WRITE_BUF + (DATA_SIZE * packet.options),
 8000bd6:	4b3b      	ldr	r3, [pc, #236]	; (8000cc4 <main+0x78c>)
 8000bd8:	681a      	ldr	r2, [r3, #0]
 8000bda:	4b32      	ldr	r3, [pc, #200]	; (8000ca4 <main+0x76c>)
 8000bdc:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8000be0:	02db      	lsls	r3, r3, #11
 8000be2:	441a      	add	r2, r3
 8000be4:	4b2f      	ldr	r3, [pc, #188]	; (8000ca4 <main+0x76c>)
 8000be6:	331f      	adds	r3, #31
 8000be8:	4611      	mov	r1, r2
 8000bea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f004 fd46 	bl	8005680 <memcpy>
				DATA_SIZE);
				packet.command = ACK;
 8000bf4:	4b2b      	ldr	r3, [pc, #172]	; (8000ca4 <main+0x76c>)
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	701a      	strb	r2, [r3, #0]
				packet.checksum = make_crc(&packet, buffer);
 8000bfa:	4929      	ldr	r1, [pc, #164]	; (8000ca0 <main+0x768>)
 8000bfc:	4829      	ldr	r0, [pc, #164]	; (8000ca4 <main+0x76c>)
 8000bfe:	f000 fb7b 	bl	80012f8 <make_crc>
 8000c02:	4603      	mov	r3, r0
 8000c04:	b29a      	uxth	r2, r3
 8000c06:	4b27      	ldr	r3, [pc, #156]	; (8000ca4 <main+0x76c>)
 8000c08:	f8a3 221f 	strh.w	r2, [r3, #543]	; 0x21f
				send_packet(&huart1, &packet);
 8000c0c:	4925      	ldr	r1, [pc, #148]	; (8000ca4 <main+0x76c>)
 8000c0e:	4828      	ldr	r0, [pc, #160]	; (8000cb0 <main+0x778>)
 8000c10:	f000 fb37 	bl	8001282 <send_packet>
				RESET_UPWARDS()
 8000c14:	f240 2221 	movw	r2, #545	; 0x221
 8000c18:	4921      	ldr	r1, [pc, #132]	; (8000ca0 <main+0x768>)
 8000c1a:	4825      	ldr	r0, [pc, #148]	; (8000cb0 <main+0x778>)
 8000c1c:	f003 ff4d 	bl	8004aba <HAL_UART_Receive_DMA>
				packet.checksum = make_crc(&packet, buffer);
				send_packet(&huart3, &packet);
				RESET_DOWNWARDS()
				RESET_UPWARDS()
			}
			break;
 8000c20:	e02d      	b.n	8000c7e <main+0x746>
				packet.checksum = make_crc(&packet, buffer);
 8000c22:	491f      	ldr	r1, [pc, #124]	; (8000ca0 <main+0x768>)
 8000c24:	481f      	ldr	r0, [pc, #124]	; (8000ca4 <main+0x76c>)
 8000c26:	f000 fb67 	bl	80012f8 <make_crc>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	b29a      	uxth	r2, r3
 8000c2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ca4 <main+0x76c>)
 8000c30:	f8a3 221f 	strh.w	r2, [r3, #543]	; 0x21f
				send_packet(&huart3, &packet);
 8000c34:	491b      	ldr	r1, [pc, #108]	; (8000ca4 <main+0x76c>)
 8000c36:	481c      	ldr	r0, [pc, #112]	; (8000ca8 <main+0x770>)
 8000c38:	f000 fb23 	bl	8001282 <send_packet>
				RESET_DOWNWARDS()
 8000c3c:	f240 2221 	movw	r2, #545	; 0x221
 8000c40:	491a      	ldr	r1, [pc, #104]	; (8000cac <main+0x774>)
 8000c42:	4819      	ldr	r0, [pc, #100]	; (8000ca8 <main+0x770>)
 8000c44:	f003 ff39 	bl	8004aba <HAL_UART_Receive_DMA>
				RESET_UPWARDS()
 8000c48:	f240 2221 	movw	r2, #545	; 0x221
 8000c4c:	4914      	ldr	r1, [pc, #80]	; (8000ca0 <main+0x768>)
 8000c4e:	4818      	ldr	r0, [pc, #96]	; (8000cb0 <main+0x778>)
 8000c50:	f003 ff33 	bl	8004aba <HAL_UART_Receive_DMA>
			break;
 8000c54:	e013      	b.n	8000c7e <main+0x746>

			// We are not supposed to get ERR from upwards
			// So resend the message up
		case (ERR):
		default:
			packet.checksum = make_crc(&packet, buffer);
 8000c56:	4912      	ldr	r1, [pc, #72]	; (8000ca0 <main+0x768>)
 8000c58:	4812      	ldr	r0, [pc, #72]	; (8000ca4 <main+0x76c>)
 8000c5a:	f000 fb4d 	bl	80012f8 <make_crc>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	b29a      	uxth	r2, r3
 8000c62:	4b10      	ldr	r3, [pc, #64]	; (8000ca4 <main+0x76c>)
 8000c64:	f8a3 221f 	strh.w	r2, [r3, #543]	; 0x21f
			send_packet(&huart1, &packet);
 8000c68:	490e      	ldr	r1, [pc, #56]	; (8000ca4 <main+0x76c>)
 8000c6a:	4811      	ldr	r0, [pc, #68]	; (8000cb0 <main+0x778>)
 8000c6c:	f000 fb09 	bl	8001282 <send_packet>
			RESET_UPWARDS()
 8000c70:	f240 2221 	movw	r2, #545	; 0x221
 8000c74:	490a      	ldr	r1, [pc, #40]	; (8000ca0 <main+0x768>)
 8000c76:	480e      	ldr	r0, [pc, #56]	; (8000cb0 <main+0x778>)
 8000c78:	f003 ff1f 	bl	8004aba <HAL_UART_Receive_DMA>
			break;
 8000c7c:	bf00      	nop
		}
		RESET_DOWNWARDS()
 8000c7e:	f240 2221 	movw	r2, #545	; 0x221
 8000c82:	490a      	ldr	r1, [pc, #40]	; (8000cac <main+0x774>)
 8000c84:	4808      	ldr	r0, [pc, #32]	; (8000ca8 <main+0x770>)
 8000c86:	f003 ff18 	bl	8004aba <HAL_UART_Receive_DMA>
		RESET_UPWARDS()
 8000c8a:	f240 2221 	movw	r2, #545	; 0x221
 8000c8e:	4904      	ldr	r1, [pc, #16]	; (8000ca0 <main+0x768>)
 8000c90:	4807      	ldr	r0, [pc, #28]	; (8000cb0 <main+0x778>)
 8000c92:	f003 ff12 	bl	8004aba <HAL_UART_Receive_DMA>
 8000c96:	e48b      	b.n	80005b0 <main+0x78>
			continue;
 8000c98:	bf00      	nop
 8000c9a:	e489      	b.n	80005b0 <main+0x78>
			continue;
 8000c9c:	bf00      	nop
	while (1) {
 8000c9e:	e487      	b.n	80005b0 <main+0x78>
 8000ca0:	200004a4 	.word	0x200004a4
 8000ca4:	20000270 	.word	0x20000270
 8000ca8:	20000188 	.word	0x20000188
 8000cac:	200006c8 	.word	0x200006c8
 8000cb0:	20000144 	.word	0x20000144
 8000cb4:	20000276 	.word	0x20000276
 8000cb8:	20000254 	.word	0x20000254
 8000cbc:	20000494 	.word	0x20000494
 8000cc0:	20000004 	.word	0x20000004
 8000cc4:	20000008 	.word	0x20000008

08000cc8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b092      	sub	sp, #72	; 0x48
 8000ccc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000cce:	f107 0314 	add.w	r3, r7, #20
 8000cd2:	2234      	movs	r2, #52	; 0x34
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f004 fce0 	bl	800569c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000cdc:	463b      	mov	r3, r7
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	605a      	str	r2, [r3, #4]
 8000ce4:	609a      	str	r2, [r3, #8]
 8000ce6:	60da      	str	r2, [r3, #12]
 8000ce8:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cea:	4b1d      	ldr	r3, [pc, #116]	; (8000d60 <SystemClock_Config+0x98>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000cf2:	4a1b      	ldr	r2, [pc, #108]	; (8000d60 <SystemClock_Config+0x98>)
 8000cf4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000cf8:	6013      	str	r3, [r2, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000cfa:	2302      	movs	r3, #2
 8000cfc:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d02:	2310      	movs	r3, #16
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d06:	2302      	movs	r3, #2
 8000d08:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000d0e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000d12:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8000d14:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d18:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000d1a:	f107 0314 	add.w	r3, r7, #20
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f003 f838 	bl	8003d94 <HAL_RCC_OscConfig>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <SystemClock_Config+0x66>
		Error_Handler();
 8000d2a:	f000 f95b 	bl	8000fe4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000d2e:	230f      	movs	r3, #15
 8000d30:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d32:	2303      	movs	r3, #3
 8000d34:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d36:	2300      	movs	r3, #0
 8000d38:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8000d42:	463b      	mov	r3, r7
 8000d44:	2101      	movs	r1, #1
 8000d46:	4618      	mov	r0, r3
 8000d48:	f003 fb54 	bl	80043f4 <HAL_RCC_ClockConfig>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <SystemClock_Config+0x8e>
		Error_Handler();
 8000d52:	f000 f947 	bl	8000fe4 <Error_Handler>
	}
}
 8000d56:	bf00      	nop
 8000d58:	3748      	adds	r7, #72	; 0x48
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	40007000 	.word	0x40007000

08000d64 <MX_ADC_Init>:
/**
 * @brief ADC Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC_Init(void) {
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC_Init 0 */

	/* USER CODE END ADC_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000d6a:	1d3b      	adds	r3, r7, #4
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc.Instance = ADC1;
 8000d74:	4b2e      	ldr	r3, [pc, #184]	; (8000e30 <MX_ADC_Init+0xcc>)
 8000d76:	4a2f      	ldr	r2, [pc, #188]	; (8000e34 <MX_ADC_Init+0xd0>)
 8000d78:	601a      	str	r2, [r3, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d7a:	4b2d      	ldr	r3, [pc, #180]	; (8000e30 <MX_ADC_Init+0xcc>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	605a      	str	r2, [r3, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000d80:	4b2b      	ldr	r3, [pc, #172]	; (8000e30 <MX_ADC_Init+0xcc>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	609a      	str	r2, [r3, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d86:	4b2a      	ldr	r3, [pc, #168]	; (8000e30 <MX_ADC_Init+0xcc>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	60da      	str	r2, [r3, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000d8c:	4b28      	ldr	r3, [pc, #160]	; (8000e30 <MX_ADC_Init+0xcc>)
 8000d8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d92:	611a      	str	r2, [r3, #16]
	hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d94:	4b26      	ldr	r3, [pc, #152]	; (8000e30 <MX_ADC_Init+0xcc>)
 8000d96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d9a:	615a      	str	r2, [r3, #20]
	hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8000d9c:	4b24      	ldr	r3, [pc, #144]	; (8000e30 <MX_ADC_Init+0xcc>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	619a      	str	r2, [r3, #24]
	hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8000da2:	4b23      	ldr	r3, [pc, #140]	; (8000e30 <MX_ADC_Init+0xcc>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	61da      	str	r2, [r3, #28]
	hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8000da8:	4b21      	ldr	r3, [pc, #132]	; (8000e30 <MX_ADC_Init+0xcc>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	621a      	str	r2, [r3, #32]
	hadc.Init.ContinuousConvMode = ENABLE;
 8000dae:	4b20      	ldr	r3, [pc, #128]	; (8000e30 <MX_ADC_Init+0xcc>)
 8000db0:	2201      	movs	r2, #1
 8000db2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	hadc.Init.NbrOfConversion = 2;
 8000db6:	4b1e      	ldr	r3, [pc, #120]	; (8000e30 <MX_ADC_Init+0xcc>)
 8000db8:	2202      	movs	r2, #2
 8000dba:	629a      	str	r2, [r3, #40]	; 0x28
	hadc.Init.DiscontinuousConvMode = DISABLE;
 8000dbc:	4b1c      	ldr	r3, [pc, #112]	; (8000e30 <MX_ADC_Init+0xcc>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dc4:	4b1a      	ldr	r3, [pc, #104]	; (8000e30 <MX_ADC_Init+0xcc>)
 8000dc6:	2210      	movs	r2, #16
 8000dc8:	635a      	str	r2, [r3, #52]	; 0x34
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dca:	4b19      	ldr	r3, [pc, #100]	; (8000e30 <MX_ADC_Init+0xcc>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	639a      	str	r2, [r3, #56]	; 0x38
	hadc.Init.DMAContinuousRequests = ENABLE;
 8000dd0:	4b17      	ldr	r3, [pc, #92]	; (8000e30 <MX_ADC_Init+0xcc>)
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 8000dd8:	4815      	ldr	r0, [pc, #84]	; (8000e30 <MX_ADC_Init+0xcc>)
 8000dda:	f001 fdc7 	bl	800296c <HAL_ADC_Init>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_ADC_Init+0x84>
		Error_Handler();
 8000de4:	f000 f8fe 	bl	8000fe4 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000de8:	2310      	movs	r3, #16
 8000dea:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dec:	2301      	movs	r3, #1
 8000dee:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_96CYCLES;
 8000df0:	2305      	movs	r3, #5
 8000df2:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000df4:	1d3b      	adds	r3, r7, #4
 8000df6:	4619      	mov	r1, r3
 8000df8:	480d      	ldr	r0, [pc, #52]	; (8000e30 <MX_ADC_Init+0xcc>)
 8000dfa:	f002 f8af 	bl	8002f5c <HAL_ADC_ConfigChannel>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_ADC_Init+0xa4>
		Error_Handler();
 8000e04:	f000 f8ee 	bl	8000fe4 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000e08:	2311      	movs	r3, #17
 8000e0a:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_192CYCLES;
 8000e10:	2306      	movs	r3, #6
 8000e12:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8000e14:	1d3b      	adds	r3, r7, #4
 8000e16:	4619      	mov	r1, r3
 8000e18:	4805      	ldr	r0, [pc, #20]	; (8000e30 <MX_ADC_Init+0xcc>)
 8000e1a:	f002 f89f 	bl	8002f5c <HAL_ADC_ConfigChannel>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_ADC_Init+0xc4>
		Error_Handler();
 8000e24:	f000 f8de 	bl	8000fe4 <Error_Handler>
	}
	/* USER CODE BEGIN ADC_Init 2 */

	/* USER CODE END ADC_Init 2 */

}
 8000e28:	bf00      	nop
 8000e2a:	3710      	adds	r7, #16
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	200000ac 	.word	0x200000ac
 8000e34:	40012400 	.word	0x40012400

08000e38 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8000e3c:	4b10      	ldr	r3, [pc, #64]	; (8000e80 <MX_USART1_UART_Init+0x48>)
 8000e3e:	4a11      	ldr	r2, [pc, #68]	; (8000e84 <MX_USART1_UART_Init+0x4c>)
 8000e40:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 350000;
 8000e42:	4b0f      	ldr	r3, [pc, #60]	; (8000e80 <MX_USART1_UART_Init+0x48>)
 8000e44:	4a10      	ldr	r2, [pc, #64]	; (8000e88 <MX_USART1_UART_Init+0x50>)
 8000e46:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e48:	4b0d      	ldr	r3, [pc, #52]	; (8000e80 <MX_USART1_UART_Init+0x48>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000e4e:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <MX_USART1_UART_Init+0x48>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000e54:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <MX_USART1_UART_Init+0x48>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000e5a:	4b09      	ldr	r3, [pc, #36]	; (8000e80 <MX_USART1_UART_Init+0x48>)
 8000e5c:	220c      	movs	r2, #12
 8000e5e:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e60:	4b07      	ldr	r3, [pc, #28]	; (8000e80 <MX_USART1_UART_Init+0x48>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e66:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <MX_USART1_UART_Init+0x48>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000e6c:	4804      	ldr	r0, [pc, #16]	; (8000e80 <MX_USART1_UART_Init+0x48>)
 8000e6e:	f003 fd45 	bl	80048fc <HAL_UART_Init>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_USART1_UART_Init+0x44>
		Error_Handler();
 8000e78:	f000 f8b4 	bl	8000fe4 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000e7c:	bf00      	nop
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20000144 	.word	0x20000144
 8000e84:	40013800 	.word	0x40013800
 8000e88:	00055730 	.word	0x00055730

08000e8c <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000e90:	4b10      	ldr	r3, [pc, #64]	; (8000ed4 <MX_USART3_UART_Init+0x48>)
 8000e92:	4a11      	ldr	r2, [pc, #68]	; (8000ed8 <MX_USART3_UART_Init+0x4c>)
 8000e94:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 350000;
 8000e96:	4b0f      	ldr	r3, [pc, #60]	; (8000ed4 <MX_USART3_UART_Init+0x48>)
 8000e98:	4a10      	ldr	r2, [pc, #64]	; (8000edc <MX_USART3_UART_Init+0x50>)
 8000e9a:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e9c:	4b0d      	ldr	r3, [pc, #52]	; (8000ed4 <MX_USART3_UART_Init+0x48>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000ea2:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <MX_USART3_UART_Init+0x48>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000ea8:	4b0a      	ldr	r3, [pc, #40]	; (8000ed4 <MX_USART3_UART_Init+0x48>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000eae:	4b09      	ldr	r3, [pc, #36]	; (8000ed4 <MX_USART3_UART_Init+0x48>)
 8000eb0:	220c      	movs	r2, #12
 8000eb2:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eb4:	4b07      	ldr	r3, [pc, #28]	; (8000ed4 <MX_USART3_UART_Init+0x48>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eba:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <MX_USART3_UART_Init+0x48>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8000ec0:	4804      	ldr	r0, [pc, #16]	; (8000ed4 <MX_USART3_UART_Init+0x48>)
 8000ec2:	f003 fd1b 	bl	80048fc <HAL_UART_Init>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_USART3_UART_Init+0x44>
		Error_Handler();
 8000ecc:	f000 f88a 	bl	8000fe4 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000ed0:	bf00      	nop
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20000188 	.word	0x20000188
 8000ed8:	40004800 	.word	0x40004800
 8000edc:	00055730 	.word	0x00055730

08000ee0 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000ee6:	4b14      	ldr	r3, [pc, #80]	; (8000f38 <MX_DMA_Init+0x58>)
 8000ee8:	69db      	ldr	r3, [r3, #28]
 8000eea:	4a13      	ldr	r2, [pc, #76]	; (8000f38 <MX_DMA_Init+0x58>)
 8000eec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ef0:	61d3      	str	r3, [r2, #28]
 8000ef2:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <MX_DMA_Init+0x58>)
 8000ef4:	69db      	ldr	r3, [r3, #28]
 8000ef6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000efa:	607b      	str	r3, [r7, #4]
 8000efc:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000efe:	2200      	movs	r2, #0
 8000f00:	2100      	movs	r1, #0
 8000f02:	200b      	movs	r0, #11
 8000f04:	f002 fb4f 	bl	80035a6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f08:	200b      	movs	r0, #11
 8000f0a:	f002 fb68 	bl	80035de <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2100      	movs	r1, #0
 8000f12:	200d      	movs	r0, #13
 8000f14:	f002 fb47 	bl	80035a6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000f18:	200d      	movs	r0, #13
 8000f1a:	f002 fb60 	bl	80035de <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2100      	movs	r1, #0
 8000f22:	200f      	movs	r0, #15
 8000f24:	f002 fb3f 	bl	80035a6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000f28:	200f      	movs	r0, #15
 8000f2a:	f002 fb58 	bl	80035de <HAL_NVIC_EnableIRQ>

}
 8000f2e:	bf00      	nop
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40023800 	.word	0x40023800

08000f3c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000f42:	4b0e      	ldr	r3, [pc, #56]	; (8000f7c <MX_GPIO_Init+0x40>)
 8000f44:	69db      	ldr	r3, [r3, #28]
 8000f46:	4a0d      	ldr	r2, [pc, #52]	; (8000f7c <MX_GPIO_Init+0x40>)
 8000f48:	f043 0302 	orr.w	r3, r3, #2
 8000f4c:	61d3      	str	r3, [r2, #28]
 8000f4e:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <MX_GPIO_Init+0x40>)
 8000f50:	69db      	ldr	r3, [r3, #28]
 8000f52:	f003 0302 	and.w	r3, r3, #2
 8000f56:	607b      	str	r3, [r7, #4]
 8000f58:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5a:	4b08      	ldr	r3, [pc, #32]	; (8000f7c <MX_GPIO_Init+0x40>)
 8000f5c:	69db      	ldr	r3, [r3, #28]
 8000f5e:	4a07      	ldr	r2, [pc, #28]	; (8000f7c <MX_GPIO_Init+0x40>)
 8000f60:	f043 0301 	orr.w	r3, r3, #1
 8000f64:	61d3      	str	r3, [r2, #28]
 8000f66:	4b05      	ldr	r3, [pc, #20]	; (8000f7c <MX_GPIO_Init+0x40>)
 8000f68:	69db      	ldr	r3, [r3, #28]
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	603b      	str	r3, [r7, #0]
 8000f70:	683b      	ldr	r3, [r7, #0]

}
 8000f72:	bf00      	nop
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bc80      	pop	{r7}
 8000f7a:	4770      	bx	lr
 8000f7c:	40023800 	.word	0x40023800

08000f80 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

/// Calback upon finishing received data from USART
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a0f      	ldr	r2, [pc, #60]	; (8000fcc <HAL_UART_RxCpltCallback+0x4c>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d107      	bne.n	8000fa2 <HAL_UART_RxCpltCallback+0x22>
		bytes_rx += huart->RxXferSize;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8000f96:	461a      	mov	r2, r3
 8000f98:	4b0d      	ldr	r3, [pc, #52]	; (8000fd0 <HAL_UART_RxCpltCallback+0x50>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	4a0c      	ldr	r2, [pc, #48]	; (8000fd0 <HAL_UART_RxCpltCallback+0x50>)
 8000fa0:	6013      	str	r3, [r2, #0]
	}
	if (huart->Instance == USART3) {
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a0b      	ldr	r2, [pc, #44]	; (8000fd4 <HAL_UART_RxCpltCallback+0x54>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d10b      	bne.n	8000fc4 <HAL_UART_RxCpltCallback+0x44>
		send_buffer(&huart1, transport_buffer, PACKET_SIZE);
 8000fac:	f240 2221 	movw	r2, #545	; 0x221
 8000fb0:	4909      	ldr	r1, [pc, #36]	; (8000fd8 <HAL_UART_RxCpltCallback+0x58>)
 8000fb2:	480a      	ldr	r0, [pc, #40]	; (8000fdc <HAL_UART_RxCpltCallback+0x5c>)
 8000fb4:	f000 f84c 	bl	8001050 <send_buffer>
		HAL_UART_Receive_DMA(&huart3, transport_buffer, PACKET_SIZE);
 8000fb8:	f240 2221 	movw	r2, #545	; 0x221
 8000fbc:	4906      	ldr	r1, [pc, #24]	; (8000fd8 <HAL_UART_RxCpltCallback+0x58>)
 8000fbe:	4808      	ldr	r0, [pc, #32]	; (8000fe0 <HAL_UART_RxCpltCallback+0x60>)
 8000fc0:	f003 fd7b 	bl	8004aba <HAL_UART_Receive_DMA>
	}
}
 8000fc4:	bf00      	nop
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	40013800 	.word	0x40013800
 8000fd0:	200004a0 	.word	0x200004a0
 8000fd4:	40004800 	.word	0x40004800
 8000fd8:	200006c8 	.word	0x200006c8
 8000fdc:	20000144 	.word	0x20000144
 8000fe0:	20000188 	.word	0x20000188

08000fe4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe8:	b672      	cpsid	i
}
 8000fea:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000fec:	e7fe      	b.n	8000fec <Error_Handler+0x8>
	...

08000ff0 <read_sram>:
extern char UID[UID_SIZE];

/**
 * Read a region of SRAM.
 */
void read_sram(uint16_t offset, uint8_t *dest) {
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	6039      	str	r1, [r7, #0]
 8000ffa:	80fb      	strh	r3, [r7, #6]
	memcpy(dest, SRAM_START + (offset * DATA_SIZE), DATA_SIZE);
 8000ffc:	4b07      	ldr	r3, [pc, #28]	; (800101c <read_sram+0x2c>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	88fa      	ldrh	r2, [r7, #6]
 8001002:	0252      	lsls	r2, r2, #9
 8001004:	4413      	add	r3, r2
 8001006:	f44f 7200 	mov.w	r2, #512	; 0x200
 800100a:	4619      	mov	r1, r3
 800100c:	6838      	ldr	r0, [r7, #0]
 800100e:	f004 fb37 	bl	8005680 <memcpy>
}
 8001012:	bf00      	nop
 8001014:	3708      	adds	r7, #8
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	20000000 	.word	0x20000000

08001020 <write_sram>:

/**
 * Write values to a region of SRAM.
 */
void write_sram(uint16_t offset, uint8_t *src) {
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	6039      	str	r1, [r7, #0]
 800102a:	80fb      	strh	r3, [r7, #6]
	memcpy(SRAM_START + (offset * DATA_SIZE), src, DATA_SIZE);
 800102c:	4b07      	ldr	r3, [pc, #28]	; (800104c <write_sram+0x2c>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	88fa      	ldrh	r2, [r7, #6]
 8001032:	0252      	lsls	r2, r2, #9
 8001034:	4413      	add	r3, r2
 8001036:	f44f 7200 	mov.w	r2, #512	; 0x200
 800103a:	6839      	ldr	r1, [r7, #0]
 800103c:	4618      	mov	r0, r3
 800103e:	f004 fb1f 	bl	8005680 <memcpy>
}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000000 	.word	0x20000000

08001050 <send_buffer>:

/**
 * Send an array through the USART.
 */
void send_buffer(UART_HandleTypeDef *uart, uint8_t *buffer, size_t buf_len) {
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(uart, (uint8_t*) buffer, buf_len, 0xFFFF);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	b29a      	uxth	r2, r3
 8001060:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001064:	68b9      	ldr	r1, [r7, #8]
 8001066:	68f8      	ldr	r0, [r7, #12]
 8001068:	f003 fc95 	bl	8004996 <HAL_UART_Transmit>
}
 800106c:	bf00      	nop
 800106e:	3710      	adds	r7, #16
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}

08001074 <collect_bid>:

void collect_bid(char *uid_buf) {
 8001074:	b580      	push	{r7, lr}
 8001076:	b088      	sub	sp, #32
 8001078:	af02      	add	r7, sp, #8
 800107a:	6078      	str	r0, [r7, #4]
	uint32_t uid[3] = { 0 }; // 0 for high, 1 for medium and 2 for low
 800107c:	f107 0308 	add.w	r3, r7, #8
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
	uint8_t *uid_p = (uint8_t*) 0x1FF800D0;
 8001088:	4b24      	ldr	r3, [pc, #144]	; (800111c <collect_bid+0xa8>)
 800108a:	617b      	str	r3, [r7, #20]

	uid[0] = ((uint8_t) *(uid_p) << 24) + ((uint8_t) *(uid_p + 1) << 16)
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	061a      	lsls	r2, r3, #24
 8001092:	697b      	ldr	r3, [r7, #20]
 8001094:	3301      	adds	r3, #1
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	041b      	lsls	r3, r3, #16
 800109a:	441a      	add	r2, r3
			+ ((uint8_t) *(uid_p + 2) << 8) + ((uint8_t) *(uid_p + 3));
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	3302      	adds	r3, #2
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	021b      	lsls	r3, r3, #8
 80010a4:	4413      	add	r3, r2
 80010a6:	697a      	ldr	r2, [r7, #20]
 80010a8:	3203      	adds	r2, #3
 80010aa:	7812      	ldrb	r2, [r2, #0]
 80010ac:	4413      	add	r3, r2
	uid[0] = ((uint8_t) *(uid_p) << 24) + ((uint8_t) *(uid_p + 1) << 16)
 80010ae:	60bb      	str	r3, [r7, #8]
	uid[1] = ((uint8_t) *(uid_p + 4) << 24) + ((uint8_t) *(uid_p + 5) << 16)
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	3304      	adds	r3, #4
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	061a      	lsls	r2, r3, #24
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	3305      	adds	r3, #5
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	041b      	lsls	r3, r3, #16
 80010c0:	441a      	add	r2, r3
			+ ((uint8_t) *(uid_p + 6) << 8) + ((uint8_t) *(uid_p + 7));
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	3306      	adds	r3, #6
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	021b      	lsls	r3, r3, #8
 80010ca:	4413      	add	r3, r2
 80010cc:	697a      	ldr	r2, [r7, #20]
 80010ce:	3207      	adds	r2, #7
 80010d0:	7812      	ldrb	r2, [r2, #0]
 80010d2:	4413      	add	r3, r2
	uid[1] = ((uint8_t) *(uid_p + 4) << 24) + ((uint8_t) *(uid_p + 5) << 16)
 80010d4:	60fb      	str	r3, [r7, #12]

	uid_p = (uint8_t*) 0x1FF800e3;
 80010d6:	4b12      	ldr	r3, [pc, #72]	; (8001120 <collect_bid+0xac>)
 80010d8:	617b      	str	r3, [r7, #20]
	uid[2] = ((uint8_t) *(uid_p) << 24) + ((uint8_t) *(uid_p + 1) << 16)
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	061a      	lsls	r2, r3, #24
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	3301      	adds	r3, #1
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	041b      	lsls	r3, r3, #16
 80010e8:	441a      	add	r2, r3
			+ ((uint8_t) *(uid_p + 2) << 8) + ((uint8_t) *(uid_p + 3));
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	3302      	adds	r3, #2
 80010ee:	781b      	ldrb	r3, [r3, #0]
 80010f0:	021b      	lsls	r3, r3, #8
 80010f2:	4413      	add	r3, r2
 80010f4:	697a      	ldr	r2, [r7, #20]
 80010f6:	3203      	adds	r2, #3
 80010f8:	7812      	ldrb	r2, [r2, #0]
 80010fa:	4413      	add	r3, r2
	uid[2] = ((uint8_t) *(uid_p) << 24) + ((uint8_t) *(uid_p + 1) << 16)
 80010fc:	613b      	str	r3, [r7, #16]

	snprintf(uid_buf, UID_SIZE, "%08X%08X%08X", uid[0], uid[1], uid[2]);
 80010fe:	68b9      	ldr	r1, [r7, #8]
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	9201      	str	r2, [sp, #4]
 8001106:	9300      	str	r3, [sp, #0]
 8001108:	460b      	mov	r3, r1
 800110a:	4a06      	ldr	r2, [pc, #24]	; (8001124 <collect_bid+0xb0>)
 800110c:	2119      	movs	r1, #25
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f004 facc 	bl	80056ac <sniprintf>
}
 8001114:	bf00      	nop
 8001116:	3718      	adds	r7, #24
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	1ff800d0 	.word	0x1ff800d0
 8001120:	1ff800e3 	.word	0x1ff800e3
 8001124:	0800693c 	.word	0x0800693c

08001128 <parse_packet>:

/**
 * Parse an array of bytes into a packet.
 */
packet_t parse_packet(uint8_t *buffer) {
 8001128:	b5b0      	push	{r4, r5, r7, lr}
 800112a:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 800112e:	af00      	add	r7, sp, #0
 8001130:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001134:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8001138:	6018      	str	r0, [r3, #0]
 800113a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800113e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8001142:	6019      	str	r1, [r3, #0]
	packet_t packet;

	packet.command = buffer[0];
 8001144:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001148:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	781a      	ldrb	r2, [r3, #0]
 8001150:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001154:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8001158:	701a      	strb	r2, [r3, #0]
	packet.pic = buffer[1];
 800115a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800115e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	785a      	ldrb	r2, [r3, #1]
 8001166:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800116a:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800116e:	705a      	strb	r2, [r3, #1]
	packet.options = ((buffer[5] << 24) | (buffer[4] << 16) | (buffer[3] << 8)
 8001170:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001174:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	3305      	adds	r3, #5
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	061a      	lsls	r2, r3, #24
 8001180:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001184:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	3304      	adds	r3, #4
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	041b      	lsls	r3, r3, #16
 8001190:	431a      	orrs	r2, r3
 8001192:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001196:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	3303      	adds	r3, #3
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	021b      	lsls	r3, r3, #8
 80011a2:	4313      	orrs	r3, r2
			| (buffer[2]));
 80011a4:	f507 720c 	add.w	r2, r7, #560	; 0x230
 80011a8:	f5a2 720c 	sub.w	r2, r2, #560	; 0x230
 80011ac:	6812      	ldr	r2, [r2, #0]
 80011ae:	3202      	adds	r2, #2
 80011b0:	7812      	ldrb	r2, [r2, #0]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	461a      	mov	r2, r3
	packet.options = ((buffer[5] << 24) | (buffer[4] << 16) | (buffer[3] << 8)
 80011b6:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80011ba:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 80011be:	f8c3 2002 	str.w	r2, [r3, #2]
	memcpy(packet.uid, &buffer[6], 25);
 80011c2:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80011c6:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	1d9a      	adds	r2, r3, #6
 80011ce:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80011d2:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 80011d6:	3306      	adds	r3, #6
 80011d8:	6810      	ldr	r0, [r2, #0]
 80011da:	6851      	ldr	r1, [r2, #4]
 80011dc:	6895      	ldr	r5, [r2, #8]
 80011de:	68d4      	ldr	r4, [r2, #12]
 80011e0:	6018      	str	r0, [r3, #0]
 80011e2:	6059      	str	r1, [r3, #4]
 80011e4:	609d      	str	r5, [r3, #8]
 80011e6:	60dc      	str	r4, [r3, #12]
 80011e8:	6910      	ldr	r0, [r2, #16]
 80011ea:	6951      	ldr	r1, [r2, #20]
 80011ec:	6118      	str	r0, [r3, #16]
 80011ee:	6159      	str	r1, [r3, #20]
 80011f0:	7e12      	ldrb	r2, [r2, #24]
 80011f2:	761a      	strb	r2, [r3, #24]

	memcpy(packet.data, &buffer[31], DATA_SIZE);
 80011f4:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80011f8:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f103 021f 	add.w	r2, r3, #31
 8001202:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001206:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800120a:	331f      	adds	r3, #31
 800120c:	4611      	mov	r1, r2
 800120e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001212:	4618      	mov	r0, r3
 8001214:	f004 fa34 	bl	8005680 <memcpy>
	packet.checksum = (buffer[PACKET_SIZE - 1] << 8)
 8001218:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800121c:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	021b      	lsls	r3, r3, #8
			| (buffer[PACKET_SIZE - 2]);
 800122a:	b21a      	sxth	r2, r3
 800122c:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001230:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	b21b      	sxth	r3, r3
 800123e:	4313      	orrs	r3, r2
 8001240:	b21b      	sxth	r3, r3
 8001242:	b29a      	uxth	r2, r3
	packet.checksum = (buffer[PACKET_SIZE - 1] << 8)
 8001244:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001248:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800124c:	f8a3 221f 	strh.w	r2, [r3, #543]	; 0x21f

	return packet;
 8001250:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001254:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800125e:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 8001262:	4610      	mov	r0, r2
 8001264:	4619      	mov	r1, r3
 8001266:	f240 2321 	movw	r3, #545	; 0x221
 800126a:	461a      	mov	r2, r3
 800126c:	f004 fa08 	bl	8005680 <memcpy>
}
 8001270:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8001274:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8001278:	6818      	ldr	r0, [r3, #0]
 800127a:	f507 770c 	add.w	r7, r7, #560	; 0x230
 800127e:	46bd      	mov	sp, r7
 8001280:	bdb0      	pop	{r4, r5, r7, pc}

08001282 <send_packet>:

/**
 * Send a packet through the USART.
 */
void send_packet(UART_HandleTypeDef *uart, packet_t *packet) {
 8001282:	b580      	push	{r7, lr}
 8001284:	b082      	sub	sp, #8
 8001286:	af00      	add	r7, sp, #0
 8001288:	6078      	str	r0, [r7, #4]
 800128a:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(uart, (uint8_t*) &packet->command, 1, 0xFFFF);
 800128c:	6839      	ldr	r1, [r7, #0]
 800128e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001292:	2201      	movs	r2, #1
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f003 fb7e 	bl	8004996 <HAL_UART_Transmit>
	HAL_UART_Transmit(uart, (uint8_t*) &packet->pic, 1, 0xFFFF);
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	1c59      	adds	r1, r3, #1
 800129e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012a2:	2201      	movs	r2, #1
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f003 fb76 	bl	8004996 <HAL_UART_Transmit>
	HAL_UART_Transmit(uart, (uint8_t*) &packet->options, 4, 0xFFFF);
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	1c99      	adds	r1, r3, #2
 80012ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012b2:	2204      	movs	r2, #4
 80012b4:	6878      	ldr	r0, [r7, #4]
 80012b6:	f003 fb6e 	bl	8004996 <HAL_UART_Transmit>
	HAL_UART_Transmit(uart, (uint8_t*) &packet->uid, UID_SIZE, 0xFFFF);
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	1d99      	adds	r1, r3, #6
 80012be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012c2:	2219      	movs	r2, #25
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f003 fb66 	bl	8004996 <HAL_UART_Transmit>
	HAL_UART_Transmit(uart, (uint8_t*) &packet->data, DATA_SIZE, 0xFFFF);
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	f103 011f 	add.w	r1, r3, #31
 80012d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f003 fb5c 	bl	8004996 <HAL_UART_Transmit>
	HAL_UART_Transmit(uart, (uint8_t*) &packet->checksum, 2, 0xFFFF);
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	f203 211f 	addw	r1, r3, #543	; 0x21f
 80012e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012e8:	2202      	movs	r2, #2
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f003 fb53 	bl	8004996 <HAL_UART_Transmit>
}
 80012f0:	bf00      	nop
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <make_crc>:

uint16_t make_crc(packet_t *packet, uint8_t* buffer) {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	6039      	str	r1, [r7, #0]
	memcpy(buffer, packet, PACKET_SIZE);
 8001302:	f240 2221 	movw	r2, #545	; 0x221
 8001306:	6879      	ldr	r1, [r7, #4]
 8001308:	6838      	ldr	r0, [r7, #0]
 800130a:	f004 f9b9 	bl	8005680 <memcpy>
	buffer[PACKET_SIZE - 2] = 0;
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	f203 231f 	addw	r3, r3, #543	; 0x21f
 8001314:	2200      	movs	r2, #0
 8001316:	701a      	strb	r2, [r3, #0]
	buffer[PACKET_SIZE - 1] = 0;
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	f503 7308 	add.w	r3, r3, #544	; 0x220
 800131e:	2200      	movs	r2, #0
 8001320:	701a      	strb	r2, [r3, #0]
	return crc16(0, buffer, PACKET_SIZE);
 8001322:	f240 2221 	movw	r2, #545	; 0x221
 8001326:	6839      	ldr	r1, [r7, #0]
 8001328:	2000      	movs	r0, #0
 800132a:	f7ff f8e7 	bl	80004fc <crc16>
 800132e:	4603      	mov	r3, r0
}
 8001330:	4618      	mov	r0, r3
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800133e:	4b14      	ldr	r3, [pc, #80]	; (8001390 <HAL_MspInit+0x58>)
 8001340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001342:	4a13      	ldr	r2, [pc, #76]	; (8001390 <HAL_MspInit+0x58>)
 8001344:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001348:	6253      	str	r3, [r2, #36]	; 0x24
 800134a:	4b11      	ldr	r3, [pc, #68]	; (8001390 <HAL_MspInit+0x58>)
 800134c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001356:	4b0e      	ldr	r3, [pc, #56]	; (8001390 <HAL_MspInit+0x58>)
 8001358:	6a1b      	ldr	r3, [r3, #32]
 800135a:	4a0d      	ldr	r2, [pc, #52]	; (8001390 <HAL_MspInit+0x58>)
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	6213      	str	r3, [r2, #32]
 8001362:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <HAL_MspInit+0x58>)
 8001364:	6a1b      	ldr	r3, [r3, #32]
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	60bb      	str	r3, [r7, #8]
 800136c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800136e:	4b08      	ldr	r3, [pc, #32]	; (8001390 <HAL_MspInit+0x58>)
 8001370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001372:	4a07      	ldr	r2, [pc, #28]	; (8001390 <HAL_MspInit+0x58>)
 8001374:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001378:	6253      	str	r3, [r2, #36]	; 0x24
 800137a:	4b05      	ldr	r3, [pc, #20]	; (8001390 <HAL_MspInit+0x58>)
 800137c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800137e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001382:	607b      	str	r3, [r7, #4]
 8001384:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001386:	bf00      	nop
 8001388:	3714      	adds	r7, #20
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr
 8001390:	40023800 	.word	0x40023800

08001394 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a21      	ldr	r2, [pc, #132]	; (8001428 <HAL_ADC_MspInit+0x94>)
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d13c      	bne.n	8001420 <HAL_ADC_MspInit+0x8c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80013a6:	4b21      	ldr	r3, [pc, #132]	; (800142c <HAL_ADC_MspInit+0x98>)
 80013a8:	6a1b      	ldr	r3, [r3, #32]
 80013aa:	4a20      	ldr	r2, [pc, #128]	; (800142c <HAL_ADC_MspInit+0x98>)
 80013ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013b0:	6213      	str	r3, [r2, #32]
 80013b2:	4b1e      	ldr	r3, [pc, #120]	; (800142c <HAL_ADC_MspInit+0x98>)
 80013b4:	6a1b      	ldr	r3, [r3, #32]
 80013b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	68fb      	ldr	r3, [r7, #12]

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80013be:	4b1c      	ldr	r3, [pc, #112]	; (8001430 <HAL_ADC_MspInit+0x9c>)
 80013c0:	4a1c      	ldr	r2, [pc, #112]	; (8001434 <HAL_ADC_MspInit+0xa0>)
 80013c2:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013c4:	4b1a      	ldr	r3, [pc, #104]	; (8001430 <HAL_ADC_MspInit+0x9c>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80013ca:	4b19      	ldr	r3, [pc, #100]	; (8001430 <HAL_ADC_MspInit+0x9c>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80013d0:	4b17      	ldr	r3, [pc, #92]	; (8001430 <HAL_ADC_MspInit+0x9c>)
 80013d2:	2280      	movs	r2, #128	; 0x80
 80013d4:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80013d6:	4b16      	ldr	r3, [pc, #88]	; (8001430 <HAL_ADC_MspInit+0x9c>)
 80013d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013dc:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80013de:	4b14      	ldr	r3, [pc, #80]	; (8001430 <HAL_ADC_MspInit+0x9c>)
 80013e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013e4:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 80013e6:	4b12      	ldr	r3, [pc, #72]	; (8001430 <HAL_ADC_MspInit+0x9c>)
 80013e8:	2220      	movs	r2, #32
 80013ea:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 80013ec:	4b10      	ldr	r3, [pc, #64]	; (8001430 <HAL_ADC_MspInit+0x9c>)
 80013ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013f2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 80013f4:	480e      	ldr	r0, [pc, #56]	; (8001430 <HAL_ADC_MspInit+0x9c>)
 80013f6:	f002 f90d 	bl	8003614 <HAL_DMA_Init>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001400:	f7ff fdf0 	bl	8000fe4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	4a0a      	ldr	r2, [pc, #40]	; (8001430 <HAL_ADC_MspInit+0x9c>)
 8001408:	645a      	str	r2, [r3, #68]	; 0x44
 800140a:	4a09      	ldr	r2, [pc, #36]	; (8001430 <HAL_ADC_MspInit+0x9c>)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8001410:	2200      	movs	r2, #0
 8001412:	2100      	movs	r1, #0
 8001414:	2012      	movs	r0, #18
 8001416:	f002 f8c6 	bl	80035a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 800141a:	2012      	movs	r0, #18
 800141c:	f002 f8df 	bl	80035de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001420:	bf00      	nop
 8001422:	3710      	adds	r7, #16
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	40012400 	.word	0x40012400
 800142c:	40023800 	.word	0x40023800
 8001430:	20000100 	.word	0x20000100
 8001434:	40026008 	.word	0x40026008

08001438 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08c      	sub	sp, #48	; 0x30
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001440:	f107 031c 	add.w	r3, r7, #28
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
 800144e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a5e      	ldr	r2, [pc, #376]	; (80015d0 <HAL_UART_MspInit+0x198>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d158      	bne.n	800150c <HAL_UART_MspInit+0xd4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800145a:	4b5e      	ldr	r3, [pc, #376]	; (80015d4 <HAL_UART_MspInit+0x19c>)
 800145c:	6a1b      	ldr	r3, [r3, #32]
 800145e:	4a5d      	ldr	r2, [pc, #372]	; (80015d4 <HAL_UART_MspInit+0x19c>)
 8001460:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001464:	6213      	str	r3, [r2, #32]
 8001466:	4b5b      	ldr	r3, [pc, #364]	; (80015d4 <HAL_UART_MspInit+0x19c>)
 8001468:	6a1b      	ldr	r3, [r3, #32]
 800146a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800146e:	61bb      	str	r3, [r7, #24]
 8001470:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001472:	4b58      	ldr	r3, [pc, #352]	; (80015d4 <HAL_UART_MspInit+0x19c>)
 8001474:	69db      	ldr	r3, [r3, #28]
 8001476:	4a57      	ldr	r2, [pc, #348]	; (80015d4 <HAL_UART_MspInit+0x19c>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	61d3      	str	r3, [r2, #28]
 800147e:	4b55      	ldr	r3, [pc, #340]	; (80015d4 <HAL_UART_MspInit+0x19c>)
 8001480:	69db      	ldr	r3, [r3, #28]
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	617b      	str	r3, [r7, #20]
 8001488:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800148a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800148e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001490:	2302      	movs	r3, #2
 8001492:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001498:	2303      	movs	r3, #3
 800149a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800149c:	2307      	movs	r3, #7
 800149e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014a0:	f107 031c 	add.w	r3, r7, #28
 80014a4:	4619      	mov	r1, r3
 80014a6:	484c      	ldr	r0, [pc, #304]	; (80015d8 <HAL_UART_MspInit+0x1a0>)
 80014a8:	f002 fae4 	bl	8003a74 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80014ac:	4b4b      	ldr	r3, [pc, #300]	; (80015dc <HAL_UART_MspInit+0x1a4>)
 80014ae:	4a4c      	ldr	r2, [pc, #304]	; (80015e0 <HAL_UART_MspInit+0x1a8>)
 80014b0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014b2:	4b4a      	ldr	r3, [pc, #296]	; (80015dc <HAL_UART_MspInit+0x1a4>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014b8:	4b48      	ldr	r3, [pc, #288]	; (80015dc <HAL_UART_MspInit+0x1a4>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014be:	4b47      	ldr	r3, [pc, #284]	; (80015dc <HAL_UART_MspInit+0x1a4>)
 80014c0:	2280      	movs	r2, #128	; 0x80
 80014c2:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014c4:	4b45      	ldr	r3, [pc, #276]	; (80015dc <HAL_UART_MspInit+0x1a4>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014ca:	4b44      	ldr	r3, [pc, #272]	; (80015dc <HAL_UART_MspInit+0x1a4>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80014d0:	4b42      	ldr	r3, [pc, #264]	; (80015dc <HAL_UART_MspInit+0x1a4>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80014d6:	4b41      	ldr	r3, [pc, #260]	; (80015dc <HAL_UART_MspInit+0x1a4>)
 80014d8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014dc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80014de:	483f      	ldr	r0, [pc, #252]	; (80015dc <HAL_UART_MspInit+0x1a4>)
 80014e0:	f002 f898 	bl	8003614 <HAL_DMA_Init>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <HAL_UART_MspInit+0xb6>
    {
      Error_Handler();
 80014ea:	f7ff fd7b 	bl	8000fe4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a3a      	ldr	r2, [pc, #232]	; (80015dc <HAL_UART_MspInit+0x1a4>)
 80014f2:	639a      	str	r2, [r3, #56]	; 0x38
 80014f4:	4a39      	ldr	r2, [pc, #228]	; (80015dc <HAL_UART_MspInit+0x1a4>)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80014fa:	2200      	movs	r2, #0
 80014fc:	2100      	movs	r1, #0
 80014fe:	2025      	movs	r0, #37	; 0x25
 8001500:	f002 f851 	bl	80035a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001504:	2025      	movs	r0, #37	; 0x25
 8001506:	f002 f86a 	bl	80035de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800150a:	e05c      	b.n	80015c6 <HAL_UART_MspInit+0x18e>
  else if(huart->Instance==USART3)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a34      	ldr	r2, [pc, #208]	; (80015e4 <HAL_UART_MspInit+0x1ac>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d157      	bne.n	80015c6 <HAL_UART_MspInit+0x18e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001516:	4b2f      	ldr	r3, [pc, #188]	; (80015d4 <HAL_UART_MspInit+0x19c>)
 8001518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151a:	4a2e      	ldr	r2, [pc, #184]	; (80015d4 <HAL_UART_MspInit+0x19c>)
 800151c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001520:	6253      	str	r3, [r2, #36]	; 0x24
 8001522:	4b2c      	ldr	r3, [pc, #176]	; (80015d4 <HAL_UART_MspInit+0x19c>)
 8001524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001526:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800152a:	613b      	str	r3, [r7, #16]
 800152c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800152e:	4b29      	ldr	r3, [pc, #164]	; (80015d4 <HAL_UART_MspInit+0x19c>)
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	4a28      	ldr	r2, [pc, #160]	; (80015d4 <HAL_UART_MspInit+0x19c>)
 8001534:	f043 0302 	orr.w	r3, r3, #2
 8001538:	61d3      	str	r3, [r2, #28]
 800153a:	4b26      	ldr	r3, [pc, #152]	; (80015d4 <HAL_UART_MspInit+0x19c>)
 800153c:	69db      	ldr	r3, [r3, #28]
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001546:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800154a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154c:	2302      	movs	r3, #2
 800154e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001550:	2300      	movs	r3, #0
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001554:	2303      	movs	r3, #3
 8001556:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001558:	2307      	movs	r3, #7
 800155a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800155c:	f107 031c 	add.w	r3, r7, #28
 8001560:	4619      	mov	r1, r3
 8001562:	4821      	ldr	r0, [pc, #132]	; (80015e8 <HAL_UART_MspInit+0x1b0>)
 8001564:	f002 fa86 	bl	8003a74 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8001568:	4b20      	ldr	r3, [pc, #128]	; (80015ec <HAL_UART_MspInit+0x1b4>)
 800156a:	4a21      	ldr	r2, [pc, #132]	; (80015f0 <HAL_UART_MspInit+0x1b8>)
 800156c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800156e:	4b1f      	ldr	r3, [pc, #124]	; (80015ec <HAL_UART_MspInit+0x1b4>)
 8001570:	2200      	movs	r2, #0
 8001572:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001574:	4b1d      	ldr	r3, [pc, #116]	; (80015ec <HAL_UART_MspInit+0x1b4>)
 8001576:	2200      	movs	r2, #0
 8001578:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800157a:	4b1c      	ldr	r3, [pc, #112]	; (80015ec <HAL_UART_MspInit+0x1b4>)
 800157c:	2280      	movs	r2, #128	; 0x80
 800157e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001580:	4b1a      	ldr	r3, [pc, #104]	; (80015ec <HAL_UART_MspInit+0x1b4>)
 8001582:	2200      	movs	r2, #0
 8001584:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001586:	4b19      	ldr	r3, [pc, #100]	; (80015ec <HAL_UART_MspInit+0x1b4>)
 8001588:	2200      	movs	r2, #0
 800158a:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800158c:	4b17      	ldr	r3, [pc, #92]	; (80015ec <HAL_UART_MspInit+0x1b4>)
 800158e:	2200      	movs	r2, #0
 8001590:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8001592:	4b16      	ldr	r3, [pc, #88]	; (80015ec <HAL_UART_MspInit+0x1b4>)
 8001594:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001598:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800159a:	4814      	ldr	r0, [pc, #80]	; (80015ec <HAL_UART_MspInit+0x1b4>)
 800159c:	f002 f83a 	bl	8003614 <HAL_DMA_Init>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <HAL_UART_MspInit+0x172>
      Error_Handler();
 80015a6:	f7ff fd1d 	bl	8000fe4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	4a0f      	ldr	r2, [pc, #60]	; (80015ec <HAL_UART_MspInit+0x1b4>)
 80015ae:	639a      	str	r2, [r3, #56]	; 0x38
 80015b0:	4a0e      	ldr	r2, [pc, #56]	; (80015ec <HAL_UART_MspInit+0x1b4>)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6253      	str	r3, [r2, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80015b6:	2200      	movs	r2, #0
 80015b8:	2100      	movs	r1, #0
 80015ba:	2027      	movs	r0, #39	; 0x27
 80015bc:	f001 fff3 	bl	80035a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80015c0:	2027      	movs	r0, #39	; 0x27
 80015c2:	f002 f80c 	bl	80035de <HAL_NVIC_EnableIRQ>
}
 80015c6:	bf00      	nop
 80015c8:	3730      	adds	r7, #48	; 0x30
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40013800 	.word	0x40013800
 80015d4:	40023800 	.word	0x40023800
 80015d8:	40020000 	.word	0x40020000
 80015dc:	200001cc 	.word	0x200001cc
 80015e0:	40026058 	.word	0x40026058
 80015e4:	40004800 	.word	0x40004800
 80015e8:	40020400 	.word	0x40020400
 80015ec:	20000210 	.word	0x20000210
 80015f0:	40026030 	.word	0x40026030

080015f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015f8:	e7fe      	b.n	80015f8 <NMI_Handler+0x4>

080015fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015fe:	e7fe      	b.n	80015fe <HardFault_Handler+0x4>

08001600 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001604:	e7fe      	b.n	8001604 <MemManage_Handler+0x4>

08001606 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001606:	b480      	push	{r7}
 8001608:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800160a:	e7fe      	b.n	800160a <BusFault_Handler+0x4>

0800160c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001610:	e7fe      	b.n	8001610 <UsageFault_Handler+0x4>

08001612 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001612:	b480      	push	{r7}
 8001614:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	46bd      	mov	sp, r7
 800161a:	bc80      	pop	{r7}
 800161c:	4770      	bx	lr

0800161e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800161e:	b480      	push	{r7}
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001622:	bf00      	nop
 8001624:	46bd      	mov	sp, r7
 8001626:	bc80      	pop	{r7}
 8001628:	4770      	bx	lr

0800162a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800162a:	b480      	push	{r7}
 800162c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800162e:	bf00      	nop
 8001630:	46bd      	mov	sp, r7
 8001632:	bc80      	pop	{r7}
 8001634:	4770      	bx	lr

08001636 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001636:	b580      	push	{r7, lr}
 8001638:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800163a:	f001 f97b 	bl	8002934 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
	...

08001644 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001648:	4802      	ldr	r0, [pc, #8]	; (8001654 <DMA1_Channel1_IRQHandler+0x10>)
 800164a:	f002 f935 	bl	80038b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	20000100 	.word	0x20000100

08001658 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800165c:	4802      	ldr	r0, [pc, #8]	; (8001668 <DMA1_Channel3_IRQHandler+0x10>)
 800165e:	f002 f92b 	bl	80038b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000210 	.word	0x20000210

0800166c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001670:	4802      	ldr	r0, [pc, #8]	; (800167c <DMA1_Channel5_IRQHandler+0x10>)
 8001672:	f002 f921 	bl	80038b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001676:	bf00      	nop
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	200001cc 	.word	0x200001cc

08001680 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8001684:	4802      	ldr	r0, [pc, #8]	; (8001690 <ADC1_IRQHandler+0x10>)
 8001686:	f001 fb45 	bl	8002d14 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	200000ac 	.word	0x200000ac

08001694 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001698:	4802      	ldr	r0, [pc, #8]	; (80016a4 <USART1_IRQHandler+0x10>)
 800169a:	f003 fa3f 	bl	8004b1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20000144 	.word	0x20000144

080016a8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80016ac:	4802      	ldr	r0, [pc, #8]	; (80016b8 <USART3_IRQHandler+0x10>)
 80016ae:	f003 fa35 	bl	8004b1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80016b2:	bf00      	nop
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	20000188 	.word	0x20000188

080016bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b086      	sub	sp, #24
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016c4:	4a14      	ldr	r2, [pc, #80]	; (8001718 <_sbrk+0x5c>)
 80016c6:	4b15      	ldr	r3, [pc, #84]	; (800171c <_sbrk+0x60>)
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016d0:	4b13      	ldr	r3, [pc, #76]	; (8001720 <_sbrk+0x64>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d102      	bne.n	80016de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016d8:	4b11      	ldr	r3, [pc, #68]	; (8001720 <_sbrk+0x64>)
 80016da:	4a12      	ldr	r2, [pc, #72]	; (8001724 <_sbrk+0x68>)
 80016dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016de:	4b10      	ldr	r3, [pc, #64]	; (8001720 <_sbrk+0x64>)
 80016e0:	681a      	ldr	r2, [r3, #0]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4413      	add	r3, r2
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d207      	bcs.n	80016fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016ec:	f003 ff8e 	bl	800560c <__errno>
 80016f0:	4603      	mov	r3, r0
 80016f2:	220c      	movs	r2, #12
 80016f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016fa:	e009      	b.n	8001710 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016fc:	4b08      	ldr	r3, [pc, #32]	; (8001720 <_sbrk+0x64>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001702:	4b07      	ldr	r3, [pc, #28]	; (8001720 <_sbrk+0x64>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4413      	add	r3, r2
 800170a:	4a05      	ldr	r2, [pc, #20]	; (8001720 <_sbrk+0x64>)
 800170c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800170e:	68fb      	ldr	r3, [r7, #12]
}
 8001710:	4618      	mov	r0, r3
 8001712:	3718      	adds	r7, #24
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	20014000 	.word	0x20014000
 800171c:	00000400 	.word	0x00000400
 8001720:	200008ec 	.word	0x200008ec
 8001724:	20001a98 	.word	0x20001a98

08001728 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800172c:	bf00      	nop
 800172e:	46bd      	mov	sp, r7
 8001730:	bc80      	pop	{r7}
 8001732:	4770      	bx	lr

08001734 <zf_abort>:
/*
 * Handle abort by unwinding the C stack and sending control back into
 * zf_eval()
 */

void zf_abort(zf_result reason) {
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	71fb      	strb	r3, [r7, #7]
	longjmp(jmpbuf, reason);
 800173e:	79fb      	ldrb	r3, [r7, #7]
 8001740:	4619      	mov	r1, r3
 8001742:	4801      	ldr	r0, [pc, #4]	; (8001748 <zf_abort+0x14>)
 8001744:	f7fe fd20 	bl	8000188 <longjmp>
 8001748:	20001a00 	.word	0x20001a00

0800174c <zf_push>:

/*
 * Stack operations.
 */

void zf_push(zf_cell v) {
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
	CHECK(dsp < ZF_DSTACK_SIZE, ZF_ABORT_DSTACK_OVERRUN);
	dstack[dsp++] = v;
 8001754:	4b06      	ldr	r3, [pc, #24]	; (8001770 <zf_push+0x24>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	1c5a      	adds	r2, r3, #1
 800175a:	4905      	ldr	r1, [pc, #20]	; (8001770 <zf_push+0x24>)
 800175c:	600a      	str	r2, [r1, #0]
 800175e:	4905      	ldr	r1, [pc, #20]	; (8001774 <zf_push+0x28>)
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	bc80      	pop	{r7}
 800176e:	4770      	bx	lr
 8001770:	200019f4 	.word	0x200019f4
 8001774:	20000970 	.word	0x20000970

08001778 <zf_pop>:

zf_cell zf_pop(void) {
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
	zf_cell v;
	CHECK(dsp > 0, ZF_ABORT_DSTACK_UNDERRUN);
	v = dstack[--dsp];
 800177e:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <zf_pop+0x28>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	3b01      	subs	r3, #1
 8001784:	4a06      	ldr	r2, [pc, #24]	; (80017a0 <zf_pop+0x28>)
 8001786:	6013      	str	r3, [r2, #0]
 8001788:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <zf_pop+0x28>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a05      	ldr	r2, [pc, #20]	; (80017a4 <zf_pop+0x2c>)
 800178e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001792:	607b      	str	r3, [r7, #4]
	return v;
 8001794:	687b      	ldr	r3, [r7, #4]
}
 8001796:	4618      	mov	r0, r3
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	bc80      	pop	{r7}
 800179e:	4770      	bx	lr
 80017a0:	200019f4 	.word	0x200019f4
 80017a4:	20000970 	.word	0x20000970

080017a8 <zf_pick>:

zf_cell zf_pick(zf_addr n) {
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
	CHECK(n < dsp, ZF_ABORT_DSTACK_UNDERRUN);
	return dstack[dsp - n - 1];
 80017b0:	4b06      	ldr	r3, [pc, #24]	; (80017cc <zf_pick+0x24>)
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	3b01      	subs	r3, #1
 80017ba:	4a05      	ldr	r2, [pc, #20]	; (80017d0 <zf_pick+0x28>)
 80017bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bc80      	pop	{r7}
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	200019f4 	.word	0x200019f4
 80017d0:	20000970 	.word	0x20000970

080017d4 <zf_pushr>:

static void zf_pushr(zf_cell v) {
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
	CHECK(rsp < ZF_RSTACK_SIZE, ZF_ABORT_RSTACK_OVERRUN);
	rstack[rsp++] = v;
 80017dc:	4b06      	ldr	r3, [pc, #24]	; (80017f8 <zf_pushr+0x24>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	1c5a      	adds	r2, r3, #1
 80017e2:	4905      	ldr	r1, [pc, #20]	; (80017f8 <zf_pushr+0x24>)
 80017e4:	600a      	str	r2, [r1, #0]
 80017e6:	4905      	ldr	r1, [pc, #20]	; (80017fc <zf_pushr+0x28>)
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80017ee:	bf00      	nop
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bc80      	pop	{r7}
 80017f6:	4770      	bx	lr
 80017f8:	200019f8 	.word	0x200019f8
 80017fc:	200008f0 	.word	0x200008f0

08001800 <zf_popr>:

static zf_cell zf_popr(void) {
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
	zf_cell v;
	CHECK(rsp > 0, ZF_ABORT_RSTACK_UNDERRUN);
	v = rstack[--rsp];
 8001806:	4b08      	ldr	r3, [pc, #32]	; (8001828 <zf_popr+0x28>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	3b01      	subs	r3, #1
 800180c:	4a06      	ldr	r2, [pc, #24]	; (8001828 <zf_popr+0x28>)
 800180e:	6013      	str	r3, [r2, #0]
 8001810:	4b05      	ldr	r3, [pc, #20]	; (8001828 <zf_popr+0x28>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a05      	ldr	r2, [pc, #20]	; (800182c <zf_popr+0x2c>)
 8001816:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800181a:	607b      	str	r3, [r7, #4]
	return v;
 800181c:	687b      	ldr	r3, [r7, #4]
}
 800181e:	4618      	mov	r0, r3
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr
 8001828:	200019f8 	.word	0x200019f8
 800182c:	200008f0 	.word	0x200008f0

08001830 <zf_pickr>:

zf_cell zf_pickr(zf_addr n) {
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
	CHECK(n < rsp, ZF_ABORT_RSTACK_UNDERRUN);
	return rstack[rsp - n - 1];
 8001838:	4b06      	ldr	r3, [pc, #24]	; (8001854 <zf_pickr+0x24>)
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	3b01      	subs	r3, #1
 8001842:	4a05      	ldr	r2, [pc, #20]	; (8001858 <zf_pickr+0x28>)
 8001844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8001848:	4618      	mov	r0, r3
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	bc80      	pop	{r7}
 8001850:	4770      	bx	lr
 8001852:	bf00      	nop
 8001854:	200019f8 	.word	0x200019f8
 8001858:	200008f0 	.word	0x200008f0

0800185c <dict_put_bytes>:

/*
 * All access to dictionary memory is done through these functions.
 */

static zf_addr dict_put_bytes(zf_addr addr, const void *buf, size_t len) {
 800185c:	b480      	push	{r7}
 800185e:	b087      	sub	sp, #28
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	607a      	str	r2, [r7, #4]
	const uint8_t *p = (const uint8_t*) buf;
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	617b      	str	r3, [r7, #20]
	size_t i = len;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	613b      	str	r3, [r7, #16]
	CHECK(addr < ZF_DICT_SIZE-len, ZF_ABORT_OUTSIDE_MEM);
	while (i--)
 8001870:	e008      	b.n	8001884 <dict_put_bytes+0x28>
		dict[addr++] = *p++;
 8001872:	697a      	ldr	r2, [r7, #20]
 8001874:	1c53      	adds	r3, r2, #1
 8001876:	617b      	str	r3, [r7, #20]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	1c59      	adds	r1, r3, #1
 800187c:	60f9      	str	r1, [r7, #12]
 800187e:	7811      	ldrb	r1, [r2, #0]
 8001880:	4a06      	ldr	r2, [pc, #24]	; (800189c <dict_put_bytes+0x40>)
 8001882:	54d1      	strb	r1, [r2, r3]
	while (i--)
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	1e5a      	subs	r2, r3, #1
 8001888:	613a      	str	r2, [r7, #16]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d1f1      	bne.n	8001872 <dict_put_bytes+0x16>
	return len;
 800188e:	687b      	ldr	r3, [r7, #4]
}
 8001890:	4618      	mov	r0, r3
 8001892:	371c      	adds	r7, #28
 8001894:	46bd      	mov	sp, r7
 8001896:	bc80      	pop	{r7}
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	200009f0 	.word	0x200009f0

080018a0 <dict_get_bytes>:

static void dict_get_bytes(zf_addr addr, void *buf, size_t len) {
 80018a0:	b480      	push	{r7}
 80018a2:	b087      	sub	sp, #28
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	607a      	str	r2, [r7, #4]
	uint8_t *p = (uint8_t*) buf;
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	617b      	str	r3, [r7, #20]
	CHECK(addr < ZF_DICT_SIZE-len, ZF_ABORT_OUTSIDE_MEM);
	while (len--)
 80018b0:	e008      	b.n	80018c4 <dict_get_bytes+0x24>
		*p++ = dict[addr++];
 80018b2:	68fa      	ldr	r2, [r7, #12]
 80018b4:	1c53      	adds	r3, r2, #1
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	1c59      	adds	r1, r3, #1
 80018bc:	6179      	str	r1, [r7, #20]
 80018be:	4907      	ldr	r1, [pc, #28]	; (80018dc <dict_get_bytes+0x3c>)
 80018c0:	5c8a      	ldrb	r2, [r1, r2]
 80018c2:	701a      	strb	r2, [r3, #0]
	while (len--)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	1e5a      	subs	r2, r3, #1
 80018c8:	607a      	str	r2, [r7, #4]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1f1      	bne.n	80018b2 <dict_get_bytes+0x12>
}
 80018ce:	bf00      	nop
 80018d0:	bf00      	nop
 80018d2:	371c      	adds	r7, #28
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bc80      	pop	{r7}
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	200009f0 	.word	0x200009f0

080018e0 <dict_put_cell_typed>:
#else
#define GET(s, t)
#define PUT(s, t, val)
#endif

static zf_addr dict_put_cell_typed(zf_addr addr, zf_cell v, zf_mem_size size) {
 80018e0:	b590      	push	{r4, r7, lr}
 80018e2:	b08d      	sub	sp, #52	; 0x34
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	60f8      	str	r0, [r7, #12]
 80018e8:	60b9      	str	r1, [r7, #8]
 80018ea:	4613      	mov	r3, r2
 80018ec:	71fb      	strb	r3, [r7, #7]
	unsigned int vi = v;
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint8_t t[2];

	if (size == ZF_MEM_SIZE_VAR) {
 80018f2:	79fb      	ldrb	r3, [r7, #7]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d142      	bne.n	800197e <dict_put_cell_typed+0x9e>
		if ((v - vi) == 0) {
 80018f8:	68ba      	ldr	r2, [r7, #8]
 80018fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d128      	bne.n	8001952 <dict_put_cell_typed+0x72>
			if (vi < 128) {
 8001900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001902:	2b7f      	cmp	r3, #127	; 0x7f
 8001904:	d80c      	bhi.n	8001920 <dict_put_cell_typed+0x40>
				t[0] = vi;
 8001906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001908:	b2db      	uxtb	r3, r3
 800190a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
				return dict_put_bytes(addr, t, 1);
 800190e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001912:	2201      	movs	r2, #1
 8001914:	4619      	mov	r1, r3
 8001916:	68f8      	ldr	r0, [r7, #12]
 8001918:	f7ff ffa0 	bl	800185c <dict_put_bytes>
 800191c:	4603      	mov	r3, r0
 800191e:	e099      	b.n	8001a54 <dict_put_cell_typed+0x174>
			}
			if (vi < 16384) {
 8001920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001922:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001926:	d214      	bcs.n	8001952 <dict_put_cell_typed+0x72>
				t[0] = (vi >> 8) | 0x80;
 8001928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800192a:	0a1b      	lsrs	r3, r3, #8
 800192c:	b2db      	uxtb	r3, r3
 800192e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001932:	b2db      	uxtb	r3, r3
 8001934:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
				t[1] = vi;
 8001938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800193a:	b2db      	uxtb	r3, r3
 800193c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
				return dict_put_bytes(addr, t, sizeof(t));
 8001940:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001944:	2202      	movs	r2, #2
 8001946:	4619      	mov	r1, r3
 8001948:	68f8      	ldr	r0, [r7, #12]
 800194a:	f7ff ff87 	bl	800185c <dict_put_bytes>
 800194e:	4603      	mov	r3, r0
 8001950:	e080      	b.n	8001a54 <dict_put_cell_typed+0x174>
			}
		}

		t[0] = 0xff;
 8001952:	23ff      	movs	r3, #255	; 0xff
 8001954:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
		return dict_put_bytes(addr + 0, t, 1)
 8001958:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800195c:	2201      	movs	r2, #1
 800195e:	4619      	mov	r1, r3
 8001960:	68f8      	ldr	r0, [r7, #12]
 8001962:	f7ff ff7b 	bl	800185c <dict_put_bytes>
 8001966:	4604      	mov	r4, r0
				+ dict_put_bytes(addr + 1, &v, sizeof(v));
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	3301      	adds	r3, #1
 800196c:	f107 0108 	add.w	r1, r7, #8
 8001970:	2204      	movs	r2, #4
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff ff72 	bl	800185c <dict_put_bytes>
 8001978:	4603      	mov	r3, r0
 800197a:	4423      	add	r3, r4
 800197c:	e06a      	b.n	8001a54 <dict_put_cell_typed+0x174>
	}

	PUT(ZF_MEM_SIZE_CELL, zf_cell, v);
 800197e:	79fb      	ldrb	r3, [r7, #7]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d10a      	bne.n	800199a <dict_put_cell_typed+0xba>
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	627b      	str	r3, [r7, #36]	; 0x24
 8001988:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800198c:	2204      	movs	r2, #4
 800198e:	4619      	mov	r1, r3
 8001990:	68f8      	ldr	r0, [r7, #12]
 8001992:	f7ff ff63 	bl	800185c <dict_put_bytes>
 8001996:	4603      	mov	r3, r0
 8001998:	e05c      	b.n	8001a54 <dict_put_cell_typed+0x174>
	PUT(ZF_MEM_SIZE_U8, uint8_t, vi);
 800199a:	79fb      	ldrb	r3, [r7, #7]
 800199c:	2b02      	cmp	r3, #2
 800199e:	d10c      	bne.n	80019ba <dict_put_cell_typed+0xda>
 80019a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80019a8:	f107 0323 	add.w	r3, r7, #35	; 0x23
 80019ac:	2201      	movs	r2, #1
 80019ae:	4619      	mov	r1, r3
 80019b0:	68f8      	ldr	r0, [r7, #12]
 80019b2:	f7ff ff53 	bl	800185c <dict_put_bytes>
 80019b6:	4603      	mov	r3, r0
 80019b8:	e04c      	b.n	8001a54 <dict_put_cell_typed+0x174>
	PUT(ZF_MEM_SIZE_U16, uint16_t, vi);
 80019ba:	79fb      	ldrb	r3, [r7, #7]
 80019bc:	2b03      	cmp	r3, #3
 80019be:	d10b      	bne.n	80019d8 <dict_put_cell_typed+0xf8>
 80019c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	843b      	strh	r3, [r7, #32]
 80019c6:	f107 0320 	add.w	r3, r7, #32
 80019ca:	2202      	movs	r2, #2
 80019cc:	4619      	mov	r1, r3
 80019ce:	68f8      	ldr	r0, [r7, #12]
 80019d0:	f7ff ff44 	bl	800185c <dict_put_bytes>
 80019d4:	4603      	mov	r3, r0
 80019d6:	e03d      	b.n	8001a54 <dict_put_cell_typed+0x174>
	PUT(ZF_MEM_SIZE_U32, uint32_t, vi);
 80019d8:	79fb      	ldrb	r3, [r7, #7]
 80019da:	2b04      	cmp	r3, #4
 80019dc:	d10a      	bne.n	80019f4 <dict_put_cell_typed+0x114>
 80019de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019e0:	61fb      	str	r3, [r7, #28]
 80019e2:	f107 031c 	add.w	r3, r7, #28
 80019e6:	2204      	movs	r2, #4
 80019e8:	4619      	mov	r1, r3
 80019ea:	68f8      	ldr	r0, [r7, #12]
 80019ec:	f7ff ff36 	bl	800185c <dict_put_bytes>
 80019f0:	4603      	mov	r3, r0
 80019f2:	e02f      	b.n	8001a54 <dict_put_cell_typed+0x174>
	PUT(ZF_MEM_SIZE_S8, int8_t, vi);
 80019f4:	79fb      	ldrb	r3, [r7, #7]
 80019f6:	2b05      	cmp	r3, #5
 80019f8:	d10b      	bne.n	8001a12 <dict_put_cell_typed+0x132>
 80019fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019fc:	b25b      	sxtb	r3, r3
 80019fe:	76fb      	strb	r3, [r7, #27]
 8001a00:	f107 031b 	add.w	r3, r7, #27
 8001a04:	2201      	movs	r2, #1
 8001a06:	4619      	mov	r1, r3
 8001a08:	68f8      	ldr	r0, [r7, #12]
 8001a0a:	f7ff ff27 	bl	800185c <dict_put_bytes>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	e020      	b.n	8001a54 <dict_put_cell_typed+0x174>
	PUT(ZF_MEM_SIZE_S16, int16_t, vi);
 8001a12:	79fb      	ldrb	r3, [r7, #7]
 8001a14:	2b06      	cmp	r3, #6
 8001a16:	d10b      	bne.n	8001a30 <dict_put_cell_typed+0x150>
 8001a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a1a:	b21b      	sxth	r3, r3
 8001a1c:	833b      	strh	r3, [r7, #24]
 8001a1e:	f107 0318 	add.w	r3, r7, #24
 8001a22:	2202      	movs	r2, #2
 8001a24:	4619      	mov	r1, r3
 8001a26:	68f8      	ldr	r0, [r7, #12]
 8001a28:	f7ff ff18 	bl	800185c <dict_put_bytes>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	e011      	b.n	8001a54 <dict_put_cell_typed+0x174>
	PUT(ZF_MEM_SIZE_S32, int32_t, vi);
 8001a30:	79fb      	ldrb	r3, [r7, #7]
 8001a32:	2b07      	cmp	r3, #7
 8001a34:	d10a      	bne.n	8001a4c <dict_put_cell_typed+0x16c>
 8001a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a38:	617b      	str	r3, [r7, #20]
 8001a3a:	f107 0314 	add.w	r3, r7, #20
 8001a3e:	2204      	movs	r2, #4
 8001a40:	4619      	mov	r1, r3
 8001a42:	68f8      	ldr	r0, [r7, #12]
 8001a44:	f7ff ff0a 	bl	800185c <dict_put_bytes>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	e003      	b.n	8001a54 <dict_put_cell_typed+0x174>

	zf_abort(ZF_ABORT_INVALID_SIZE);
 8001a4c:	2009      	movs	r0, #9
 8001a4e:	f7ff fe71 	bl	8001734 <zf_abort>
	return 0;
 8001a52:	2300      	movs	r3, #0
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3734      	adds	r7, #52	; 0x34
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd90      	pop	{r4, r7, pc}

08001a5c <dict_get_cell_typed>:

static zf_addr dict_get_cell_typed(zf_addr addr, zf_cell *v, zf_mem_size size) {
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b08a      	sub	sp, #40	; 0x28
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	60f8      	str	r0, [r7, #12]
 8001a64:	60b9      	str	r1, [r7, #8]
 8001a66:	4613      	mov	r3, r2
 8001a68:	71fb      	strb	r3, [r7, #7]
	uint8_t t[2];
	dict_get_bytes(addr, t, sizeof(t));
 8001a6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a6e:	2202      	movs	r2, #2
 8001a70:	4619      	mov	r1, r3
 8001a72:	68f8      	ldr	r0, [r7, #12]
 8001a74:	f7ff ff14 	bl	80018a0 <dict_get_bytes>

	if (size == ZF_MEM_SIZE_VAR) {
 8001a78:	79fb      	ldrb	r3, [r7, #7]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d124      	bne.n	8001ac8 <dict_get_cell_typed+0x6c>
		if (t[0] & 0x80) {
 8001a7e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001a82:	b25b      	sxtb	r3, r3
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	da18      	bge.n	8001aba <dict_get_cell_typed+0x5e>
			if (t[0] == 0xff) {
 8001a88:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001a8c:	2bff      	cmp	r3, #255	; 0xff
 8001a8e:	d108      	bne.n	8001aa2 <dict_get_cell_typed+0x46>
				dict_get_bytes(addr + 1, v, sizeof(*v));
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	3301      	adds	r3, #1
 8001a94:	2204      	movs	r2, #4
 8001a96:	68b9      	ldr	r1, [r7, #8]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff ff01 	bl	80018a0 <dict_get_bytes>
				return 1 + sizeof(*v);
 8001a9e:	2305      	movs	r3, #5
 8001aa0:	e086      	b.n	8001bb0 <dict_get_cell_typed+0x154>
			} else {
				*v = ((t[0] & 0x3f) << 8) + t[1];
 8001aa2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001aa6:	021b      	lsls	r3, r3, #8
 8001aa8:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 8001aac:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8001ab0:	441a      	add	r2, r3
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	601a      	str	r2, [r3, #0]
				return 2;
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	e07a      	b.n	8001bb0 <dict_get_cell_typed+0x154>
			}
		} else {
			*v = t[0];
 8001aba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001abe:	461a      	mov	r2, r3
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	601a      	str	r2, [r3, #0]
			return 1;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e073      	b.n	8001bb0 <dict_get_cell_typed+0x154>
		}
	}

	GET(ZF_MEM_SIZE_CELL, zf_cell);
 8001ac8:	79fb      	ldrb	r3, [r7, #7]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d10b      	bne.n	8001ae6 <dict_get_cell_typed+0x8a>
 8001ace:	f107 0320 	add.w	r3, r7, #32
 8001ad2:	2204      	movs	r2, #4
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	68f8      	ldr	r0, [r7, #12]
 8001ad8:	f7ff fee2 	bl	80018a0 <dict_get_bytes>
 8001adc:	6a3a      	ldr	r2, [r7, #32]
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	601a      	str	r2, [r3, #0]
 8001ae2:	2304      	movs	r3, #4
 8001ae4:	e064      	b.n	8001bb0 <dict_get_cell_typed+0x154>
	GET(ZF_MEM_SIZE_U8, uint8_t);
 8001ae6:	79fb      	ldrb	r3, [r7, #7]
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d10c      	bne.n	8001b06 <dict_get_cell_typed+0xaa>
 8001aec:	f107 031f 	add.w	r3, r7, #31
 8001af0:	2201      	movs	r2, #1
 8001af2:	4619      	mov	r1, r3
 8001af4:	68f8      	ldr	r0, [r7, #12]
 8001af6:	f7ff fed3 	bl	80018a0 <dict_get_bytes>
 8001afa:	7ffb      	ldrb	r3, [r7, #31]
 8001afc:	461a      	mov	r2, r3
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	601a      	str	r2, [r3, #0]
 8001b02:	2301      	movs	r3, #1
 8001b04:	e054      	b.n	8001bb0 <dict_get_cell_typed+0x154>
	GET(ZF_MEM_SIZE_U16, uint16_t);
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	2b03      	cmp	r3, #3
 8001b0a:	d10c      	bne.n	8001b26 <dict_get_cell_typed+0xca>
 8001b0c:	f107 031c 	add.w	r3, r7, #28
 8001b10:	2202      	movs	r2, #2
 8001b12:	4619      	mov	r1, r3
 8001b14:	68f8      	ldr	r0, [r7, #12]
 8001b16:	f7ff fec3 	bl	80018a0 <dict_get_bytes>
 8001b1a:	8bbb      	ldrh	r3, [r7, #28]
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	601a      	str	r2, [r3, #0]
 8001b22:	2302      	movs	r3, #2
 8001b24:	e044      	b.n	8001bb0 <dict_get_cell_typed+0x154>
	GET(ZF_MEM_SIZE_U32, uint32_t);
 8001b26:	79fb      	ldrb	r3, [r7, #7]
 8001b28:	2b04      	cmp	r3, #4
 8001b2a:	d10c      	bne.n	8001b46 <dict_get_cell_typed+0xea>
 8001b2c:	f107 0318 	add.w	r3, r7, #24
 8001b30:	2204      	movs	r2, #4
 8001b32:	4619      	mov	r1, r3
 8001b34:	68f8      	ldr	r0, [r7, #12]
 8001b36:	f7ff feb3 	bl	80018a0 <dict_get_bytes>
 8001b3a:	69bb      	ldr	r3, [r7, #24]
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	2304      	movs	r3, #4
 8001b44:	e034      	b.n	8001bb0 <dict_get_cell_typed+0x154>
	GET(ZF_MEM_SIZE_S8, int8_t);
 8001b46:	79fb      	ldrb	r3, [r7, #7]
 8001b48:	2b05      	cmp	r3, #5
 8001b4a:	d10d      	bne.n	8001b68 <dict_get_cell_typed+0x10c>
 8001b4c:	f107 0317 	add.w	r3, r7, #23
 8001b50:	2201      	movs	r2, #1
 8001b52:	4619      	mov	r1, r3
 8001b54:	68f8      	ldr	r0, [r7, #12]
 8001b56:	f7ff fea3 	bl	80018a0 <dict_get_bytes>
 8001b5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001b5e:	461a      	mov	r2, r3
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	2301      	movs	r3, #1
 8001b66:	e023      	b.n	8001bb0 <dict_get_cell_typed+0x154>
	GET(ZF_MEM_SIZE_S16, int16_t);
 8001b68:	79fb      	ldrb	r3, [r7, #7]
 8001b6a:	2b06      	cmp	r3, #6
 8001b6c:	d10d      	bne.n	8001b8a <dict_get_cell_typed+0x12e>
 8001b6e:	f107 0314 	add.w	r3, r7, #20
 8001b72:	2202      	movs	r2, #2
 8001b74:	4619      	mov	r1, r3
 8001b76:	68f8      	ldr	r0, [r7, #12]
 8001b78:	f7ff fe92 	bl	80018a0 <dict_get_bytes>
 8001b7c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001b80:	461a      	mov	r2, r3
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	601a      	str	r2, [r3, #0]
 8001b86:	2302      	movs	r3, #2
 8001b88:	e012      	b.n	8001bb0 <dict_get_cell_typed+0x154>
	GET(ZF_MEM_SIZE_S32, int32_t);
 8001b8a:	79fb      	ldrb	r3, [r7, #7]
 8001b8c:	2b07      	cmp	r3, #7
 8001b8e:	d10b      	bne.n	8001ba8 <dict_get_cell_typed+0x14c>
 8001b90:	f107 0310 	add.w	r3, r7, #16
 8001b94:	2204      	movs	r2, #4
 8001b96:	4619      	mov	r1, r3
 8001b98:	68f8      	ldr	r0, [r7, #12]
 8001b9a:	f7ff fe81 	bl	80018a0 <dict_get_bytes>
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	601a      	str	r2, [r3, #0]
 8001ba4:	2304      	movs	r3, #4
 8001ba6:	e003      	b.n	8001bb0 <dict_get_cell_typed+0x154>

	zf_abort(ZF_ABORT_INVALID_SIZE);
 8001ba8:	2009      	movs	r0, #9
 8001baa:	f7ff fdc3 	bl	8001734 <zf_abort>
	return 0;
 8001bae:	2300      	movs	r3, #0
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3728      	adds	r7, #40	; 0x28
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <dict_put_cell>:

/*
 * Shortcut functions for cell access with variable cell size
 */

static zf_addr dict_put_cell(zf_addr addr, zf_cell v) {
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
	return dict_put_cell_typed(addr, v, ZF_MEM_SIZE_VAR);
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	6839      	ldr	r1, [r7, #0]
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f7ff fe8a 	bl	80018e0 <dict_put_cell_typed>
 8001bcc:	4603      	mov	r3, r0
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <dict_get_cell>:

static zf_addr dict_get_cell(zf_addr addr, zf_cell *v) {
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b082      	sub	sp, #8
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
 8001bde:	6039      	str	r1, [r7, #0]
	return dict_get_cell_typed(addr, v, ZF_MEM_SIZE_VAR);
 8001be0:	2200      	movs	r2, #0
 8001be2:	6839      	ldr	r1, [r7, #0]
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f7ff ff39 	bl	8001a5c <dict_get_cell_typed>
 8001bea:	4603      	mov	r3, r0
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3708      	adds	r7, #8
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd80      	pop	{r7, pc}

08001bf4 <dict_add_cell_typed>:
/*
 * Generic dictionary adding, these functions all add at the HERE pointer and
 * increase the pointer
 */

static void dict_add_cell_typed(zf_cell v, zf_mem_size size) {
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	70fb      	strb	r3, [r7, #3]
	HERE+= dict_put_cell_typed(HERE, v, size);
 8001c00:	4b09      	ldr	r3, [pc, #36]	; (8001c28 <dict_add_cell_typed+0x34>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	78fa      	ldrb	r2, [r7, #3]
 8001c08:	6879      	ldr	r1, [r7, #4]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff fe68 	bl	80018e0 <dict_put_cell_typed>
 8001c10:	4601      	mov	r1, r0
 8001c12:	4b05      	ldr	r3, [pc, #20]	; (8001c28 <dict_add_cell_typed+0x34>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	4b03      	ldr	r3, [pc, #12]	; (8001c28 <dict_add_cell_typed+0x34>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	440a      	add	r2, r1
 8001c1e:	601a      	str	r2, [r3, #0]
}
 8001c20:	bf00      	nop
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	20000020 	.word	0x20000020

08001c2c <dict_add_cell>:

static void dict_add_cell(zf_cell v) {
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
	dict_add_cell_typed(v, ZF_MEM_SIZE_VAR);
 8001c34:	2100      	movs	r1, #0
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7ff ffdc 	bl	8001bf4 <dict_add_cell_typed>
}
 8001c3c:	bf00      	nop
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}

08001c44 <dict_add_op>:

static void dict_add_op(zf_addr op) {
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
	dict_add_cell(op);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7ff ffec 	bl	8001c2c <dict_add_cell>
}
 8001c54:	bf00      	nop
 8001c56:	3708      	adds	r7, #8
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <dict_add_lit>:

static void dict_add_lit(zf_cell v) {
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
	dict_add_op(PRIM_LIT);
 8001c64:	2001      	movs	r0, #1
 8001c66:	f7ff ffed 	bl	8001c44 <dict_add_op>
	dict_add_cell(v);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f7ff ffde 	bl	8001c2c <dict_add_cell>
}
 8001c70:	bf00      	nop
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <dict_add_str>:

static void dict_add_str(const char *s) {
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
	size_t l;
	l = strlen(s);
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f7fe fa93 	bl	80001ac <strlen>
 8001c86:	60f8      	str	r0, [r7, #12]
	HERE+= dict_put_bytes(HERE, s, l);
 8001c88:	4b09      	ldr	r3, [pc, #36]	; (8001cb0 <dict_add_str+0x38>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	68fa      	ldr	r2, [r7, #12]
 8001c90:	6879      	ldr	r1, [r7, #4]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff fde2 	bl	800185c <dict_put_bytes>
 8001c98:	4601      	mov	r1, r0
 8001c9a:	4b05      	ldr	r3, [pc, #20]	; (8001cb0 <dict_add_str+0x38>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	4b03      	ldr	r3, [pc, #12]	; (8001cb0 <dict_add_str+0x38>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	440a      	add	r2, r1
 8001ca6:	601a      	str	r2, [r3, #0]
}
 8001ca8:	bf00      	nop
 8001caa:	3710      	adds	r7, #16
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	20000020 	.word	0x20000020

08001cb4 <create>:

/*
 * Create new word, adjusting HERE and LATEST accordingly
 */

static void create(const char *name, int flags) {
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
	zf_addr here_prev;
	here_prev = HERE;
 8001cbe:	4b10      	ldr	r3, [pc, #64]	; (8001d00 <create+0x4c>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	60fb      	str	r3, [r7, #12]
	dict_add_cell((strlen(name)) | flags);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f7fe fa70 	bl	80001ac <strlen>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7ff ffaa 	bl	8001c2c <dict_add_cell>
	dict_add_cell(LATEST);
 8001cd8:	4b09      	ldr	r3, [pc, #36]	; (8001d00 <create+0x4c>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	3304      	adds	r3, #4
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff ffa3 	bl	8001c2c <dict_add_cell>
	dict_add_str(name);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f7ff ffc6 	bl	8001c78 <dict_add_str>
	LATEST= here_prev;
 8001cec:	4b04      	ldr	r3, [pc, #16]	; (8001d00 <create+0x4c>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	3304      	adds	r3, #4
 8001cf2:	68fa      	ldr	r2, [r7, #12]
 8001cf4:	601a      	str	r2, [r3, #0]
}
 8001cf6:	bf00      	nop
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}
 8001cfe:	bf00      	nop
 8001d00:	20000020 	.word	0x20000020

08001d04 <find_word>:

/*
 * Find word in dictionary, returning address and execution token
 */

static int find_word(const char *name, zf_addr *word, zf_addr *code) {
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b08c      	sub	sp, #48	; 0x30
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
	zf_addr w = LATEST;
 8001d10:	4b23      	ldr	r3, [pc, #140]	; (8001da0 <find_word+0x9c>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	62fb      	str	r3, [r7, #44]	; 0x2c
	size_t namelen = strlen(name);
 8001d18:	68f8      	ldr	r0, [r7, #12]
 8001d1a:	f7fe fa47 	bl	80001ac <strlen>
 8001d1e:	62b8      	str	r0, [r7, #40]	; 0x28

	while(w) {
 8001d20:	e035      	b.n	8001d8e <find_word+0x8a>
		zf_cell link, d;
		zf_addr p = w;
 8001d22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d24:	627b      	str	r3, [r7, #36]	; 0x24
		size_t len;
		p += dict_get_cell(p, &d);
 8001d26:	f107 0314 	add.w	r3, r7, #20
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001d2e:	f7ff ff52 	bl	8001bd6 <dict_get_cell>
 8001d32:	4602      	mov	r2, r0
 8001d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d36:	4413      	add	r3, r2
 8001d38:	627b      	str	r3, [r7, #36]	; 0x24
		p += dict_get_cell(p, &link);
 8001d3a:	f107 0318 	add.w	r3, r7, #24
 8001d3e:	4619      	mov	r1, r3
 8001d40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001d42:	f7ff ff48 	bl	8001bd6 <dict_get_cell>
 8001d46:	4602      	mov	r2, r0
 8001d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4a:	4413      	add	r3, r2
 8001d4c:	627b      	str	r3, [r7, #36]	; 0x24
		len = ZF_FLAG_LEN((int)d);
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	f003 031f 	and.w	r3, r3, #31
 8001d54:	623b      	str	r3, [r7, #32]
		if(len == namelen) {
 8001d56:	6a3a      	ldr	r2, [r7, #32]
 8001d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d115      	bne.n	8001d8a <find_word+0x86>
			const char *name2 = (const char *)&dict[p];
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d60:	4a10      	ldr	r2, [pc, #64]	; (8001da4 <find_word+0xa0>)
 8001d62:	4413      	add	r3, r2
 8001d64:	61fb      	str	r3, [r7, #28]
			if(memcmp(name, name2, len) == 0) {
 8001d66:	6a3a      	ldr	r2, [r7, #32]
 8001d68:	69f9      	ldr	r1, [r7, #28]
 8001d6a:	68f8      	ldr	r0, [r7, #12]
 8001d6c:	f003 fc78 	bl	8005660 <memcmp>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d109      	bne.n	8001d8a <find_word+0x86>
				*word = w;
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d7a:	601a      	str	r2, [r3, #0]
				*code = p + len;
 8001d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d7e:	6a3b      	ldr	r3, [r7, #32]
 8001d80:	441a      	add	r2, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	601a      	str	r2, [r3, #0]
				return 1;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e005      	b.n	8001d96 <find_word+0x92>
			}
		}
		w = link;
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
	while(w) {
 8001d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d1c6      	bne.n	8001d22 <find_word+0x1e>
	}

	return 0;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3730      	adds	r7, #48	; 0x30
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20000020 	.word	0x20000020
 8001da4:	200009f0 	.word	0x200009f0

08001da8 <make_immediate>:

/*
 * Set 'immediate' flag in last compiled word
 */

static void make_immediate(void) {
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
	zf_cell lenflags;
	dict_get_cell(LATEST, &lenflags);
 8001dae:	4b0c      	ldr	r3, [pc, #48]	; (8001de0 <make_immediate+0x38>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	3304      	adds	r3, #4
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	1d3a      	adds	r2, r7, #4
 8001db8:	4611      	mov	r1, r2
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff ff0b 	bl	8001bd6 <dict_get_cell>
	dict_put_cell(LATEST, (int)lenflags | ZF_FLAG_IMMEDIATE);
 8001dc0:	4b07      	ldr	r3, [pc, #28]	; (8001de0 <make_immediate+0x38>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	3304      	adds	r3, #4
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4610      	mov	r0, r2
 8001dd2:	f7ff fef1 	bl	8001bb8 <dict_put_cell>
}
 8001dd6:	bf00      	nop
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	20000020 	.word	0x20000020

08001de4 <run>:

/*
 * Inner interpreter
 */

static void run(const char *input) {
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
	while (ip != 0) {
 8001dec:	e02e      	b.n	8001e4c <run+0x68>
		zf_cell d;
		zf_addr ip_org = ip;
 8001dee:	4b1b      	ldr	r3, [pc, #108]	; (8001e5c <run+0x78>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	617b      	str	r3, [r7, #20]
		zf_addr l = dict_get_cell(ip, &d);
 8001df4:	4b19      	ldr	r3, [pc, #100]	; (8001e5c <run+0x78>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f107 0208 	add.w	r2, r7, #8
 8001dfc:	4611      	mov	r1, r2
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7ff fee9 	bl	8001bd6 <dict_get_cell>
 8001e04:	6138      	str	r0, [r7, #16]
		zf_addr code = d;
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	60fb      	str	r3, [r7, #12]

		ip += l;
 8001e0a:	4b14      	ldr	r3, [pc, #80]	; (8001e5c <run+0x78>)
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	4413      	add	r3, r2
 8001e12:	4a12      	ldr	r2, [pc, #72]	; (8001e5c <run+0x78>)
 8001e14:	6013      	str	r3, [r2, #0]

		if (code <= PRIM_COUNT) {
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	2b29      	cmp	r3, #41	; 0x29
 8001e1a:	d80d      	bhi.n	8001e38 <run+0x54>
			do_prim((zf_prim) code, input);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	6879      	ldr	r1, [r7, #4]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f000 f858 	bl	8001ed8 <do_prim>

			/* If the prim requests input, restore IP so that the
			 * next time around we call the same prim again */

			if (input_state != ZF_INPUT_INTERPRET) {
 8001e28:	4b0d      	ldr	r3, [pc, #52]	; (8001e60 <run+0x7c>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d00b      	beq.n	8001e48 <run+0x64>
				ip = ip_org;
 8001e30:	4a0a      	ldr	r2, [pc, #40]	; (8001e5c <run+0x78>)
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	6013      	str	r3, [r2, #0]
			ip = code;
		}

		input = NULL;
	}
}
 8001e36:	e00d      	b.n	8001e54 <run+0x70>
			zf_pushr(ip);
 8001e38:	4b08      	ldr	r3, [pc, #32]	; (8001e5c <run+0x78>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff fcc9 	bl	80017d4 <zf_pushr>
			ip = code;
 8001e42:	4a06      	ldr	r2, [pc, #24]	; (8001e5c <run+0x78>)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6013      	str	r3, [r2, #0]
		input = NULL;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	607b      	str	r3, [r7, #4]
	while (ip != 0) {
 8001e4c:	4b03      	ldr	r3, [pc, #12]	; (8001e5c <run+0x78>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d1cc      	bne.n	8001dee <run+0xa>
}
 8001e54:	bf00      	nop
 8001e56:	3718      	adds	r7, #24
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	200019fc 	.word	0x200019fc
 8001e60:	200019f0 	.word	0x200019f0

08001e64 <execute>:

/*
 * Execute bytecode from given address
 */

static void execute(zf_addr addr) {
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
	ip = addr;
 8001e6c:	4a07      	ldr	r2, [pc, #28]	; (8001e8c <execute+0x28>)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6013      	str	r3, [r2, #0]
	rsp = 0;
 8001e72:	4b07      	ldr	r3, [pc, #28]	; (8001e90 <execute+0x2c>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	601a      	str	r2, [r3, #0]
	zf_pushr(0);
 8001e78:	2000      	movs	r0, #0
 8001e7a:	f7ff fcab 	bl	80017d4 <zf_pushr>

	run(NULL);
 8001e7e:	2000      	movs	r0, #0
 8001e80:	f7ff ffb0 	bl	8001de4 <run>

}
 8001e84:	bf00      	nop
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	200019fc 	.word	0x200019fc
 8001e90:	200019f8 	.word	0x200019f8

08001e94 <peek>:

static zf_addr peek(zf_addr addr, zf_cell *val, int len) {
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
	if (addr < ZF_USERVAR_COUNT) {
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2b04      	cmp	r3, #4
 8001ea4:	d80a      	bhi.n	8001ebc <peek+0x28>
		*val = uservar[addr];
 8001ea6:	4b0b      	ldr	r3, [pc, #44]	; (8001ed4 <peek+0x40>)
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	4413      	add	r3, r2
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	601a      	str	r2, [r3, #0]
		return 1;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e007      	b.n	8001ecc <peek+0x38>
	} else {
		return dict_get_cell_typed(addr, val, (zf_mem_size) len);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	68b9      	ldr	r1, [r7, #8]
 8001ec4:	68f8      	ldr	r0, [r7, #12]
 8001ec6:	f7ff fdc9 	bl	8001a5c <dict_get_cell_typed>
 8001eca:	4603      	mov	r3, r0
	}

}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	20000020 	.word	0x20000020

08001ed8 <do_prim>:

/*
 * Run primitive opcode
 */

static void do_prim(zf_prim op, const char *input) {
 8001ed8:	b590      	push	{r4, r7, lr}
 8001eda:	b089      	sub	sp, #36	; 0x24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	4603      	mov	r3, r0
 8001ee0:	6039      	str	r1, [r7, #0]
 8001ee2:	71fb      	strb	r3, [r7, #7]
	zf_cell d1, d2, d3;
	zf_addr addr, len;

	switch (op) {
 8001ee4:	79fb      	ldrb	r3, [r7, #7]
 8001ee6:	2b28      	cmp	r3, #40	; 0x28
 8001ee8:	f200 82c8 	bhi.w	800247c <do_prim+0x5a4>
 8001eec:	a201      	add	r2, pc, #4	; (adr r2, 8001ef4 <do_prim+0x1c>)
 8001eee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ef2:	bf00      	nop
 8001ef4:	08002005 	.word	0x08002005
 8001ef8:	08001fdf 	.word	0x08001fdf
 8001efc:	08001fbb 	.word	0x08001fbb
 8001f00:	08001f99 	.word	0x08001f99
 8001f04:	08001fcd 	.word	0x08001fcd
 8001f08:	08002109 	.word	0x08002109
 8001f0c:	08002159 	.word	0x08002159
 8001f10:	08002175 	.word	0x08002175
 8001f14:	0800218d 	.word	0x0800218d
 8001f18:	080021b7 	.word	0x080021b7
 8001f1c:	080020e9 	.word	0x080020e9
 8001f20:	080020ef 	.word	0x080020ef
 8001f24:	0800213f 	.word	0x0800213f
 8001f28:	080021e9 	.word	0x080021e9
 8001f2c:	0800203b 	.word	0x0800203b
 8001f30:	08002063 	.word	0x08002063
 8001f34:	080020a1 	.word	0x080020a1
 8001f38:	080020bf 	.word	0x080020bf
 8001f3c:	080021ef 	.word	0x080021ef
 8001f40:	08002215 	.word	0x08002215
 8001f44:	08002247 	.word	0x08002247
 8001f48:	080022d9 	.word	0x080022d9
 8001f4c:	080022f1 	.word	0x080022f1
 8001f50:	080022ff 	.word	0x080022ff
 8001f54:	0800230d 	.word	0x0800230d
 8001f58:	0800247d 	.word	0x0800247d
 8001f5c:	08002125 	.word	0x08002125
 8001f60:	080022bb 	.word	0x080022bb
 8001f64:	0800232b 	.word	0x0800232b
 8001f68:	08002345 	.word	0x08002345
 8001f6c:	08002013 	.word	0x08002013
 8001f70:	08002381 	.word	0x08002381
 8001f74:	08002397 	.word	0x08002397
 8001f78:	080023ad 	.word	0x080023ad
 8001f7c:	080023c3 	.word	0x080023c3
 8001f80:	080023df 	.word	0x080023df
 8001f84:	08002411 	.word	0x08002411
 8001f88:	080023fb 	.word	0x080023fb
 8001f8c:	08002447 	.word	0x08002447
 8001f90:	08002465 	.word	0x08002465
 8001f94:	08002471 	.word	0x08002471

	case PRIM_COL:
		if (input == NULL) {
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d103      	bne.n	8001fa6 <do_prim+0xce>
			input_state = ZF_INPUT_PASS_WORD;
 8001f9e:	4bb6      	ldr	r3, [pc, #728]	; (8002278 <do_prim+0x3a0>)
 8001fa0:	2202      	movs	r2, #2
 8001fa2:	701a      	strb	r2, [r3, #0]
		} else {
			create(input, 0);
			COMPILING= 1;
		}
		break;
 8001fa4:	e271      	b.n	800248a <do_prim+0x5b2>
			create(input, 0);
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	6838      	ldr	r0, [r7, #0]
 8001faa:	f7ff fe83 	bl	8001cb4 <create>
			COMPILING= 1;
 8001fae:	4bb3      	ldr	r3, [pc, #716]	; (800227c <do_prim+0x3a4>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	330c      	adds	r3, #12
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	601a      	str	r2, [r3, #0]
		break;
 8001fb8:	e267      	b.n	800248a <do_prim+0x5b2>

		case PRIM_LTZ:
		zf_push(zf_pop() < 0);
 8001fba:	f7ff fbdd 	bl	8001778 <zf_pop>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	0fdb      	lsrs	r3, r3, #31
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff fbc1 	bl	800174c <zf_push>
		break;
 8001fca:	e25e      	b.n	800248a <do_prim+0x5b2>

		case PRIM_SEMICOL:
		dict_add_op(PRIM_EXIT);
 8001fcc:	2000      	movs	r0, #0
 8001fce:	f7ff fe39 	bl	8001c44 <dict_add_op>
		COMPILING = 0;
 8001fd2:	4baa      	ldr	r3, [pc, #680]	; (800227c <do_prim+0x3a4>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	330c      	adds	r3, #12
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
		break;
 8001fdc:	e255      	b.n	800248a <do_prim+0x5b2>

		case PRIM_LIT:
		ip += dict_get_cell(ip, &d1);
 8001fde:	4ba8      	ldr	r3, [pc, #672]	; (8002280 <do_prim+0x3a8>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f107 0214 	add.w	r2, r7, #20
 8001fe6:	4611      	mov	r1, r2
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f7ff fdf4 	bl	8001bd6 <dict_get_cell>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	4ba3      	ldr	r3, [pc, #652]	; (8002280 <do_prim+0x3a8>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	4aa2      	ldr	r2, [pc, #648]	; (8002280 <do_prim+0x3a8>)
 8001ff8:	6013      	str	r3, [r2, #0]
		zf_push(d1);
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff fba5 	bl	800174c <zf_push>
		break;
 8002002:	e242      	b.n	800248a <do_prim+0x5b2>

		case PRIM_EXIT:
		ip = zf_popr();
 8002004:	f7ff fbfc 	bl	8001800 <zf_popr>
 8002008:	4603      	mov	r3, r0
 800200a:	461a      	mov	r2, r3
 800200c:	4b9c      	ldr	r3, [pc, #624]	; (8002280 <do_prim+0x3a8>)
 800200e:	601a      	str	r2, [r3, #0]
		break;
 8002010:	e23b      	b.n	800248a <do_prim+0x5b2>

		case PRIM_LEN:
		len = zf_pop();
 8002012:	f7ff fbb1 	bl	8001778 <zf_pop>
 8002016:	4603      	mov	r3, r0
 8002018:	60fb      	str	r3, [r7, #12]
		addr = zf_pop();
 800201a:	f7ff fbad 	bl	8001778 <zf_pop>
 800201e:	4603      	mov	r3, r0
 8002020:	613b      	str	r3, [r7, #16]
		zf_push(peek(addr, &d1, len));
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	68fa      	ldr	r2, [r7, #12]
 8002026:	f107 0114 	add.w	r1, r7, #20
 800202a:	4618      	mov	r0, r3
 800202c:	f7ff ff32 	bl	8001e94 <peek>
 8002030:	4603      	mov	r3, r0
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff fb8a 	bl	800174c <zf_push>
		break;
 8002038:	e227      	b.n	800248a <do_prim+0x5b2>

		case PRIM_PEEK:
		len = zf_pop();
 800203a:	f7ff fb9d 	bl	8001778 <zf_pop>
 800203e:	4603      	mov	r3, r0
 8002040:	60fb      	str	r3, [r7, #12]
		addr = zf_pop();
 8002042:	f7ff fb99 	bl	8001778 <zf_pop>
 8002046:	4603      	mov	r3, r0
 8002048:	613b      	str	r3, [r7, #16]
		peek(addr, &d1, len);
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	68fa      	ldr	r2, [r7, #12]
 800204e:	f107 0114 	add.w	r1, r7, #20
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff ff1e 	bl	8001e94 <peek>
		zf_push(d1);
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	4618      	mov	r0, r3
 800205c:	f7ff fb76 	bl	800174c <zf_push>
		break;
 8002060:	e213      	b.n	800248a <do_prim+0x5b2>

		case PRIM_POKE:
		d2 = zf_pop();
 8002062:	f7ff fb89 	bl	8001778 <zf_pop>
 8002066:	61f8      	str	r0, [r7, #28]
		addr = zf_pop();
 8002068:	f7ff fb86 	bl	8001778 <zf_pop>
 800206c:	4603      	mov	r3, r0
 800206e:	613b      	str	r3, [r7, #16]
		d1 = zf_pop();
 8002070:	f7ff fb82 	bl	8001778 <zf_pop>
 8002074:	4603      	mov	r3, r0
 8002076:	617b      	str	r3, [r7, #20]
		if(addr < ZF_USERVAR_COUNT) {
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	2b04      	cmp	r3, #4
 800207c:	d808      	bhi.n	8002090 <do_prim+0x1b8>
			uservar[addr] = d1;
 800207e:	6979      	ldr	r1, [r7, #20]
 8002080:	4b7e      	ldr	r3, [pc, #504]	; (800227c <do_prim+0x3a4>)
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	4413      	add	r3, r2
 800208a:	460a      	mov	r2, r1
 800208c:	601a      	str	r2, [r3, #0]
			break;
 800208e:	e1fc      	b.n	800248a <do_prim+0x5b2>
		}
		dict_put_cell_typed(addr, d1, (zf_mem_size)d2);
 8002090:	693b      	ldr	r3, [r7, #16]
 8002092:	6979      	ldr	r1, [r7, #20]
 8002094:	69fa      	ldr	r2, [r7, #28]
 8002096:	b2d2      	uxtb	r2, r2
 8002098:	4618      	mov	r0, r3
 800209a:	f7ff fc21 	bl	80018e0 <dict_put_cell_typed>
		break;
 800209e:	e1f4      	b.n	800248a <do_prim+0x5b2>

		case PRIM_SWAP:
		d1 = zf_pop(); d2 = zf_pop();
 80020a0:	f7ff fb6a 	bl	8001778 <zf_pop>
 80020a4:	4603      	mov	r3, r0
 80020a6:	617b      	str	r3, [r7, #20]
 80020a8:	f7ff fb66 	bl	8001778 <zf_pop>
 80020ac:	61f8      	str	r0, [r7, #28]
		zf_push(d1); zf_push(d2);
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7ff fb4b 	bl	800174c <zf_push>
 80020b6:	69f8      	ldr	r0, [r7, #28]
 80020b8:	f7ff fb48 	bl	800174c <zf_push>
		break;
 80020bc:	e1e5      	b.n	800248a <do_prim+0x5b2>

		case PRIM_ROT:
		d1 = zf_pop(); d2 = zf_pop(); d3 = zf_pop();
 80020be:	f7ff fb5b 	bl	8001778 <zf_pop>
 80020c2:	4603      	mov	r3, r0
 80020c4:	617b      	str	r3, [r7, #20]
 80020c6:	f7ff fb57 	bl	8001778 <zf_pop>
 80020ca:	61f8      	str	r0, [r7, #28]
 80020cc:	f7ff fb54 	bl	8001778 <zf_pop>
 80020d0:	61b8      	str	r0, [r7, #24]
		zf_push(d2); zf_push(d1); zf_push(d3);
 80020d2:	69f8      	ldr	r0, [r7, #28]
 80020d4:	f7ff fb3a 	bl	800174c <zf_push>
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	4618      	mov	r0, r3
 80020dc:	f7ff fb36 	bl	800174c <zf_push>
 80020e0:	69b8      	ldr	r0, [r7, #24]
 80020e2:	f7ff fb33 	bl	800174c <zf_push>
		break;
 80020e6:	e1d0      	b.n	800248a <do_prim+0x5b2>

		case PRIM_DROP:
		zf_pop();
 80020e8:	f7ff fb46 	bl	8001778 <zf_pop>
		break;
 80020ec:	e1cd      	b.n	800248a <do_prim+0x5b2>

		case PRIM_DUP:
		d1 = zf_pop();
 80020ee:	f7ff fb43 	bl	8001778 <zf_pop>
 80020f2:	4603      	mov	r3, r0
 80020f4:	617b      	str	r3, [r7, #20]
		zf_push(d1); zf_push(d1);
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff fb27 	bl	800174c <zf_push>
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	4618      	mov	r0, r3
 8002102:	f7ff fb23 	bl	800174c <zf_push>
		break;
 8002106:	e1c0      	b.n	800248a <do_prim+0x5b2>

		case PRIM_ADD:
		d1 = zf_pop(); d2 = zf_pop();
 8002108:	f7ff fb36 	bl	8001778 <zf_pop>
 800210c:	4603      	mov	r3, r0
 800210e:	617b      	str	r3, [r7, #20]
 8002110:	f7ff fb32 	bl	8001778 <zf_pop>
 8002114:	61f8      	str	r0, [r7, #28]
		zf_push(d1 + d2);
 8002116:	697a      	ldr	r2, [r7, #20]
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	4413      	add	r3, r2
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff fb15 	bl	800174c <zf_push>
		break;
 8002122:	e1b2      	b.n	800248a <do_prim+0x5b2>

		case PRIM_PICK:
		addr = zf_pop();
 8002124:	f7ff fb28 	bl	8001778 <zf_pop>
 8002128:	4603      	mov	r3, r0
 800212a:	613b      	str	r3, [r7, #16]
		zf_push(zf_pick(addr));
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	4618      	mov	r0, r3
 8002130:	f7ff fb3a 	bl	80017a8 <zf_pick>
 8002134:	4603      	mov	r3, r0
 8002136:	4618      	mov	r0, r3
 8002138:	f7ff fb08 	bl	800174c <zf_push>
		break;
 800213c:	e1a5      	b.n	800248a <do_prim+0x5b2>

		case PRIM_PICKR:
		addr = zf_pop();
 800213e:	f7ff fb1b 	bl	8001778 <zf_pop>
 8002142:	4603      	mov	r3, r0
 8002144:	613b      	str	r3, [r7, #16]
		zf_push(zf_pickr(addr));
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff fb71 	bl	8001830 <zf_pickr>
 800214e:	4603      	mov	r3, r0
 8002150:	4618      	mov	r0, r3
 8002152:	f7ff fafb 	bl	800174c <zf_push>
		break;
 8002156:	e198      	b.n	800248a <do_prim+0x5b2>

		case PRIM_SUB:
		d1 = zf_pop(); d2 = zf_pop();
 8002158:	f7ff fb0e 	bl	8001778 <zf_pop>
 800215c:	4603      	mov	r3, r0
 800215e:	617b      	str	r3, [r7, #20]
 8002160:	f7ff fb0a 	bl	8001778 <zf_pop>
 8002164:	61f8      	str	r0, [r7, #28]
		zf_push(d2 - d1);
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	69fa      	ldr	r2, [r7, #28]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff faed 	bl	800174c <zf_push>
		break;
 8002172:	e18a      	b.n	800248a <do_prim+0x5b2>

		case PRIM_MUL:
		zf_push(zf_pop() * zf_pop());
 8002174:	f7ff fb00 	bl	8001778 <zf_pop>
 8002178:	4604      	mov	r4, r0
 800217a:	f7ff fafd 	bl	8001778 <zf_pop>
 800217e:	4603      	mov	r3, r0
 8002180:	fb04 f303 	mul.w	r3, r4, r3
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff fae1 	bl	800174c <zf_push>
		break;
 800218a:	e17e      	b.n	800248a <do_prim+0x5b2>

		case PRIM_DIV:
		if((d2 = zf_pop()) == 0) {
 800218c:	f7ff faf4 	bl	8001778 <zf_pop>
 8002190:	61f8      	str	r0, [r7, #28]
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d102      	bne.n	800219e <do_prim+0x2c6>
			zf_abort(ZF_ABORT_DIVISION_BY_ZERO);
 8002198:	200a      	movs	r0, #10
 800219a:	f7ff facb 	bl	8001734 <zf_abort>
		}
		d1 = zf_pop();
 800219e:	f7ff faeb 	bl	8001778 <zf_pop>
 80021a2:	4603      	mov	r3, r0
 80021a4:	617b      	str	r3, [r7, #20]
		zf_push(d1 / d2);
 80021a6:	697a      	ldr	r2, [r7, #20]
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7ff facc 	bl	800174c <zf_push>
		break;
 80021b4:	e169      	b.n	800248a <do_prim+0x5b2>

		case PRIM_MOD:
		if((int)(d2 = zf_pop()) == 0) {
 80021b6:	f7ff fadf 	bl	8001778 <zf_pop>
 80021ba:	61f8      	str	r0, [r7, #28]
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d102      	bne.n	80021c8 <do_prim+0x2f0>
			zf_abort(ZF_ABORT_DIVISION_BY_ZERO);
 80021c2:	200a      	movs	r0, #10
 80021c4:	f7ff fab6 	bl	8001734 <zf_abort>
		}
		d1 = zf_pop();
 80021c8:	f7ff fad6 	bl	8001778 <zf_pop>
 80021cc:	4603      	mov	r3, r0
 80021ce:	617b      	str	r3, [r7, #20]
		zf_push((int)d1 % (int)d2);
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	69fa      	ldr	r2, [r7, #28]
 80021d4:	fb93 f2f2 	sdiv	r2, r3, r2
 80021d8:	69f9      	ldr	r1, [r7, #28]
 80021da:	fb01 f202 	mul.w	r2, r1, r2
 80021de:	1a9b      	subs	r3, r3, r2
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff fab3 	bl	800174c <zf_push>
		break;
 80021e6:	e150      	b.n	800248a <do_prim+0x5b2>

		case PRIM_IMMEDIATE:
		make_immediate();
 80021e8:	f7ff fdde 	bl	8001da8 <make_immediate>
		break;
 80021ec:	e14d      	b.n	800248a <do_prim+0x5b2>

		case PRIM_JMP:
		ip += dict_get_cell(ip, &d1);
 80021ee:	4b24      	ldr	r3, [pc, #144]	; (8002280 <do_prim+0x3a8>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f107 0214 	add.w	r2, r7, #20
 80021f6:	4611      	mov	r1, r2
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff fcec 	bl	8001bd6 <dict_get_cell>
 80021fe:	4602      	mov	r2, r0
 8002200:	4b1f      	ldr	r3, [pc, #124]	; (8002280 <do_prim+0x3a8>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4413      	add	r3, r2
 8002206:	4a1e      	ldr	r2, [pc, #120]	; (8002280 <do_prim+0x3a8>)
 8002208:	6013      	str	r3, [r2, #0]
		ip = d1;
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	461a      	mov	r2, r3
 800220e:	4b1c      	ldr	r3, [pc, #112]	; (8002280 <do_prim+0x3a8>)
 8002210:	601a      	str	r2, [r3, #0]
		break;
 8002212:	e13a      	b.n	800248a <do_prim+0x5b2>

		case PRIM_JMP0:
		ip += dict_get_cell(ip, &d1);
 8002214:	4b1a      	ldr	r3, [pc, #104]	; (8002280 <do_prim+0x3a8>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f107 0214 	add.w	r2, r7, #20
 800221c:	4611      	mov	r1, r2
 800221e:	4618      	mov	r0, r3
 8002220:	f7ff fcd9 	bl	8001bd6 <dict_get_cell>
 8002224:	4602      	mov	r2, r0
 8002226:	4b16      	ldr	r3, [pc, #88]	; (8002280 <do_prim+0x3a8>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4413      	add	r3, r2
 800222c:	4a14      	ldr	r2, [pc, #80]	; (8002280 <do_prim+0x3a8>)
 800222e:	6013      	str	r3, [r2, #0]
		if(zf_pop() == 0) {
 8002230:	f7ff faa2 	bl	8001778 <zf_pop>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	f040 8124 	bne.w	8002484 <do_prim+0x5ac>
			ip = d1;
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	461a      	mov	r2, r3
 8002240:	4b0f      	ldr	r3, [pc, #60]	; (8002280 <do_prim+0x3a8>)
 8002242:	601a      	str	r2, [r3, #0]
		}
		break;
 8002244:	e11e      	b.n	8002484 <do_prim+0x5ac>

		case PRIM_TICK:
		if (COMPILING) {
 8002246:	4b0d      	ldr	r3, [pc, #52]	; (800227c <do_prim+0x3a4>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	330c      	adds	r3, #12
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d018      	beq.n	8002284 <do_prim+0x3ac>
			ip += dict_get_cell(ip, &d1);
 8002252:	4b0b      	ldr	r3, [pc, #44]	; (8002280 <do_prim+0x3a8>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f107 0214 	add.w	r2, r7, #20
 800225a:	4611      	mov	r1, r2
 800225c:	4618      	mov	r0, r3
 800225e:	f7ff fcba 	bl	8001bd6 <dict_get_cell>
 8002262:	4602      	mov	r2, r0
 8002264:	4b06      	ldr	r3, [pc, #24]	; (8002280 <do_prim+0x3a8>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4413      	add	r3, r2
 800226a:	4a05      	ldr	r2, [pc, #20]	; (8002280 <do_prim+0x3a8>)
 800226c:	6013      	str	r3, [r2, #0]
			zf_push(d1);
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff fa6b 	bl	800174c <zf_push>
				else zf_abort(ZF_ABORT_INTERNAL_ERROR);
			}
			else input_state = ZF_INPUT_PASS_WORD;
		}

		break;
 8002276:	e108      	b.n	800248a <do_prim+0x5b2>
 8002278:	200019f0 	.word	0x200019f0
 800227c:	20000020 	.word	0x20000020
 8002280:	200019fc 	.word	0x200019fc
			if (input) {
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d013      	beq.n	80022b2 <do_prim+0x3da>
				if (find_word(input,&addr,&len)) zf_push(len);
 800228a:	f107 020c 	add.w	r2, r7, #12
 800228e:	f107 0310 	add.w	r3, r7, #16
 8002292:	4619      	mov	r1, r3
 8002294:	6838      	ldr	r0, [r7, #0]
 8002296:	f7ff fd35 	bl	8001d04 <find_word>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d004      	beq.n	80022aa <do_prim+0x3d2>
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7ff fa52 	bl	800174c <zf_push>
		break;
 80022a8:	e0ef      	b.n	800248a <do_prim+0x5b2>
				else zf_abort(ZF_ABORT_INTERNAL_ERROR);
 80022aa:	2001      	movs	r0, #1
 80022ac:	f7ff fa42 	bl	8001734 <zf_abort>
		break;
 80022b0:	e0eb      	b.n	800248a <do_prim+0x5b2>
			else input_state = ZF_INPUT_PASS_WORD;
 80022b2:	4b78      	ldr	r3, [pc, #480]	; (8002494 <do_prim+0x5bc>)
 80022b4:	2202      	movs	r2, #2
 80022b6:	701a      	strb	r2, [r3, #0]
		break;
 80022b8:	e0e7      	b.n	800248a <do_prim+0x5b2>

		case PRIM_COMMA:
		d2 = zf_pop();
 80022ba:	f7ff fa5d 	bl	8001778 <zf_pop>
 80022be:	61f8      	str	r0, [r7, #28]
		d1 = zf_pop();
 80022c0:	f7ff fa5a 	bl	8001778 <zf_pop>
 80022c4:	4603      	mov	r3, r0
 80022c6:	617b      	str	r3, [r7, #20]
		dict_add_cell_typed(d1, (zf_mem_size)d2);
 80022c8:	697b      	ldr	r3, [r7, #20]
 80022ca:	69fa      	ldr	r2, [r7, #28]
 80022cc:	b2d2      	uxtb	r2, r2
 80022ce:	4611      	mov	r1, r2
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff fc8f 	bl	8001bf4 <dict_add_cell_typed>
		break;
 80022d6:	e0d8      	b.n	800248a <do_prim+0x5b2>

		case PRIM_COMMENT:
		if(!input || input[0] != ')') {
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d004      	beq.n	80022e8 <do_prim+0x410>
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	2b29      	cmp	r3, #41	; 0x29
 80022e4:	f000 80d0 	beq.w	8002488 <do_prim+0x5b0>
			input_state = ZF_INPUT_PASS_CHAR;
 80022e8:	4b6a      	ldr	r3, [pc, #424]	; (8002494 <do_prim+0x5bc>)
 80022ea:	2201      	movs	r2, #1
 80022ec:	701a      	strb	r2, [r3, #0]
		}
		break;
 80022ee:	e0cb      	b.n	8002488 <do_prim+0x5b0>

		case PRIM_PUSHR:
		zf_pushr(zf_pop());
 80022f0:	f7ff fa42 	bl	8001778 <zf_pop>
 80022f4:	4603      	mov	r3, r0
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7ff fa6c 	bl	80017d4 <zf_pushr>
		break;
 80022fc:	e0c5      	b.n	800248a <do_prim+0x5b2>

		case PRIM_POPR:
		zf_push(zf_popr());
 80022fe:	f7ff fa7f 	bl	8001800 <zf_popr>
 8002302:	4603      	mov	r3, r0
 8002304:	4618      	mov	r0, r3
 8002306:	f7ff fa21 	bl	800174c <zf_push>
		break;
 800230a:	e0be      	b.n	800248a <do_prim+0x5b2>

		case PRIM_EQUAL:
		zf_push(zf_pop() == zf_pop());
 800230c:	f7ff fa34 	bl	8001778 <zf_pop>
 8002310:	4604      	mov	r4, r0
 8002312:	f7ff fa31 	bl	8001778 <zf_pop>
 8002316:	4603      	mov	r3, r0
 8002318:	429c      	cmp	r4, r3
 800231a:	bf0c      	ite	eq
 800231c:	2301      	moveq	r3, #1
 800231e:	2300      	movne	r3, #0
 8002320:	b2db      	uxtb	r3, r3
 8002322:	4618      	mov	r0, r3
 8002324:	f7ff fa12 	bl	800174c <zf_push>
		break;
 8002328:	e0af      	b.n	800248a <do_prim+0x5b2>

		case PRIM_KEY:
		if(input == NULL) {
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d103      	bne.n	8002338 <do_prim+0x460>
			input_state = ZF_INPUT_PASS_CHAR;
 8002330:	4b58      	ldr	r3, [pc, #352]	; (8002494 <do_prim+0x5bc>)
 8002332:	2201      	movs	r2, #1
 8002334:	701a      	strb	r2, [r3, #0]
		} else {
			zf_push(input[0]);
		}
		break;
 8002336:	e0a8      	b.n	800248a <do_prim+0x5b2>
			zf_push(input[0]);
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	781b      	ldrb	r3, [r3, #0]
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff fa05 	bl	800174c <zf_push>
		break;
 8002342:	e0a2      	b.n	800248a <do_prim+0x5b2>

		case PRIM_LITS:
		ip += dict_get_cell(ip, &d1);
 8002344:	4b54      	ldr	r3, [pc, #336]	; (8002498 <do_prim+0x5c0>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f107 0214 	add.w	r2, r7, #20
 800234c:	4611      	mov	r1, r2
 800234e:	4618      	mov	r0, r3
 8002350:	f7ff fc41 	bl	8001bd6 <dict_get_cell>
 8002354:	4602      	mov	r2, r0
 8002356:	4b50      	ldr	r3, [pc, #320]	; (8002498 <do_prim+0x5c0>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4413      	add	r3, r2
 800235c:	4a4e      	ldr	r2, [pc, #312]	; (8002498 <do_prim+0x5c0>)
 800235e:	6013      	str	r3, [r2, #0]
		zf_push(ip);
 8002360:	4b4d      	ldr	r3, [pc, #308]	; (8002498 <do_prim+0x5c0>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff f9f1 	bl	800174c <zf_push>
		zf_push(d1);
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	4618      	mov	r0, r3
 800236e:	f7ff f9ed 	bl	800174c <zf_push>
		ip += d1;
 8002372:	4b49      	ldr	r3, [pc, #292]	; (8002498 <do_prim+0x5c0>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	697a      	ldr	r2, [r7, #20]
 8002378:	4413      	add	r3, r2
 800237a:	4a47      	ldr	r2, [pc, #284]	; (8002498 <do_prim+0x5c0>)
 800237c:	6013      	str	r3, [r2, #0]
		break;
 800237e:	e084      	b.n	800248a <do_prim+0x5b2>

		case PRIM_AND:
		zf_push((int)zf_pop() & (int)zf_pop());
 8002380:	f7ff f9fa 	bl	8001778 <zf_pop>
 8002384:	4604      	mov	r4, r0
 8002386:	f7ff f9f7 	bl	8001778 <zf_pop>
 800238a:	4603      	mov	r3, r0
 800238c:	4023      	ands	r3, r4
 800238e:	4618      	mov	r0, r3
 8002390:	f7ff f9dc 	bl	800174c <zf_push>
		break;
 8002394:	e079      	b.n	800248a <do_prim+0x5b2>

		case PRIM_OR:
		zf_push((int)zf_pop() | (int)zf_pop());
 8002396:	f7ff f9ef 	bl	8001778 <zf_pop>
 800239a:	4604      	mov	r4, r0
 800239c:	f7ff f9ec 	bl	8001778 <zf_pop>
 80023a0:	4603      	mov	r3, r0
 80023a2:	4323      	orrs	r3, r4
 80023a4:	4618      	mov	r0, r3
 80023a6:	f7ff f9d1 	bl	800174c <zf_push>
		break;
 80023aa:	e06e      	b.n	800248a <do_prim+0x5b2>

		case PRIM_XOR:
		zf_push((int)zf_pop() ^ (int)zf_pop());
 80023ac:	f7ff f9e4 	bl	8001778 <zf_pop>
 80023b0:	4604      	mov	r4, r0
 80023b2:	f7ff f9e1 	bl	8001778 <zf_pop>
 80023b6:	4603      	mov	r3, r0
 80023b8:	4063      	eors	r3, r4
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7ff f9c6 	bl	800174c <zf_push>
		break;
 80023c0:	e063      	b.n	800248a <do_prim+0x5b2>

		case PRIM_SHL:
		d1 = zf_pop();
 80023c2:	f7ff f9d9 	bl	8001778 <zf_pop>
 80023c6:	4603      	mov	r3, r0
 80023c8:	617b      	str	r3, [r7, #20]
		zf_push((int)zf_pop() << (int)d1);
 80023ca:	f7ff f9d5 	bl	8001778 <zf_pop>
 80023ce:	4602      	mov	r2, r0
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	fa02 f303 	lsl.w	r3, r2, r3
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7ff f9b8 	bl	800174c <zf_push>
		break;
 80023dc:	e055      	b.n	800248a <do_prim+0x5b2>

		case PRIM_SHR:
		d1 = zf_pop();
 80023de:	f7ff f9cb 	bl	8001778 <zf_pop>
 80023e2:	4603      	mov	r3, r0
 80023e4:	617b      	str	r3, [r7, #20]
		zf_push((int)zf_pop() >> (int)d1);
 80023e6:	f7ff f9c7 	bl	8001778 <zf_pop>
 80023ea:	4602      	mov	r2, r0
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	fa42 f303 	asr.w	r3, r2, r3
 80023f2:	4618      	mov	r0, r3
 80023f4:	f7ff f9aa 	bl	800174c <zf_push>
		break;
 80023f8:	e047      	b.n	800248a <do_prim+0x5b2>

		case PRIM_DEVREAD:
		zf_push(*(SRAM_START + zf_pop()));
 80023fa:	4b28      	ldr	r3, [pc, #160]	; (800249c <do_prim+0x5c4>)
 80023fc:	681c      	ldr	r4, [r3, #0]
 80023fe:	f7ff f9bb 	bl	8001778 <zf_pop>
 8002402:	4603      	mov	r3, r0
 8002404:	4423      	add	r3, r4
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	4618      	mov	r0, r3
 800240a:	f7ff f99f 	bl	800174c <zf_push>
		break;
 800240e:	e03c      	b.n	800248a <do_prim+0x5b2>

		case PRIM_EMIT:
		d1 = zf_pop();
 8002410:	f7ff f9b2 	bl	8001778 <zf_pop>
 8002414:	4603      	mov	r3, r0
 8002416:	617b      	str	r3, [r7, #20]
		*(WRITE_BUF + write_pos++) = d1;
 8002418:	4b21      	ldr	r3, [pc, #132]	; (80024a0 <do_prim+0x5c8>)
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	4b21      	ldr	r3, [pc, #132]	; (80024a4 <do_prim+0x5cc>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	1c59      	adds	r1, r3, #1
 8002422:	4820      	ldr	r0, [pc, #128]	; (80024a4 <do_prim+0x5cc>)
 8002424:	6001      	str	r1, [r0, #0]
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	4413      	add	r3, r2
 800242a:	697a      	ldr	r2, [r7, #20]
 800242c:	601a      	str	r2, [r3, #0]
		write_pos = write_pos == WRITE_BUF_MAX ? 0 : write_pos;
 800242e:	4b1d      	ldr	r3, [pc, #116]	; (80024a4 <do_prim+0x5cc>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002436:	d002      	beq.n	800243e <do_prim+0x566>
 8002438:	4b1a      	ldr	r3, [pc, #104]	; (80024a4 <do_prim+0x5cc>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	e000      	b.n	8002440 <do_prim+0x568>
 800243e:	2300      	movs	r3, #0
 8002440:	4a18      	ldr	r2, [pc, #96]	; (80024a4 <do_prim+0x5cc>)
 8002442:	6013      	str	r3, [r2, #0]
		break;
 8002444:	e021      	b.n	800248a <do_prim+0x5b2>

		case PRIM_DEVWRITE:
		d1 = zf_pop();
 8002446:	f7ff f997 	bl	8001778 <zf_pop>
 800244a:	4603      	mov	r3, r0
 800244c:	617b      	str	r3, [r7, #20]
		d2 = zf_pop();
 800244e:	f7ff f993 	bl	8001778 <zf_pop>
 8002452:	61f8      	str	r0, [r7, #28]
		*(SRAM_START + d1) = (uint8_t)d2;
 8002454:	4b11      	ldr	r3, [pc, #68]	; (800249c <do_prim+0x5c4>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	697a      	ldr	r2, [r7, #20]
 800245a:	4413      	add	r3, r2
 800245c:	69fa      	ldr	r2, [r7, #28]
 800245e:	b2d2      	uxtb	r2, r2
 8002460:	701a      	strb	r2, [r3, #0]
		break;
 8002462:	e012      	b.n	800248a <do_prim+0x5b2>

		case PRIM_DEVTEMP:
		zf_push(sensors[0]);
 8002464:	4b10      	ldr	r3, [pc, #64]	; (80024a8 <do_prim+0x5d0>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4618      	mov	r0, r3
 800246a:	f7ff f96f 	bl	800174c <zf_push>
		break;
 800246e:	e00c      	b.n	800248a <do_prim+0x5b2>

		case PRIM_DEVVDD:
		zf_push(sensors[1]);
 8002470:	4b0d      	ldr	r3, [pc, #52]	; (80024a8 <do_prim+0x5d0>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff f969 	bl	800174c <zf_push>
		break;
 800247a:	e006      	b.n	800248a <do_prim+0x5b2>

		default:
		zf_abort(ZF_ABORT_INTERNAL_ERROR);
 800247c:	2001      	movs	r0, #1
 800247e:	f7ff f959 	bl	8001734 <zf_abort>
		break;
 8002482:	e002      	b.n	800248a <do_prim+0x5b2>
		break;
 8002484:	bf00      	nop
 8002486:	e000      	b.n	800248a <do_prim+0x5b2>
		break;
 8002488:	bf00      	nop
	}
}
 800248a:	bf00      	nop
 800248c:	3724      	adds	r7, #36	; 0x24
 800248e:	46bd      	mov	sp, r7
 8002490:	bd90      	pop	{r4, r7, pc}
 8002492:	bf00      	nop
 8002494:	200019f0 	.word	0x200019f0
 8002498:	200019fc 	.word	0x200019fc
 800249c:	20000000 	.word	0x20000000
 80024a0:	20000008 	.word	0x20000008
 80024a4:	20000494 	.word	0x20000494
 80024a8:	20000498 	.word	0x20000498

080024ac <handle_word>:
/*
 * Handle incoming word. Compile or interpreted the word, or pass it to a
 * deferred primitive if it requested a word from the input stream.
 */

static void handle_word(const char *buf) {
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b088      	sub	sp, #32
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
	zf_addr w, c = 0;
 80024b4:	2300      	movs	r3, #0
 80024b6:	60fb      	str	r3, [r7, #12]
	int found;

	/* If a word was requested by an earlier operation, resume with the new
	 * word */

	if (input_state == ZF_INPUT_PASS_WORD) {
 80024b8:	4b32      	ldr	r3, [pc, #200]	; (8002584 <handle_word+0xd8>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d106      	bne.n	80024ce <handle_word+0x22>
		input_state = ZF_INPUT_INTERPRET;
 80024c0:	4b30      	ldr	r3, [pc, #192]	; (8002584 <handle_word+0xd8>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	701a      	strb	r2, [r3, #0]
		run(buf);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f7ff fc8c 	bl	8001de4 <run>
 80024cc:	e056      	b.n	800257c <handle_word+0xd0>
		return;
	}

	/* Look up the word in the dictionary */

	found = find_word(buf, &w, &c);
 80024ce:	f107 020c 	add.w	r2, r7, #12
 80024d2:	f107 0310 	add.w	r3, r7, #16
 80024d6:	4619      	mov	r1, r3
 80024d8:	6878      	ldr	r0, [r7, #4]
 80024da:	f7ff fc13 	bl	8001d04 <find_word>
 80024de:	61f8      	str	r0, [r7, #28]

	if (found) {
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d039      	beq.n	800255a <handle_word+0xae>

		/* Word found: compile or execute, depending on flags and state */

		zf_cell d;
		int flags;
		dict_get_cell(w, &d);
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	f107 0208 	add.w	r2, r7, #8
 80024ec:	4611      	mov	r1, r2
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7ff fb71 	bl	8001bd6 <dict_get_cell>
		flags = d;
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	617b      	str	r3, [r7, #20]

		if (COMPILING&& (POSTPONE || !(flags & ZF_FLAG_IMMEDIATE))) {
 80024f8:	4b23      	ldr	r3, [pc, #140]	; (8002588 <handle_word+0xdc>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	330c      	adds	r3, #12
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d025      	beq.n	8002550 <handle_word+0xa4>
 8002504:	4b20      	ldr	r3, [pc, #128]	; (8002588 <handle_word+0xdc>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	3310      	adds	r3, #16
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d104      	bne.n	800251a <handle_word+0x6e>
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002516:	2b00      	cmp	r3, #0
 8002518:	d11a      	bne.n	8002550 <handle_word+0xa4>
			if(flags & ZF_FLAG_PRIM) {
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	f003 0320 	and.w	r3, r3, #32
 8002520:	2b00      	cmp	r3, #0
 8002522:	d00b      	beq.n	800253c <handle_word+0x90>
				dict_get_cell(c, &d);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f107 0208 	add.w	r2, r7, #8
 800252a:	4611      	mov	r1, r2
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff fb52 	bl	8001bd6 <dict_get_cell>
				dict_add_op(d);
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	4618      	mov	r0, r3
 8002536:	f7ff fb85 	bl	8001c44 <dict_add_op>
 800253a:	e003      	b.n	8002544 <handle_word+0x98>
			} else {
				dict_add_op(c);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	4618      	mov	r0, r3
 8002540:	f7ff fb80 	bl	8001c44 <dict_add_op>
			}
			POSTPONE = 0;
 8002544:	4b10      	ldr	r3, [pc, #64]	; (8002588 <handle_word+0xdc>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	3310      	adds	r3, #16
 800254a:	2200      	movs	r2, #0
 800254c:	601a      	str	r2, [r3, #0]
 800254e:	e015      	b.n	800257c <handle_word+0xd0>
		} else {
			execute(c);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	4618      	mov	r0, r3
 8002554:	f7ff fc86 	bl	8001e64 <execute>
 8002558:	e010      	b.n	800257c <handle_word+0xd0>
	} else {

		/* Word not found: try to convert to a number and compile or push, depending
		 * on state */

		zf_cell v = zf_host_parse_num(buf);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 f94e 	bl	80027fc <zf_host_parse_num>
 8002560:	61b8      	str	r0, [r7, #24]

		if(COMPILING) {
 8002562:	4b09      	ldr	r3, [pc, #36]	; (8002588 <handle_word+0xdc>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	330c      	adds	r3, #12
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <handle_word+0xca>
			dict_add_lit(v);
 800256e:	69b8      	ldr	r0, [r7, #24]
 8002570:	f7ff fb74 	bl	8001c5c <dict_add_lit>
 8002574:	e002      	b.n	800257c <handle_word+0xd0>
		} else {
			zf_push(v);
 8002576:	69b8      	ldr	r0, [r7, #24]
 8002578:	f7ff f8e8 	bl	800174c <zf_push>
		}
	}
}
 800257c:	3720      	adds	r7, #32
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	200019f0 	.word	0x200019f0
 8002588:	20000020 	.word	0x20000020

0800258c <handle_char>:
/*
 * Handle one character. Split into words to pass to handle_word(), or pass the
 * char to a deferred prim if it requested a character from the input stream
 */

static void handle_char(char c) {
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	4603      	mov	r3, r0
 8002594:	71fb      	strb	r3, [r7, #7]
	static char buf[32];
	static size_t len = 0;

	if (input_state == ZF_INPUT_PASS_CHAR) {
 8002596:	4b1c      	ldr	r3, [pc, #112]	; (8002608 <handle_char+0x7c>)
 8002598:	781b      	ldrb	r3, [r3, #0]
 800259a:	2b01      	cmp	r3, #1
 800259c:	d107      	bne.n	80025ae <handle_char+0x22>

		input_state = ZF_INPUT_INTERPRET;
 800259e:	4b1a      	ldr	r3, [pc, #104]	; (8002608 <handle_char+0x7c>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	701a      	strb	r2, [r3, #0]
		run(&c);
 80025a4:	1dfb      	adds	r3, r7, #7
 80025a6:	4618      	mov	r0, r3
 80025a8:	f7ff fc1c 	bl	8001de4 <run>
		if (len > 0) {
			len = 0;
			handle_word(buf);
		}
	}
}
 80025ac:	e028      	b.n	8002600 <handle_char+0x74>
	} else if (c != '\0' && !isspace(c)) {
 80025ae:	79fb      	ldrb	r3, [r7, #7]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d01a      	beq.n	80025ea <handle_char+0x5e>
 80025b4:	79fb      	ldrb	r3, [r7, #7]
 80025b6:	3301      	adds	r3, #1
 80025b8:	4a14      	ldr	r2, [pc, #80]	; (800260c <handle_char+0x80>)
 80025ba:	4413      	add	r3, r2
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	f003 0308 	and.w	r3, r3, #8
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d111      	bne.n	80025ea <handle_char+0x5e>
		if (len < sizeof(buf) - 1) {
 80025c6:	4b12      	ldr	r3, [pc, #72]	; (8002610 <handle_char+0x84>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2b1e      	cmp	r3, #30
 80025cc:	d818      	bhi.n	8002600 <handle_char+0x74>
			buf[len++] = c;
 80025ce:	4b10      	ldr	r3, [pc, #64]	; (8002610 <handle_char+0x84>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	1c5a      	adds	r2, r3, #1
 80025d4:	490e      	ldr	r1, [pc, #56]	; (8002610 <handle_char+0x84>)
 80025d6:	600a      	str	r2, [r1, #0]
 80025d8:	79f9      	ldrb	r1, [r7, #7]
 80025da:	4a0e      	ldr	r2, [pc, #56]	; (8002614 <handle_char+0x88>)
 80025dc:	54d1      	strb	r1, [r2, r3]
			buf[len] = '\0';
 80025de:	4b0c      	ldr	r3, [pc, #48]	; (8002610 <handle_char+0x84>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a0c      	ldr	r2, [pc, #48]	; (8002614 <handle_char+0x88>)
 80025e4:	2100      	movs	r1, #0
 80025e6:	54d1      	strb	r1, [r2, r3]
		if (len < sizeof(buf) - 1) {
 80025e8:	e00a      	b.n	8002600 <handle_char+0x74>
		if (len > 0) {
 80025ea:	4b09      	ldr	r3, [pc, #36]	; (8002610 <handle_char+0x84>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d006      	beq.n	8002600 <handle_char+0x74>
			len = 0;
 80025f2:	4b07      	ldr	r3, [pc, #28]	; (8002610 <handle_char+0x84>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
			handle_word(buf);
 80025f8:	4806      	ldr	r0, [pc, #24]	; (8002614 <handle_char+0x88>)
 80025fa:	f7ff ff57 	bl	80024ac <handle_word>
}
 80025fe:	e7ff      	b.n	8002600 <handle_char+0x74>
 8002600:	bf00      	nop
 8002602:	3708      	adds	r7, #8
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	200019f0 	.word	0x200019f0
 800260c:	080071c4 	.word	0x080071c4
 8002610:	20001a5c 	.word	0x20001a5c
 8002614:	20001a60 	.word	0x20001a60

08002618 <zf_init>:

/*
 * Initialisation
 */

void zf_init(int enable_trace) {
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
	HERE= ZF_USERVAR_COUNT * sizeof(zf_addr);
 8002620:	4b0e      	ldr	r3, [pc, #56]	; (800265c <zf_init+0x44>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2214      	movs	r2, #20
 8002626:	601a      	str	r2, [r3, #0]
	TRACE = enable_trace;
 8002628:	4b0c      	ldr	r3, [pc, #48]	; (800265c <zf_init+0x44>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	3308      	adds	r3, #8
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	601a      	str	r2, [r3, #0]
	LATEST = 0;
 8002632:	4b0a      	ldr	r3, [pc, #40]	; (800265c <zf_init+0x44>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	3304      	adds	r3, #4
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]
	dsp = 0;
 800263c:	4b08      	ldr	r3, [pc, #32]	; (8002660 <zf_init+0x48>)
 800263e:	2200      	movs	r2, #0
 8002640:	601a      	str	r2, [r3, #0]
	rsp = 0;
 8002642:	4b08      	ldr	r3, [pc, #32]	; (8002664 <zf_init+0x4c>)
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]
	COMPILING = 0;
 8002648:	4b04      	ldr	r3, [pc, #16]	; (800265c <zf_init+0x44>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	330c      	adds	r3, #12
 800264e:	2200      	movs	r2, #0
 8002650:	601a      	str	r2, [r3, #0]
}
 8002652:	bf00      	nop
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	bc80      	pop	{r7}
 800265a:	4770      	bx	lr
 800265c:	20000020 	.word	0x20000020
 8002660:	200019f4 	.word	0x200019f4
 8002664:	200019f8 	.word	0x200019f8

08002668 <add_prim>:
/*
 * Functions for bootstrapping the dictionary by adding all primitive ops and the
 * user variables.
 */

static void add_prim(const char *name, zf_prim op) {
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	460b      	mov	r3, r1
 8002672:	70fb      	strb	r3, [r7, #3]
	int imm = 0;
 8002674:	2300      	movs	r3, #0
 8002676:	60fb      	str	r3, [r7, #12]

	if (name[0] == '_') {
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	2b5f      	cmp	r3, #95	; 0x5f
 800267e:	d104      	bne.n	800268a <add_prim+0x22>
		name++;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	3301      	adds	r3, #1
 8002684:	607b      	str	r3, [r7, #4]
		imm = 1;
 8002686:	2301      	movs	r3, #1
 8002688:	60fb      	str	r3, [r7, #12]
	}

	create(name, ZF_FLAG_PRIM);
 800268a:	2120      	movs	r1, #32
 800268c:	6878      	ldr	r0, [r7, #4]
 800268e:	f7ff fb11 	bl	8001cb4 <create>
	dict_add_op(op);
 8002692:	78fb      	ldrb	r3, [r7, #3]
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff fad5 	bl	8001c44 <dict_add_op>
	dict_add_op(PRIM_EXIT);
 800269a:	2000      	movs	r0, #0
 800269c:	f7ff fad2 	bl	8001c44 <dict_add_op>
	if (imm)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <add_prim+0x42>
		make_immediate();
 80026a6:	f7ff fb7f 	bl	8001da8 <make_immediate>
}
 80026aa:	bf00      	nop
 80026ac:	3710      	adds	r7, #16
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <add_uservar>:

static void add_uservar(const char *name, zf_addr addr) {
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b082      	sub	sp, #8
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	6078      	str	r0, [r7, #4]
 80026ba:	6039      	str	r1, [r7, #0]
	create(name, 0);
 80026bc:	2100      	movs	r1, #0
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f7ff faf8 	bl	8001cb4 <create>
	dict_add_lit(addr);
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	4618      	mov	r0, r3
 80026c8:	f7ff fac8 	bl	8001c5c <dict_add_lit>
	dict_add_op(PRIM_EXIT);
 80026cc:	2000      	movs	r0, #0
 80026ce:	f7ff fab9 	bl	8001c44 <dict_add_op>
}
 80026d2:	bf00      	nop
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
	...

080026dc <zf_bootstrap>:

void zf_bootstrap(void) {
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0

	/* Add primitives and user variables to dictionary */

	zf_addr i = 0;
 80026e2:	2300      	movs	r3, #0
 80026e4:	607b      	str	r3, [r7, #4]
	const char *p;
	for (p = prim_names; *p; p += strlen(p) + 1) {
 80026e6:	4b1a      	ldr	r3, [pc, #104]	; (8002750 <zf_bootstrap+0x74>)
 80026e8:	603b      	str	r3, [r7, #0]
 80026ea:	e00f      	b.n	800270c <zf_bootstrap+0x30>
		add_prim(p, (zf_prim) i++);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	1c5a      	adds	r2, r3, #1
 80026f0:	607a      	str	r2, [r7, #4]
 80026f2:	b2db      	uxtb	r3, r3
 80026f4:	4619      	mov	r1, r3
 80026f6:	6838      	ldr	r0, [r7, #0]
 80026f8:	f7ff ffb6 	bl	8002668 <add_prim>
	for (p = prim_names; *p; p += strlen(p) + 1) {
 80026fc:	6838      	ldr	r0, [r7, #0]
 80026fe:	f7fd fd55 	bl	80001ac <strlen>
 8002702:	4603      	mov	r3, r0
 8002704:	3301      	adds	r3, #1
 8002706:	683a      	ldr	r2, [r7, #0]
 8002708:	4413      	add	r3, r2
 800270a:	603b      	str	r3, [r7, #0]
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d1eb      	bne.n	80026ec <zf_bootstrap+0x10>
	}

	i = 0;
 8002714:	2300      	movs	r3, #0
 8002716:	607b      	str	r3, [r7, #4]
	for (p = uservar_names; *p; p += strlen(p) + 1) {
 8002718:	4b0e      	ldr	r3, [pc, #56]	; (8002754 <zf_bootstrap+0x78>)
 800271a:	603b      	str	r3, [r7, #0]
 800271c:	e00e      	b.n	800273c <zf_bootstrap+0x60>
		add_uservar(p, i++);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	1c5a      	adds	r2, r3, #1
 8002722:	607a      	str	r2, [r7, #4]
 8002724:	4619      	mov	r1, r3
 8002726:	6838      	ldr	r0, [r7, #0]
 8002728:	f7ff ffc3 	bl	80026b2 <add_uservar>
	for (p = uservar_names; *p; p += strlen(p) + 1) {
 800272c:	6838      	ldr	r0, [r7, #0]
 800272e:	f7fd fd3d 	bl	80001ac <strlen>
 8002732:	4603      	mov	r3, r0
 8002734:	3301      	adds	r3, #1
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	4413      	add	r3, r2
 800273a:	603b      	str	r3, [r7, #0]
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d1ec      	bne.n	800271e <zf_bootstrap+0x42>
	}
}
 8002744:	bf00      	nop
 8002746:	bf00      	nop
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	08007110 	.word	0x08007110
 8002754:	080071a0 	.word	0x080071a0

08002758 <zf_eval>:

/*
 * Eval forth string
 */

zf_result zf_eval(const char *buf) {
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
	zf_result r = (zf_result) setjmp(jmpbuf);
 8002760:	4813      	ldr	r0, [pc, #76]	; (80027b0 <zf_eval+0x58>)
 8002762:	f7fd fd0b 	bl	800017c <setjmp>
 8002766:	4603      	mov	r3, r0
 8002768:	73fb      	strb	r3, [r7, #15]

	if (r == ZF_OK) {
 800276a:	7bfb      	ldrb	r3, [r7, #15]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d10e      	bne.n	800278e <zf_eval+0x36>
		for (;;) {
			handle_char(*buf);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	4618      	mov	r0, r3
 8002776:	f7ff ff09 	bl	800258c <handle_char>
			if (*buf == '\0') {
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <zf_eval+0x2e>
				return ZF_OK;
 8002782:	2300      	movs	r3, #0
 8002784:	e00f      	b.n	80027a6 <zf_eval+0x4e>
			}
			buf++;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	3301      	adds	r3, #1
 800278a:	607b      	str	r3, [r7, #4]
			handle_char(*buf);
 800278c:	e7f0      	b.n	8002770 <zf_eval+0x18>
		}
	} else {
		COMPILING= 0;
 800278e:	4b09      	ldr	r3, [pc, #36]	; (80027b4 <zf_eval+0x5c>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	330c      	adds	r3, #12
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]
		rsp = 0;
 8002798:	4b07      	ldr	r3, [pc, #28]	; (80027b8 <zf_eval+0x60>)
 800279a:	2200      	movs	r2, #0
 800279c:	601a      	str	r2, [r3, #0]
		dsp = 0;
 800279e:	4b07      	ldr	r3, [pc, #28]	; (80027bc <zf_eval+0x64>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]
		return r;
 80027a4:	7bfb      	ldrb	r3, [r7, #15]
	}
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	20001a00 	.word	0x20001a00
 80027b4:	20000020 	.word	0x20000020
 80027b8:	200019f8 	.word	0x200019f8
 80027bc:	200019f4 	.word	0x200019f4

080027c0 <init_interpreter>:
	}

	return result;
}

void init_interpreter() {
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
	zf_init(0); // We don't need tracing
 80027c4:	2000      	movs	r0, #0
 80027c6:	f7ff ff27 	bl	8002618 <zf_init>
	zf_bootstrap();
 80027ca:	f7ff ff87 	bl	80026dc <zf_bootstrap>

	zf_eval(std_lib);
 80027ce:	4b03      	ldr	r3, [pc, #12]	; (80027dc <init_interpreter+0x1c>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f7ff ffc0 	bl	8002758 <zf_eval>
}
 80027d8:	bf00      	nop
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	2000001c 	.word	0x2000001c

080027e0 <eval_cmd>:

int eval_cmd(char *cmd) {
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
	zf_result res = zf_eval(cmd);
 80027e8:	6878      	ldr	r0, [r7, #4]
 80027ea:	f7ff ffb5 	bl	8002758 <zf_eval>
 80027ee:	4603      	mov	r3, r0
 80027f0:	73fb      	strb	r3, [r7, #15]
	return res;
 80027f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3710      	adds	r7, #16
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}

080027fc <zf_host_parse_num>:

zf_cell zf_host_parse_num(const char *buf) {
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b086      	sub	sp, #24
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
	zf_cell v;
	int n = 0;
 8002804:	2300      	movs	r3, #0
 8002806:	60fb      	str	r3, [r7, #12]
	int r = sscanf(buf, "%li%n", &v, &n);
 8002808:	f107 030c 	add.w	r3, r7, #12
 800280c:	f107 0210 	add.w	r2, r7, #16
 8002810:	490b      	ldr	r1, [pc, #44]	; (8002840 <zf_host_parse_num+0x44>)
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f002 ff7e 	bl	8005714 <siscanf>
 8002818:	6178      	str	r0, [r7, #20]
	if (r == 0 || buf[n] != '\0') {
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d006      	beq.n	800282e <zf_host_parse_num+0x32>
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	461a      	mov	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	4413      	add	r3, r2
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d002      	beq.n	8002834 <zf_host_parse_num+0x38>
		zf_abort(ZF_ABORT_NOT_A_WORD);
 800282e:	2007      	movs	r0, #7
 8002830:	f7fe ff80 	bl	8001734 <zf_abort>
	}
	return v;
 8002834:	693b      	ldr	r3, [r7, #16]
}
 8002836:	4618      	mov	r0, r3
 8002838:	3718      	adds	r7, #24
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	08006ed8 	.word	0x08006ed8

08002844 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002844:	480c      	ldr	r0, [pc, #48]	; (8002878 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002846:	490d      	ldr	r1, [pc, #52]	; (800287c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002848:	4a0d      	ldr	r2, [pc, #52]	; (8002880 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800284a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800284c:	e002      	b.n	8002854 <LoopCopyDataInit>

0800284e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800284e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002850:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002852:	3304      	adds	r3, #4

08002854 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002854:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002856:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002858:	d3f9      	bcc.n	800284e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800285a:	4a0a      	ldr	r2, [pc, #40]	; (8002884 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800285c:	4c0a      	ldr	r4, [pc, #40]	; (8002888 <LoopFillZerobss+0x22>)
  movs r3, #0
 800285e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002860:	e001      	b.n	8002866 <LoopFillZerobss>

08002862 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002862:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002864:	3204      	adds	r2, #4

08002866 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002866:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002868:	d3fb      	bcc.n	8002862 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800286a:	f7fe ff5d 	bl	8001728 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800286e:	f002 fed3 	bl	8005618 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002872:	f7fd fe61 	bl	8000538 <main>
  bx lr
 8002876:	4770      	bx	lr
  ldr r0, =_sdata
 8002878:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800287c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8002880:	08007384 	.word	0x08007384
  ldr r2, =_sbss
 8002884:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8002888:	20001a94 	.word	0x20001a94

0800288c <COMP_ACQ_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800288c:	e7fe      	b.n	800288c <COMP_ACQ_IRQHandler>

0800288e <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800288e:	b580      	push	{r7, lr}
 8002890:	b082      	sub	sp, #8
 8002892:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002894:	2300      	movs	r3, #0
 8002896:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002898:	2003      	movs	r0, #3
 800289a:	f000 fe79 	bl	8003590 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800289e:	2000      	movs	r0, #0
 80028a0:	f000 f80e 	bl	80028c0 <HAL_InitTick>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d002      	beq.n	80028b0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	71fb      	strb	r3, [r7, #7]
 80028ae:	e001      	b.n	80028b4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80028b0:	f7fe fd42 	bl	8001338 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80028b4:	79fb      	ldrb	r3, [r7, #7]
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
	...

080028c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80028c8:	2300      	movs	r3, #0
 80028ca:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80028cc:	4b16      	ldr	r3, [pc, #88]	; (8002928 <HAL_InitTick+0x68>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d022      	beq.n	800291a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80028d4:	4b15      	ldr	r3, [pc, #84]	; (800292c <HAL_InitTick+0x6c>)
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	4b13      	ldr	r3, [pc, #76]	; (8002928 <HAL_InitTick+0x68>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80028e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80028e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e8:	4618      	mov	r0, r3
 80028ea:	f000 fe86 	bl	80035fa <HAL_SYSTICK_Config>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d10f      	bne.n	8002914 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2b0f      	cmp	r3, #15
 80028f8:	d809      	bhi.n	800290e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028fa:	2200      	movs	r2, #0
 80028fc:	6879      	ldr	r1, [r7, #4]
 80028fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002902:	f000 fe50 	bl	80035a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002906:	4a0a      	ldr	r2, [pc, #40]	; (8002930 <HAL_InitTick+0x70>)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6013      	str	r3, [r2, #0]
 800290c:	e007      	b.n	800291e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	73fb      	strb	r3, [r7, #15]
 8002912:	e004      	b.n	800291e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	73fb      	strb	r3, [r7, #15]
 8002918:	e001      	b.n	800291e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800291e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002920:	4618      	mov	r0, r3
 8002922:	3710      	adds	r7, #16
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	20000028 	.word	0x20000028
 800292c:	20000018 	.word	0x20000018
 8002930:	20000024 	.word	0x20000024

08002934 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002938:	4b05      	ldr	r3, [pc, #20]	; (8002950 <HAL_IncTick+0x1c>)
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	4b05      	ldr	r3, [pc, #20]	; (8002954 <HAL_IncTick+0x20>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4413      	add	r3, r2
 8002942:	4a03      	ldr	r2, [pc, #12]	; (8002950 <HAL_IncTick+0x1c>)
 8002944:	6013      	str	r3, [r2, #0]
}
 8002946:	bf00      	nop
 8002948:	46bd      	mov	sp, r7
 800294a:	bc80      	pop	{r7}
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	20001a80 	.word	0x20001a80
 8002954:	20000028 	.word	0x20000028

08002958 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
  return uwTick;
 800295c:	4b02      	ldr	r3, [pc, #8]	; (8002968 <HAL_GetTick+0x10>)
 800295e:	681b      	ldr	r3, [r3, #0]
}
 8002960:	4618      	mov	r0, r3
 8002962:	46bd      	mov	sp, r7
 8002964:	bc80      	pop	{r7}
 8002966:	4770      	bx	lr
 8002968:	20001a80 	.word	0x20001a80

0800296c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b08e      	sub	sp, #56	; 0x38
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002974:	2300      	movs	r3, #0
 8002976:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 800297a:	2300      	movs	r3, #0
 800297c:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 800297e:	2300      	movs	r3, #0
 8002980:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d101      	bne.n	800298c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e127      	b.n	8002bdc <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	691b      	ldr	r3, [r3, #16]
 8002990:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002996:	2b00      	cmp	r3, #0
 8002998:	d115      	bne.n	80029c6 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029a8:	4b8e      	ldr	r3, [pc, #568]	; (8002be4 <HAL_ADC_Init+0x278>)
 80029aa:	6a1b      	ldr	r3, [r3, #32]
 80029ac:	4a8d      	ldr	r2, [pc, #564]	; (8002be4 <HAL_ADC_Init+0x278>)
 80029ae:	f043 0301 	orr.w	r3, r3, #1
 80029b2:	6213      	str	r3, [r2, #32]
 80029b4:	4b8b      	ldr	r3, [pc, #556]	; (8002be4 <HAL_ADC_Init+0x278>)
 80029b6:	6a1b      	ldr	r3, [r3, #32]
 80029b8:	f003 0301 	and.w	r3, r3, #1
 80029bc:	60bb      	str	r3, [r7, #8]
 80029be:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f7fe fce7 	bl	8001394 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ca:	f003 0310 	and.w	r3, r3, #16
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	f040 80ff 	bne.w	8002bd2 <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029d8:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80029dc:	f023 0302 	bic.w	r3, r3, #2
 80029e0:	f043 0202 	orr.w	r2, r3, #2
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 80029e8:	4b7f      	ldr	r3, [pc, #508]	; (8002be8 <HAL_ADC_Init+0x27c>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	497c      	ldr	r1, [pc, #496]	; (8002be8 <HAL_ADC_Init+0x27c>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8002a02:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a10:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a12:	6a3b      	ldr	r3, [r7, #32]
 8002a14:	fa93 f3a3 	rbit	r3, r3
 8002a18:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	fab3 f383 	clz	r3, r3
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 8002a26:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002a2c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a34:	4619      	mov	r1, r3
 8002a36:	2302      	movs	r3, #2
 8002a38:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a3c:	fa93 f3a3 	rbit	r3, r3
 8002a40:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a44:	fab3 f383 	clz	r3, r3
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 8002a4e:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8002a50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a52:	4313      	orrs	r3, r2
 8002a54:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a5a:	2b10      	cmp	r3, #16
 8002a5c:	d007      	beq.n	8002a6e <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8002a66:	4313      	orrs	r3, r2
 8002a68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a78:	2b40      	cmp	r3, #64	; 0x40
 8002a7a:	d04f      	beq.n	8002b1c <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a82:	4313      	orrs	r3, r2
 8002a84:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8002a8e:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8002a90:	687a      	ldr	r2, [r7, #4]
 8002a92:	6912      	ldr	r2, [r2, #16]
 8002a94:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8002a98:	d003      	beq.n	8002aa2 <HAL_ADC_Init+0x136>
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	6912      	ldr	r2, [r2, #16]
 8002a9e:	2a01      	cmp	r2, #1
 8002aa0:	d102      	bne.n	8002aa8 <HAL_ADC_Init+0x13c>
 8002aa2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002aa6:	e000      	b.n	8002aaa <HAL_ADC_Init+0x13e>
 8002aa8:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8002aaa:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8002aac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d125      	bne.n	8002b08 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d114      	bne.n	8002af0 <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aca:	3b01      	subs	r3, #1
 8002acc:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 8002ad0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	fa92 f2a2 	rbit	r2, r2
 8002ad8:	617a      	str	r2, [r7, #20]
  return result;
 8002ada:	697a      	ldr	r2, [r7, #20]
 8002adc:	fab2 f282 	clz	r2, r2
 8002ae0:	b2d2      	uxtb	r2, r2
 8002ae2:	4093      	lsls	r3, r2
 8002ae4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ae8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002aea:	4313      	orrs	r3, r2
 8002aec:	633b      	str	r3, [r7, #48]	; 0x30
 8002aee:	e00b      	b.n	8002b08 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002af4:	f043 0220 	orr.w	r2, r3, #32
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b00:	f043 0201 	orr.w	r2, r3, #1
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	685a      	ldr	r2, [r3, #4]
 8002b0e:	4b37      	ldr	r3, [pc, #220]	; (8002bec <HAL_ADC_Init+0x280>)
 8002b10:	4013      	ands	r3, r2
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	6812      	ldr	r2, [r2, #0]
 8002b16:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002b18:	430b      	orrs	r3, r1
 8002b1a:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	689a      	ldr	r2, [r3, #8]
 8002b22:	4b33      	ldr	r3, [pc, #204]	; (8002bf0 <HAL_ADC_Init+0x284>)
 8002b24:	4013      	ands	r3, r2
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	6812      	ldr	r2, [r2, #0]
 8002b2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002b2c:	430b      	orrs	r3, r1
 8002b2e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b38:	d003      	beq.n	8002b42 <HAL_ADC_Init+0x1d6>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d119      	bne.n	8002b76 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b48:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b50:	3b01      	subs	r3, #1
 8002b52:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8002b56:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b58:	693a      	ldr	r2, [r7, #16]
 8002b5a:	fa92 f2a2 	rbit	r2, r2
 8002b5e:	60fa      	str	r2, [r7, #12]
  return result;
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	fab2 f282 	clz	r2, r2
 8002b66:	b2d2      	uxtb	r2, r2
 8002b68:	fa03 f202 	lsl.w	r2, r3, r2
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	430a      	orrs	r2, r1
 8002b72:	631a      	str	r2, [r3, #48]	; 0x30
 8002b74:	e007      	b.n	8002b86 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8002b84:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	689a      	ldr	r2, [r3, #8]
 8002b8c:	4b19      	ldr	r3, [pc, #100]	; (8002bf4 <HAL_ADC_Init+0x288>)
 8002b8e:	4013      	ands	r3, r2
 8002b90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d10b      	bne.n	8002bae <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ba0:	f023 0303 	bic.w	r3, r3, #3
 8002ba4:	f043 0201 	orr.w	r2, r3, #1
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	64da      	str	r2, [r3, #76]	; 0x4c
 8002bac:	e014      	b.n	8002bd8 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bb2:	f023 0312 	bic.w	r3, r3, #18
 8002bb6:	f043 0210 	orr.w	r2, r3, #16
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bc2:	f043 0201 	orr.w	r2, r3, #1
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002bd0:	e002      	b.n	8002bd8 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002bd8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3738      	adds	r7, #56	; 0x38
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	40023800 	.word	0x40023800
 8002be8:	40012700 	.word	0x40012700
 8002bec:	fcfc16ff 	.word	0xfcfc16ff
 8002bf0:	c0fff189 	.word	0xc0fff189
 8002bf4:	bf80fffe 	.word	0xbf80fffe

08002bf8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b086      	sub	sp, #24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c04:	2300      	movs	r3, #0
 8002c06:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d101      	bne.n	8002c16 <HAL_ADC_Start_DMA+0x1e>
 8002c12:	2302      	movs	r3, #2
 8002c14:	e074      	b.n	8002d00 <HAL_ADC_Start_DMA+0x108>
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	f000 fb08 	bl	8003234 <ADC_Enable>
 8002c24:	4603      	mov	r3, r0
 8002c26:	75fb      	strb	r3, [r7, #23]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002c28:	7dfb      	ldrb	r3, [r7, #23]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d167      	bne.n	8002cfe <HAL_ADC_Start_DMA+0x106>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c32:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002c36:	f023 0301 	bic.w	r3, r3, #1
 8002c3a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d007      	beq.n	8002c60 <HAL_ADC_Start_DMA+0x68>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c54:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002c58:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c64:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c6c:	d106      	bne.n	8002c7c <HAL_ADC_Start_DMA+0x84>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c72:	f023 0206 	bic.w	r2, r3, #6
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	651a      	str	r2, [r3, #80]	; 0x50
 8002c7a:	e002      	b.n	8002c82 <HAL_ADC_Start_DMA+0x8a>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c8e:	4a1e      	ldr	r2, [pc, #120]	; (8002d08 <HAL_ADC_Start_DMA+0x110>)
 8002c90:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c96:	4a1d      	ldr	r2, [pc, #116]	; (8002d0c <HAL_ADC_Start_DMA+0x114>)
 8002c98:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9e:	4a1c      	ldr	r2, [pc, #112]	; (8002d10 <HAL_ADC_Start_DMA+0x118>)
 8002ca0:	631a      	str	r2, [r3, #48]	; 0x30
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002caa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	685a      	ldr	r2, [r3, #4]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002cba:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	689a      	ldr	r2, [r3, #8]
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cca:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6c58      	ldr	r0, [r3, #68]	; 0x44
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	3358      	adds	r3, #88	; 0x58
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	68ba      	ldr	r2, [r7, #8]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f000 fd0e 	bl	80036fc <HAL_DMA_Start_IT>
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d107      	bne.n	8002cfe <HAL_ADC_Start_DMA+0x106>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	689a      	ldr	r2, [r3, #8]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002cfc:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002cfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3718      	adds	r7, #24
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	080032ed 	.word	0x080032ed
 8002d0c:	08003395 	.word	0x08003395
 8002d10:	080033b1 	.word	0x080033b1

08002d14 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f003 0320 	and.w	r3, r3, #32
 8002d26:	2b20      	cmp	r3, #32
 8002d28:	d14e      	bne.n	8002dc8 <HAL_ADC_IRQHandler+0xb4>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d147      	bne.n	8002dc8 <HAL_ADC_IRQHandler+0xb4>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d3c:	f003 0310 	and.w	r3, r3, #16
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d105      	bne.n	8002d50 <HAL_ADC_IRQHandler+0x3c>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d48:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	64da      	str	r2, [r3, #76]	; 0x4c
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32L1, there is no independent flag of end of sequence.   */
      /*       The test of scan sequence on going is done either with scan    */
      /*       sequence disabled or with end of conversion flag set to        */
      /*       of end of sequence.                                            */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d12c      	bne.n	8002db8 <HAL_ADC_IRQHandler+0xa4>
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d127      	bne.n	8002db8 <HAL_ADC_IRQHandler+0xa4>
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6e:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
         (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d006      	beq.n	8002d84 <HAL_ADC_IRQHandler+0x70>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d119      	bne.n	8002db8 <HAL_ADC_IRQHandler+0xa4>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	685a      	ldr	r2, [r3, #4]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f022 0220 	bic.w	r2, r2, #32
 8002d92:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d98:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	64da      	str	r2, [r3, #76]	; 0x4c
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002da4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d105      	bne.n	8002db8 <HAL_ADC_IRQHandler+0xa4>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002db0:	f043 0201 	orr.w	r2, r3, #1
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	64da      	str	r2, [r3, #76]	; 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f000 f8ab 	bl	8002f14 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f06f 0212 	mvn.w	r2, #18
 8002dc6:	601a      	str	r2, [r3, #0]
    }
  }

  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dd2:	2b80      	cmp	r3, #128	; 0x80
 8002dd4:	d15c      	bne.n	8002e90 <HAL_ADC_IRQHandler+0x17c>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0304 	and.w	r3, r3, #4
 8002de0:	2b04      	cmp	r3, #4
 8002de2:	d155      	bne.n	8002e90 <HAL_ADC_IRQHandler+0x17c>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002de8:	f003 0310 	and.w	r3, r3, #16
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d105      	bne.n	8002dfc <HAL_ADC_IRQHandler+0xe8>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002df4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Determine whether any further conversion upcoming on group injected  */
      /* by external trigger, scan sequence on going or by automatic injected */
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d13a      	bne.n	8002e80 <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e10:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d006      	beq.n	8002e26 <HAL_ADC_IRQHandler+0x112>
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d12c      	bne.n	8002e80 <HAL_ADC_IRQHandler+0x16c>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d125      	bne.n	8002e80 <HAL_ADC_IRQHandler+0x16c>
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d11e      	bne.n	8002e80 <HAL_ADC_IRQHandler+0x16c>
          (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d119      	bne.n	8002e80 <HAL_ADC_IRQHandler+0x16c>
      {
        /* Disable ADC end of single conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	685a      	ldr	r2, [r3, #4]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002e5a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e60:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	64da      	str	r2, [r3, #76]	; 0x4c

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d105      	bne.n	8002e80 <HAL_ADC_IRQHandler+0x16c>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e78:	f043 0201 	orr.w	r2, r3, #1
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	64da      	str	r2, [r3, #76]	; 0x4c
      }

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f000 faaf 	bl	80033e4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f06f 020c 	mvn.w	r2, #12
 8002e8e:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e9a:	2b40      	cmp	r3, #64	; 0x40
 8002e9c:	d114      	bne.n	8002ec8 <HAL_ADC_IRQHandler+0x1b4>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0301 	and.w	r3, r3, #1
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d10d      	bne.n	8002ec8 <HAL_ADC_IRQHandler+0x1b4>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eb0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	64da      	str	r2, [r3, #76]	; 0x4c
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f000 f83d 	bl	8002f38 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f06f 0201 	mvn.w	r2, #1
 8002ec6:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check Overrun flag ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR))
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ed2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ed6:	d119      	bne.n	8002f0c <HAL_ADC_IRQHandler+0x1f8>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0320 	and.w	r3, r3, #32
 8002ee2:	2b20      	cmp	r3, #32
 8002ee4:	d112      	bne.n	8002f0c <HAL_ADC_IRQHandler+0x1f8>
      /* Note: On STM32L1, ADC overrun can be set through other parameters    */
      /*       refer to description of parameter "EOCSelection" for more      */
      /*       details.                                                       */
      
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002eea:	f043 0202 	orr.w	r2, r3, #2
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f06f 0220 	mvn.w	r2, #32
 8002efa:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f000 f824 	bl	8002f4a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the Overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f06f 0220 	mvn.w	r2, #32
 8002f0a:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002f0c:	bf00      	nop
 8002f0e:	3708      	adds	r7, #8
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002f1c:	bf00      	nop
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bc80      	pop	{r7}
 8002f24:	4770      	bx	lr

08002f26 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002f26:	b480      	push	{r7}
 8002f28:	b083      	sub	sp, #12
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002f2e:	bf00      	nop
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bc80      	pop	{r7}
 8002f36:	4770      	bx	lr

08002f38 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b083      	sub	sp, #12
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002f40:	bf00      	nop
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bc80      	pop	{r7}
 8002f48:	4770      	bx	lr

08002f4a <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	b083      	sub	sp, #12
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002f52:	bf00      	nop
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bc80      	pop	{r7}
 8002f5a:	4770      	bx	lr

08002f5c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b085      	sub	sp, #20
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f66:	2300      	movs	r3, #0
 8002f68:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d101      	bne.n	8002f7c <HAL_ADC_ConfigChannel+0x20>
 8002f78:	2302      	movs	r3, #2
 8002f7a:	e14f      	b.n	800321c <HAL_ADC_ConfigChannel+0x2c0>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	2b06      	cmp	r3, #6
 8002f8a:	d81c      	bhi.n	8002fc6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	685a      	ldr	r2, [r3, #4]
 8002f96:	4613      	mov	r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	4413      	add	r3, r2
 8002f9c:	3b05      	subs	r3, #5
 8002f9e:	221f      	movs	r2, #31
 8002fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa4:	43db      	mvns	r3, r3
 8002fa6:	4019      	ands	r1, r3
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	6818      	ldr	r0, [r3, #0]
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	685a      	ldr	r2, [r3, #4]
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	4413      	add	r3, r2
 8002fb6:	3b05      	subs	r3, #5
 8002fb8:	fa00 f203 	lsl.w	r2, r0, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	641a      	str	r2, [r3, #64]	; 0x40
 8002fc4:	e07e      	b.n	80030c4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	2b0c      	cmp	r3, #12
 8002fcc:	d81c      	bhi.n	8003008 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	685a      	ldr	r2, [r3, #4]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	4413      	add	r3, r2
 8002fde:	3b23      	subs	r3, #35	; 0x23
 8002fe0:	221f      	movs	r2, #31
 8002fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe6:	43db      	mvns	r3, r3
 8002fe8:	4019      	ands	r1, r3
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	6818      	ldr	r0, [r3, #0]
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	685a      	ldr	r2, [r3, #4]
 8002ff2:	4613      	mov	r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	4413      	add	r3, r2
 8002ff8:	3b23      	subs	r3, #35	; 0x23
 8002ffa:	fa00 f203 	lsl.w	r2, r0, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	430a      	orrs	r2, r1
 8003004:	63da      	str	r2, [r3, #60]	; 0x3c
 8003006:	e05d      	b.n	80030c4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	2b12      	cmp	r3, #18
 800300e:	d81c      	bhi.n	800304a <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	685a      	ldr	r2, [r3, #4]
 800301a:	4613      	mov	r3, r2
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	4413      	add	r3, r2
 8003020:	3b41      	subs	r3, #65	; 0x41
 8003022:	221f      	movs	r2, #31
 8003024:	fa02 f303 	lsl.w	r3, r2, r3
 8003028:	43db      	mvns	r3, r3
 800302a:	4019      	ands	r1, r3
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	6818      	ldr	r0, [r3, #0]
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685a      	ldr	r2, [r3, #4]
 8003034:	4613      	mov	r3, r2
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	4413      	add	r3, r2
 800303a:	3b41      	subs	r3, #65	; 0x41
 800303c:	fa00 f203 	lsl.w	r2, r0, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	430a      	orrs	r2, r1
 8003046:	639a      	str	r2, [r3, #56]	; 0x38
 8003048:	e03c      	b.n	80030c4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	2b18      	cmp	r3, #24
 8003050:	d81c      	bhi.n	800308c <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685a      	ldr	r2, [r3, #4]
 800305c:	4613      	mov	r3, r2
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	4413      	add	r3, r2
 8003062:	3b5f      	subs	r3, #95	; 0x5f
 8003064:	221f      	movs	r2, #31
 8003066:	fa02 f303 	lsl.w	r3, r2, r3
 800306a:	43db      	mvns	r3, r3
 800306c:	4019      	ands	r1, r3
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	6818      	ldr	r0, [r3, #0]
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	685a      	ldr	r2, [r3, #4]
 8003076:	4613      	mov	r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	4413      	add	r3, r2
 800307c:	3b5f      	subs	r3, #95	; 0x5f
 800307e:	fa00 f203 	lsl.w	r2, r0, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	430a      	orrs	r2, r1
 8003088:	635a      	str	r2, [r3, #52]	; 0x34
 800308a:	e01b      	b.n	80030c4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	685a      	ldr	r2, [r3, #4]
 8003096:	4613      	mov	r3, r2
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	4413      	add	r3, r2
 800309c:	3b7d      	subs	r3, #125	; 0x7d
 800309e:	221f      	movs	r2, #31
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	43db      	mvns	r3, r3
 80030a6:	4019      	ands	r1, r3
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	6818      	ldr	r0, [r3, #0]
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685a      	ldr	r2, [r3, #4]
 80030b0:	4613      	mov	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	4413      	add	r3, r2
 80030b6:	3b7d      	subs	r3, #125	; 0x7d
 80030b8:	fa00 f203 	lsl.w	r2, r0, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	430a      	orrs	r2, r1
 80030c2:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2b09      	cmp	r3, #9
 80030ca:	d81a      	bhi.n	8003102 <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	6959      	ldr	r1, [r3, #20]
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	681a      	ldr	r2, [r3, #0]
 80030d6:	4613      	mov	r3, r2
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	4413      	add	r3, r2
 80030dc:	2207      	movs	r2, #7
 80030de:	fa02 f303 	lsl.w	r3, r2, r3
 80030e2:	43db      	mvns	r3, r3
 80030e4:	4019      	ands	r1, r3
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	6898      	ldr	r0, [r3, #8]
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	4613      	mov	r3, r2
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	4413      	add	r3, r2
 80030f4:	fa00 f203 	lsl.w	r2, r0, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	430a      	orrs	r2, r1
 80030fe:	615a      	str	r2, [r3, #20]
 8003100:	e05d      	b.n	80031be <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	2b13      	cmp	r3, #19
 8003108:	d81c      	bhi.n	8003144 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	6919      	ldr	r1, [r3, #16]
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	4613      	mov	r3, r2
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	4413      	add	r3, r2
 800311a:	3b1e      	subs	r3, #30
 800311c:	2207      	movs	r2, #7
 800311e:	fa02 f303 	lsl.w	r3, r2, r3
 8003122:	43db      	mvns	r3, r3
 8003124:	4019      	ands	r1, r3
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	6898      	ldr	r0, [r3, #8]
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	4613      	mov	r3, r2
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	4413      	add	r3, r2
 8003134:	3b1e      	subs	r3, #30
 8003136:	fa00 f203 	lsl.w	r2, r0, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	430a      	orrs	r2, r1
 8003140:	611a      	str	r2, [r3, #16]
 8003142:	e03c      	b.n	80031be <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	2b1d      	cmp	r3, #29
 800314a:	d81c      	bhi.n	8003186 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68d9      	ldr	r1, [r3, #12]
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	681a      	ldr	r2, [r3, #0]
 8003156:	4613      	mov	r3, r2
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	4413      	add	r3, r2
 800315c:	3b3c      	subs	r3, #60	; 0x3c
 800315e:	2207      	movs	r2, #7
 8003160:	fa02 f303 	lsl.w	r3, r2, r3
 8003164:	43db      	mvns	r3, r3
 8003166:	4019      	ands	r1, r3
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	6898      	ldr	r0, [r3, #8]
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	4613      	mov	r3, r2
 8003172:	005b      	lsls	r3, r3, #1
 8003174:	4413      	add	r3, r2
 8003176:	3b3c      	subs	r3, #60	; 0x3c
 8003178:	fa00 f203 	lsl.w	r2, r0, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	430a      	orrs	r2, r1
 8003182:	60da      	str	r2, [r3, #12]
 8003184:	e01b      	b.n	80031be <HAL_ADC_ConfigChannel+0x262>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	4613      	mov	r3, r2
 8003192:	005b      	lsls	r3, r3, #1
 8003194:	4413      	add	r3, r2
 8003196:	3b5a      	subs	r3, #90	; 0x5a
 8003198:	2207      	movs	r2, #7
 800319a:	fa02 f303 	lsl.w	r3, r2, r3
 800319e:	43db      	mvns	r3, r3
 80031a0:	4019      	ands	r1, r3
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	6898      	ldr	r0, [r3, #8]
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	4613      	mov	r3, r2
 80031ac:	005b      	lsls	r3, r3, #1
 80031ae:	4413      	add	r3, r2
 80031b0:	3b5a      	subs	r3, #90	; 0x5a
 80031b2:	fa00 f203 	lsl.w	r2, r0, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	430a      	orrs	r2, r1
 80031bc:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2b10      	cmp	r3, #16
 80031c4:	d003      	beq.n	80031ce <HAL_ADC_ConfigChannel+0x272>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80031ca:	2b11      	cmp	r3, #17
 80031cc:	d121      	bne.n	8003212 <HAL_ADC_ConfigChannel+0x2b6>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 80031ce:	4b16      	ldr	r3, [pc, #88]	; (8003228 <HAL_ADC_ConfigChannel+0x2cc>)
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d11b      	bne.n	8003212 <HAL_ADC_ConfigChannel+0x2b6>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 80031da:	4b13      	ldr	r3, [pc, #76]	; (8003228 <HAL_ADC_ConfigChannel+0x2cc>)
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	4a12      	ldr	r2, [pc, #72]	; (8003228 <HAL_ADC_ConfigChannel+0x2cc>)
 80031e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80031e4:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	2b10      	cmp	r3, #16
 80031ec:	d111      	bne.n	8003212 <HAL_ADC_ConfigChannel+0x2b6>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80031ee:	4b0f      	ldr	r3, [pc, #60]	; (800322c <HAL_ADC_ConfigChannel+0x2d0>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a0f      	ldr	r2, [pc, #60]	; (8003230 <HAL_ADC_ConfigChannel+0x2d4>)
 80031f4:	fba2 2303 	umull	r2, r3, r2, r3
 80031f8:	0c9a      	lsrs	r2, r3, #18
 80031fa:	4613      	mov	r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	4413      	add	r3, r2
 8003200:	005b      	lsls	r3, r3, #1
 8003202:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8003204:	e002      	b.n	800320c <HAL_ADC_ConfigChannel+0x2b0>
          {
            wait_loop_index--;
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	3b01      	subs	r3, #1
 800320a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1f9      	bne.n	8003206 <HAL_ADC_ConfigChannel+0x2aa>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2200      	movs	r2, #0
 8003216:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 800321a:	7bfb      	ldrb	r3, [r7, #15]
}
 800321c:	4618      	mov	r0, r3
 800321e:	3714      	adds	r7, #20
 8003220:	46bd      	mov	sp, r7
 8003222:	bc80      	pop	{r7}
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	40012700 	.word	0x40012700
 800322c:	20000018 	.word	0x20000018
 8003230:	431bde83 	.word	0x431bde83

08003234 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800323c:	2300      	movs	r3, #0
 800323e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 8003240:	2300      	movs	r3, #0
 8003242:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800324e:	2b40      	cmp	r3, #64	; 0x40
 8003250:	d043      	beq.n	80032da <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	689a      	ldr	r2, [r3, #8]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f042 0201 	orr.w	r2, r2, #1
 8003260:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8003262:	4b20      	ldr	r3, [pc, #128]	; (80032e4 <ADC_Enable+0xb0>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a20      	ldr	r2, [pc, #128]	; (80032e8 <ADC_Enable+0xb4>)
 8003268:	fba2 2303 	umull	r2, r3, r2, r3
 800326c:	0c9a      	lsrs	r2, r3, #18
 800326e:	4613      	mov	r3, r2
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	4413      	add	r3, r2
 8003274:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8003276:	e002      	b.n	800327e <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	3b01      	subs	r3, #1
 800327c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d1f9      	bne.n	8003278 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 8003284:	f7ff fb68 	bl	8002958 <HAL_GetTick>
 8003288:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 800328a:	e01f      	b.n	80032cc <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 800328c:	f7ff fb64 	bl	8002958 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b02      	cmp	r3, #2
 8003298:	d918      	bls.n	80032cc <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a4:	2b40      	cmp	r3, #64	; 0x40
 80032a6:	d011      	beq.n	80032cc <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032ac:	f043 0210 	orr.w	r2, r3, #16
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032b8:	f043 0201 	orr.w	r2, r3, #1
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	651a      	str	r2, [r3, #80]	; 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	e007      	b.n	80032dc <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032d6:	2b40      	cmp	r3, #64	; 0x40
 80032d8:	d1d8      	bne.n	800328c <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3710      	adds	r7, #16
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	20000018 	.word	0x20000018
 80032e8:	431bde83 	.word	0x431bde83

080032ec <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032fe:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003302:	2b00      	cmp	r3, #0
 8003304:	d13d      	bne.n	8003382 <ADC_DMAConvCplt+0x96>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800330a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	64da      	str	r2, [r3, #76]	; 0x4c
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32L1, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d12c      	bne.n	800337a <ADC_DMAConvCplt+0x8e>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003326:	2b00      	cmp	r3, #0
 8003328:	d127      	bne.n	800337a <ADC_DMAConvCplt+0x8e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003330:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003334:	2b00      	cmp	r3, #0
 8003336:	d006      	beq.n	8003346 <ADC_DMAConvCplt+0x5a>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003342:	2b00      	cmp	r3, #0
 8003344:	d119      	bne.n	800337a <ADC_DMAConvCplt+0x8e>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	685a      	ldr	r2, [r3, #4]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f022 0220 	bic.w	r2, r2, #32
 8003354:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800335a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	64da      	str	r2, [r3, #76]	; 0x4c
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003366:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d105      	bne.n	800337a <ADC_DMAConvCplt+0x8e>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003372:	f043 0201 	orr.w	r2, r3, #1
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800337a:	68f8      	ldr	r0, [r7, #12]
 800337c:	f7ff fdca 	bl	8002f14 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003380:	e004      	b.n	800338c <ADC_DMAConvCplt+0xa0>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	4798      	blx	r3
}
 800338c:	bf00      	nop
 800338e:	3710      	adds	r7, #16
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a0:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80033a2:	68f8      	ldr	r0, [r7, #12]
 80033a4:	f7ff fdbf 	bl	8002f26 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80033a8:	bf00      	nop
 80033aa:	3710      	adds	r7, #16
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033bc:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033ce:	f043 0204 	orr.w	r2, r3, #4
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	f7ff fdb7 	bl	8002f4a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80033dc:	bf00      	nop
 80033de:	3710      	adds	r7, #16
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bc80      	pop	{r7}
 80033f4:	4770      	bx	lr
	...

080033f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b085      	sub	sp, #20
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	f003 0307 	and.w	r3, r3, #7
 8003406:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003408:	4b0c      	ldr	r3, [pc, #48]	; (800343c <__NVIC_SetPriorityGrouping+0x44>)
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800340e:	68ba      	ldr	r2, [r7, #8]
 8003410:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003414:	4013      	ands	r3, r2
 8003416:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003420:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003424:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003428:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800342a:	4a04      	ldr	r2, [pc, #16]	; (800343c <__NVIC_SetPriorityGrouping+0x44>)
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	60d3      	str	r3, [r2, #12]
}
 8003430:	bf00      	nop
 8003432:	3714      	adds	r7, #20
 8003434:	46bd      	mov	sp, r7
 8003436:	bc80      	pop	{r7}
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	e000ed00 	.word	0xe000ed00

08003440 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003440:	b480      	push	{r7}
 8003442:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003444:	4b04      	ldr	r3, [pc, #16]	; (8003458 <__NVIC_GetPriorityGrouping+0x18>)
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	0a1b      	lsrs	r3, r3, #8
 800344a:	f003 0307 	and.w	r3, r3, #7
}
 800344e:	4618      	mov	r0, r3
 8003450:	46bd      	mov	sp, r7
 8003452:	bc80      	pop	{r7}
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	e000ed00 	.word	0xe000ed00

0800345c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	4603      	mov	r3, r0
 8003464:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800346a:	2b00      	cmp	r3, #0
 800346c:	db0b      	blt.n	8003486 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800346e:	79fb      	ldrb	r3, [r7, #7]
 8003470:	f003 021f 	and.w	r2, r3, #31
 8003474:	4906      	ldr	r1, [pc, #24]	; (8003490 <__NVIC_EnableIRQ+0x34>)
 8003476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800347a:	095b      	lsrs	r3, r3, #5
 800347c:	2001      	movs	r0, #1
 800347e:	fa00 f202 	lsl.w	r2, r0, r2
 8003482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003486:	bf00      	nop
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	bc80      	pop	{r7}
 800348e:	4770      	bx	lr
 8003490:	e000e100 	.word	0xe000e100

08003494 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	4603      	mov	r3, r0
 800349c:	6039      	str	r1, [r7, #0]
 800349e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	db0a      	blt.n	80034be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	b2da      	uxtb	r2, r3
 80034ac:	490c      	ldr	r1, [pc, #48]	; (80034e0 <__NVIC_SetPriority+0x4c>)
 80034ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034b2:	0112      	lsls	r2, r2, #4
 80034b4:	b2d2      	uxtb	r2, r2
 80034b6:	440b      	add	r3, r1
 80034b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034bc:	e00a      	b.n	80034d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	b2da      	uxtb	r2, r3
 80034c2:	4908      	ldr	r1, [pc, #32]	; (80034e4 <__NVIC_SetPriority+0x50>)
 80034c4:	79fb      	ldrb	r3, [r7, #7]
 80034c6:	f003 030f 	and.w	r3, r3, #15
 80034ca:	3b04      	subs	r3, #4
 80034cc:	0112      	lsls	r2, r2, #4
 80034ce:	b2d2      	uxtb	r2, r2
 80034d0:	440b      	add	r3, r1
 80034d2:	761a      	strb	r2, [r3, #24]
}
 80034d4:	bf00      	nop
 80034d6:	370c      	adds	r7, #12
 80034d8:	46bd      	mov	sp, r7
 80034da:	bc80      	pop	{r7}
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	e000e100 	.word	0xe000e100
 80034e4:	e000ed00 	.word	0xe000ed00

080034e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b089      	sub	sp, #36	; 0x24
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f003 0307 	and.w	r3, r3, #7
 80034fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	f1c3 0307 	rsb	r3, r3, #7
 8003502:	2b04      	cmp	r3, #4
 8003504:	bf28      	it	cs
 8003506:	2304      	movcs	r3, #4
 8003508:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	3304      	adds	r3, #4
 800350e:	2b06      	cmp	r3, #6
 8003510:	d902      	bls.n	8003518 <NVIC_EncodePriority+0x30>
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	3b03      	subs	r3, #3
 8003516:	e000      	b.n	800351a <NVIC_EncodePriority+0x32>
 8003518:	2300      	movs	r3, #0
 800351a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800351c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003520:	69bb      	ldr	r3, [r7, #24]
 8003522:	fa02 f303 	lsl.w	r3, r2, r3
 8003526:	43da      	mvns	r2, r3
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	401a      	ands	r2, r3
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003530:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	fa01 f303 	lsl.w	r3, r1, r3
 800353a:	43d9      	mvns	r1, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003540:	4313      	orrs	r3, r2
         );
}
 8003542:	4618      	mov	r0, r3
 8003544:	3724      	adds	r7, #36	; 0x24
 8003546:	46bd      	mov	sp, r7
 8003548:	bc80      	pop	{r7}
 800354a:	4770      	bx	lr

0800354c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	3b01      	subs	r3, #1
 8003558:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800355c:	d301      	bcc.n	8003562 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800355e:	2301      	movs	r3, #1
 8003560:	e00f      	b.n	8003582 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003562:	4a0a      	ldr	r2, [pc, #40]	; (800358c <SysTick_Config+0x40>)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	3b01      	subs	r3, #1
 8003568:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800356a:	210f      	movs	r1, #15
 800356c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003570:	f7ff ff90 	bl	8003494 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003574:	4b05      	ldr	r3, [pc, #20]	; (800358c <SysTick_Config+0x40>)
 8003576:	2200      	movs	r2, #0
 8003578:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800357a:	4b04      	ldr	r3, [pc, #16]	; (800358c <SysTick_Config+0x40>)
 800357c:	2207      	movs	r2, #7
 800357e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3708      	adds	r7, #8
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	e000e010 	.word	0xe000e010

08003590 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b082      	sub	sp, #8
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f7ff ff2d 	bl	80033f8 <__NVIC_SetPriorityGrouping>
}
 800359e:	bf00      	nop
 80035a0:	3708      	adds	r7, #8
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b086      	sub	sp, #24
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	4603      	mov	r3, r0
 80035ae:	60b9      	str	r1, [r7, #8]
 80035b0:	607a      	str	r2, [r7, #4]
 80035b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80035b4:	2300      	movs	r3, #0
 80035b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035b8:	f7ff ff42 	bl	8003440 <__NVIC_GetPriorityGrouping>
 80035bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	68b9      	ldr	r1, [r7, #8]
 80035c2:	6978      	ldr	r0, [r7, #20]
 80035c4:	f7ff ff90 	bl	80034e8 <NVIC_EncodePriority>
 80035c8:	4602      	mov	r2, r0
 80035ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035ce:	4611      	mov	r1, r2
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7ff ff5f 	bl	8003494 <__NVIC_SetPriority>
}
 80035d6:	bf00      	nop
 80035d8:	3718      	adds	r7, #24
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}

080035de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035de:	b580      	push	{r7, lr}
 80035e0:	b082      	sub	sp, #8
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	4603      	mov	r3, r0
 80035e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7ff ff35 	bl	800345c <__NVIC_EnableIRQ>
}
 80035f2:	bf00      	nop
 80035f4:	3708      	adds	r7, #8
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b082      	sub	sp, #8
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f7ff ffa2 	bl	800354c <SysTick_Config>
 8003608:	4603      	mov	r3, r0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3708      	adds	r7, #8
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
	...

08003614 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003614:	b480      	push	{r7}
 8003616:	b085      	sub	sp, #20
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d101      	bne.n	8003626 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e059      	b.n	80036da <HAL_DMA_Init+0xc6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

#if defined (DMA2)
  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	461a      	mov	r2, r3
 800362c:	4b2d      	ldr	r3, [pc, #180]	; (80036e4 <HAL_DMA_Init+0xd0>)
 800362e:	429a      	cmp	r2, r3
 8003630:	d80f      	bhi.n	8003652 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	461a      	mov	r2, r3
 8003638:	4b2b      	ldr	r3, [pc, #172]	; (80036e8 <HAL_DMA_Init+0xd4>)
 800363a:	4413      	add	r3, r2
 800363c:	4a2b      	ldr	r2, [pc, #172]	; (80036ec <HAL_DMA_Init+0xd8>)
 800363e:	fba2 2303 	umull	r2, r3, r2, r3
 8003642:	091b      	lsrs	r3, r3, #4
 8003644:	009a      	lsls	r2, r3, #2
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA1;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a28      	ldr	r2, [pc, #160]	; (80036f0 <HAL_DMA_Init+0xdc>)
 800364e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003650:	e00e      	b.n	8003670 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	461a      	mov	r2, r3
 8003658:	4b26      	ldr	r3, [pc, #152]	; (80036f4 <HAL_DMA_Init+0xe0>)
 800365a:	4413      	add	r3, r2
 800365c:	4a23      	ldr	r2, [pc, #140]	; (80036ec <HAL_DMA_Init+0xd8>)
 800365e:	fba2 2303 	umull	r2, r3, r2, r3
 8003662:	091b      	lsrs	r3, r3, #4
 8003664:	009a      	lsls	r2, r3, #2
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	641a      	str	r2, [r3, #64]	; 0x40
    hdma->DmaBaseAddress = DMA2;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a22      	ldr	r2, [pc, #136]	; (80036f8 <HAL_DMA_Init+0xe4>)
 800366e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2202      	movs	r2, #2
 8003674:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003686:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800368a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003694:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	69db      	ldr	r3, [r3, #28]
 80036b2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80036b4:	68fa      	ldr	r2, [r7, #12]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68fa      	ldr	r2, [r7, #12]
 80036c0:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2200      	movs	r2, #0
 80036c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80036d8:	2300      	movs	r3, #0
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3714      	adds	r7, #20
 80036de:	46bd      	mov	sp, r7
 80036e0:	bc80      	pop	{r7}
 80036e2:	4770      	bx	lr
 80036e4:	40026407 	.word	0x40026407
 80036e8:	bffd9ff8 	.word	0xbffd9ff8
 80036ec:	cccccccd 	.word	0xcccccccd
 80036f0:	40026000 	.word	0x40026000
 80036f4:	bffd9bf8 	.word	0xbffd9bf8
 80036f8:	40026400 	.word	0x40026400

080036fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b086      	sub	sp, #24
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	607a      	str	r2, [r7, #4]
 8003708:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800370a:	2300      	movs	r3, #0
 800370c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003714:	2b01      	cmp	r3, #1
 8003716:	d101      	bne.n	800371c <HAL_DMA_Start_IT+0x20>
 8003718:	2302      	movs	r3, #2
 800371a:	e04b      	b.n	80037b4 <HAL_DMA_Start_IT+0xb8>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800372a:	b2db      	uxtb	r3, r3
 800372c:	2b01      	cmp	r3, #1
 800372e:	d13a      	bne.n	80037a6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2202      	movs	r2, #2
 8003734:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2200      	movs	r2, #0
 800373c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f022 0201 	bic.w	r2, r2, #1
 800374c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	68b9      	ldr	r1, [r7, #8]
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	f000 f95e 	bl	8003a16 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375e:	2b00      	cmp	r3, #0
 8003760:	d008      	beq.n	8003774 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f042 020e 	orr.w	r2, r2, #14
 8003770:	601a      	str	r2, [r3, #0]
 8003772:	e00f      	b.n	8003794 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f022 0204 	bic.w	r2, r2, #4
 8003782:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f042 020a 	orr.w	r2, r2, #10
 8003792:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f042 0201 	orr.w	r2, r2, #1
 80037a2:	601a      	str	r2, [r3, #0]
 80037a4:	e005      	b.n	80037b2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80037ae:	2302      	movs	r3, #2
 80037b0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80037b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3718      	adds	r7, #24
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80037bc:	b480      	push	{r7}
 80037be:	b085      	sub	sp, #20
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037c4:	2300      	movs	r3, #0
 80037c6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d008      	beq.n	80037e6 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2204      	movs	r2, #4
 80037d8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 80037e2:	2301      	movs	r3, #1
 80037e4:	e022      	b.n	800382c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f022 020e 	bic.w	r2, r2, #14
 80037f4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	681a      	ldr	r2, [r3, #0]
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f022 0201 	bic.w	r2, r2, #1
 8003804:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380a:	f003 021c 	and.w	r2, r3, #28
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003812:	2101      	movs	r1, #1
 8003814:	fa01 f202 	lsl.w	r2, r1, r2
 8003818:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2201      	movs	r2, #1
 800381e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	f883 2020 	strb.w	r2, [r3, #32]

    return status;
 800382a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800382c:	4618      	mov	r0, r3
 800382e:	3714      	adds	r7, #20
 8003830:	46bd      	mov	sp, r7
 8003832:	bc80      	pop	{r7}
 8003834:	4770      	bx	lr

08003836 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003836:	b580      	push	{r7, lr}
 8003838:	b084      	sub	sp, #16
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800383e:	2300      	movs	r3, #0
 8003840:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b02      	cmp	r3, #2
 800384c:	d005      	beq.n	800385a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2204      	movs	r2, #4
 8003852:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	73fb      	strb	r3, [r7, #15]
 8003858:	e029      	b.n	80038ae <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f022 020e 	bic.w	r2, r2, #14
 8003868:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	681a      	ldr	r2, [r3, #0]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f022 0201 	bic.w	r2, r2, #1
 8003878:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387e:	f003 021c 	and.w	r2, r3, #28
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003886:	2101      	movs	r1, #1
 8003888:	fa01 f202 	lsl.w	r2, r1, r2
 800388c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2201      	movs	r2, #1
 8003892:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d003      	beq.n	80038ae <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	4798      	blx	r3
    }
  }
  return status;
 80038ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3710      	adds	r7, #16
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}

080038b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b084      	sub	sp, #16
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d4:	f003 031c 	and.w	r3, r3, #28
 80038d8:	2204      	movs	r2, #4
 80038da:	409a      	lsls	r2, r3
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	4013      	ands	r3, r2
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d026      	beq.n	8003932 <HAL_DMA_IRQHandler+0x7a>
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	f003 0304 	and.w	r3, r3, #4
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d021      	beq.n	8003932 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0320 	and.w	r3, r3, #32
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d107      	bne.n	800390c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f022 0204 	bic.w	r2, r2, #4
 800390a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003910:	f003 021c 	and.w	r2, r3, #28
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003918:	2104      	movs	r1, #4
 800391a:	fa01 f202 	lsl.w	r2, r1, r2
 800391e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003924:	2b00      	cmp	r3, #0
 8003926:	d071      	beq.n	8003a0c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003930:	e06c      	b.n	8003a0c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003936:	f003 031c 	and.w	r3, r3, #28
 800393a:	2202      	movs	r2, #2
 800393c:	409a      	lsls	r2, r3
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	4013      	ands	r3, r2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d02e      	beq.n	80039a4 <HAL_DMA_IRQHandler+0xec>
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	f003 0302 	and.w	r3, r3, #2
 800394c:	2b00      	cmp	r3, #0
 800394e:	d029      	beq.n	80039a4 <HAL_DMA_IRQHandler+0xec>
  {
    
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0320 	and.w	r3, r3, #32
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10b      	bne.n	8003976 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f022 020a 	bic.w	r2, r2, #10
 800396c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2201      	movs	r2, #1
 8003972:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800397a:	f003 021c 	and.w	r2, r3, #28
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003982:	2102      	movs	r1, #2
 8003984:	fa01 f202 	lsl.w	r2, r1, r2
 8003988:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003996:	2b00      	cmp	r3, #0
 8003998:	d038      	beq.n	8003a0c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80039a2:	e033      	b.n	8003a0c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a8:	f003 031c 	and.w	r3, r3, #28
 80039ac:	2208      	movs	r2, #8
 80039ae:	409a      	lsls	r2, r3
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	4013      	ands	r3, r2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d02a      	beq.n	8003a0e <HAL_DMA_IRQHandler+0x156>
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	f003 0308 	and.w	r3, r3, #8
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d025      	beq.n	8003a0e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f022 020e 	bic.w	r2, r2, #14
 80039d0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d6:	f003 021c 	and.w	r2, r3, #28
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039de:	2101      	movs	r1, #1
 80039e0:	fa01 f202 	lsl.w	r2, r1, r2
 80039e4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2201      	movs	r2, #1
 80039ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d004      	beq.n	8003a0e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003a0c:	bf00      	nop
 8003a0e:	bf00      	nop
}
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a16:	b480      	push	{r7}
 8003a18:	b085      	sub	sp, #20
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	60f8      	str	r0, [r7, #12]
 8003a1e:	60b9      	str	r1, [r7, #8]
 8003a20:	607a      	str	r2, [r7, #4]
 8003a22:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a28:	f003 021c 	and.w	r2, r3, #28
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a30:	2101      	movs	r1, #1
 8003a32:	fa01 f202 	lsl.w	r2, r1, r2
 8003a36:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	683a      	ldr	r2, [r7, #0]
 8003a3e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	2b10      	cmp	r3, #16
 8003a46:	d108      	bne.n	8003a5a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68ba      	ldr	r2, [r7, #8]
 8003a56:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003a58:	e007      	b.n	8003a6a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68ba      	ldr	r2, [r7, #8]
 8003a60:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	60da      	str	r2, [r3, #12]
}
 8003a6a:	bf00      	nop
 8003a6c:	3714      	adds	r7, #20
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bc80      	pop	{r7}
 8003a72:	4770      	bx	lr

08003a74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b087      	sub	sp, #28
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003a82:	2300      	movs	r3, #0
 8003a84:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8003a86:	2300      	movs	r3, #0
 8003a88:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003a8a:	e160      	b.n	8003d4e <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	2101      	movs	r1, #1
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	fa01 f303 	lsl.w	r3, r1, r3
 8003a98:	4013      	ands	r3, r2
 8003a9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	f000 8152 	beq.w	8003d48 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f003 0303 	and.w	r3, r3, #3
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d005      	beq.n	8003abc <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d130      	bne.n	8003b1e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	005b      	lsls	r3, r3, #1
 8003ac6:	2203      	movs	r2, #3
 8003ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8003acc:	43db      	mvns	r3, r3
 8003ace:	693a      	ldr	r2, [r7, #16]
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	68da      	ldr	r2, [r3, #12]
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	005b      	lsls	r3, r3, #1
 8003adc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae0:	693a      	ldr	r2, [r7, #16]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	693a      	ldr	r2, [r7, #16]
 8003aea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8003af2:	2201      	movs	r2, #1
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	fa02 f303 	lsl.w	r3, r2, r3
 8003afa:	43db      	mvns	r3, r3
 8003afc:	693a      	ldr	r2, [r7, #16]
 8003afe:	4013      	ands	r3, r2
 8003b00:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	091b      	lsrs	r3, r3, #4
 8003b08:	f003 0201 	and.w	r2, r3, #1
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	693a      	ldr	r2, [r7, #16]
 8003b1c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f003 0303 	and.w	r3, r3, #3
 8003b26:	2b03      	cmp	r3, #3
 8003b28:	d017      	beq.n	8003b5a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	68db      	ldr	r3, [r3, #12]
 8003b2e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	005b      	lsls	r3, r3, #1
 8003b34:	2203      	movs	r2, #3
 8003b36:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3a:	43db      	mvns	r3, r3
 8003b3c:	693a      	ldr	r2, [r7, #16]
 8003b3e:	4013      	ands	r3, r2
 8003b40:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	689a      	ldr	r2, [r3, #8]
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	005b      	lsls	r3, r3, #1
 8003b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b5a:	683b      	ldr	r3, [r7, #0]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	f003 0303 	and.w	r3, r3, #3
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d123      	bne.n	8003bae <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	08da      	lsrs	r2, r3, #3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	3208      	adds	r2, #8
 8003b6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b72:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	f003 0307 	and.w	r3, r3, #7
 8003b7a:	009b      	lsls	r3, r3, #2
 8003b7c:	220f      	movs	r2, #15
 8003b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b82:	43db      	mvns	r3, r3
 8003b84:	693a      	ldr	r2, [r7, #16]
 8003b86:	4013      	ands	r3, r2
 8003b88:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	691a      	ldr	r2, [r3, #16]
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	f003 0307 	and.w	r3, r3, #7
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9a:	693a      	ldr	r2, [r7, #16]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	08da      	lsrs	r2, r3, #3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	3208      	adds	r2, #8
 8003ba8:	6939      	ldr	r1, [r7, #16]
 8003baa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8003bb4:	697b      	ldr	r3, [r7, #20]
 8003bb6:	005b      	lsls	r3, r3, #1
 8003bb8:	2203      	movs	r2, #3
 8003bba:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbe:	43db      	mvns	r3, r3
 8003bc0:	693a      	ldr	r2, [r7, #16]
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f003 0203 	and.w	r2, r3, #3
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	005b      	lsls	r3, r3, #1
 8003bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd6:	693a      	ldr	r2, [r7, #16]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	693a      	ldr	r2, [r7, #16]
 8003be0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	f000 80ac 	beq.w	8003d48 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bf0:	4b5e      	ldr	r3, [pc, #376]	; (8003d6c <HAL_GPIO_Init+0x2f8>)
 8003bf2:	6a1b      	ldr	r3, [r3, #32]
 8003bf4:	4a5d      	ldr	r2, [pc, #372]	; (8003d6c <HAL_GPIO_Init+0x2f8>)
 8003bf6:	f043 0301 	orr.w	r3, r3, #1
 8003bfa:	6213      	str	r3, [r2, #32]
 8003bfc:	4b5b      	ldr	r3, [pc, #364]	; (8003d6c <HAL_GPIO_Init+0x2f8>)
 8003bfe:	6a1b      	ldr	r3, [r3, #32]
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	60bb      	str	r3, [r7, #8]
 8003c06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8003c08:	4a59      	ldr	r2, [pc, #356]	; (8003d70 <HAL_GPIO_Init+0x2fc>)
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	089b      	lsrs	r3, r3, #2
 8003c0e:	3302      	adds	r3, #2
 8003c10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c14:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	f003 0303 	and.w	r3, r3, #3
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	220f      	movs	r2, #15
 8003c20:	fa02 f303 	lsl.w	r3, r2, r3
 8003c24:	43db      	mvns	r3, r3
 8003c26:	693a      	ldr	r2, [r7, #16]
 8003c28:	4013      	ands	r3, r2
 8003c2a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a51      	ldr	r2, [pc, #324]	; (8003d74 <HAL_GPIO_Init+0x300>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d025      	beq.n	8003c80 <HAL_GPIO_Init+0x20c>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a50      	ldr	r2, [pc, #320]	; (8003d78 <HAL_GPIO_Init+0x304>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d01f      	beq.n	8003c7c <HAL_GPIO_Init+0x208>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a4f      	ldr	r2, [pc, #316]	; (8003d7c <HAL_GPIO_Init+0x308>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d019      	beq.n	8003c78 <HAL_GPIO_Init+0x204>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a4e      	ldr	r2, [pc, #312]	; (8003d80 <HAL_GPIO_Init+0x30c>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d013      	beq.n	8003c74 <HAL_GPIO_Init+0x200>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	4a4d      	ldr	r2, [pc, #308]	; (8003d84 <HAL_GPIO_Init+0x310>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d00d      	beq.n	8003c70 <HAL_GPIO_Init+0x1fc>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4a4c      	ldr	r2, [pc, #304]	; (8003d88 <HAL_GPIO_Init+0x314>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d007      	beq.n	8003c6c <HAL_GPIO_Init+0x1f8>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4a4b      	ldr	r2, [pc, #300]	; (8003d8c <HAL_GPIO_Init+0x318>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d101      	bne.n	8003c68 <HAL_GPIO_Init+0x1f4>
 8003c64:	2306      	movs	r3, #6
 8003c66:	e00c      	b.n	8003c82 <HAL_GPIO_Init+0x20e>
 8003c68:	2307      	movs	r3, #7
 8003c6a:	e00a      	b.n	8003c82 <HAL_GPIO_Init+0x20e>
 8003c6c:	2305      	movs	r3, #5
 8003c6e:	e008      	b.n	8003c82 <HAL_GPIO_Init+0x20e>
 8003c70:	2304      	movs	r3, #4
 8003c72:	e006      	b.n	8003c82 <HAL_GPIO_Init+0x20e>
 8003c74:	2303      	movs	r3, #3
 8003c76:	e004      	b.n	8003c82 <HAL_GPIO_Init+0x20e>
 8003c78:	2302      	movs	r3, #2
 8003c7a:	e002      	b.n	8003c82 <HAL_GPIO_Init+0x20e>
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e000      	b.n	8003c82 <HAL_GPIO_Init+0x20e>
 8003c80:	2300      	movs	r3, #0
 8003c82:	697a      	ldr	r2, [r7, #20]
 8003c84:	f002 0203 	and.w	r2, r2, #3
 8003c88:	0092      	lsls	r2, r2, #2
 8003c8a:	4093      	lsls	r3, r2
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003c92:	4937      	ldr	r1, [pc, #220]	; (8003d70 <HAL_GPIO_Init+0x2fc>)
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	089b      	lsrs	r3, r3, #2
 8003c98:	3302      	adds	r3, #2
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ca0:	4b3b      	ldr	r3, [pc, #236]	; (8003d90 <HAL_GPIO_Init+0x31c>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	43db      	mvns	r3, r3
 8003caa:	693a      	ldr	r2, [r7, #16]
 8003cac:	4013      	ands	r3, r2
 8003cae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d003      	beq.n	8003cc4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8003cbc:	693a      	ldr	r2, [r7, #16]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003cc4:	4a32      	ldr	r2, [pc, #200]	; (8003d90 <HAL_GPIO_Init+0x31c>)
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003cca:	4b31      	ldr	r3, [pc, #196]	; (8003d90 <HAL_GPIO_Init+0x31c>)
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	43db      	mvns	r3, r3
 8003cd4:	693a      	ldr	r2, [r7, #16]
 8003cd6:	4013      	ands	r3, r2
 8003cd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d003      	beq.n	8003cee <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8003ce6:	693a      	ldr	r2, [r7, #16]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003cee:	4a28      	ldr	r2, [pc, #160]	; (8003d90 <HAL_GPIO_Init+0x31c>)
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003cf4:	4b26      	ldr	r3, [pc, #152]	; (8003d90 <HAL_GPIO_Init+0x31c>)
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	43db      	mvns	r3, r3
 8003cfe:	693a      	ldr	r2, [r7, #16]
 8003d00:	4013      	ands	r3, r2
 8003d02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d003      	beq.n	8003d18 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 8003d10:	693a      	ldr	r2, [r7, #16]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003d18:	4a1d      	ldr	r2, [pc, #116]	; (8003d90 <HAL_GPIO_Init+0x31c>)
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d1e:	4b1c      	ldr	r3, [pc, #112]	; (8003d90 <HAL_GPIO_Init+0x31c>)
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	43db      	mvns	r3, r3
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d003      	beq.n	8003d42 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8003d3a:	693a      	ldr	r2, [r7, #16]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003d42:	4a13      	ldr	r2, [pc, #76]	; (8003d90 <HAL_GPIO_Init+0x31c>)
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	fa22 f303 	lsr.w	r3, r2, r3
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f47f ae97 	bne.w	8003a8c <HAL_GPIO_Init+0x18>
  }
}
 8003d5e:	bf00      	nop
 8003d60:	bf00      	nop
 8003d62:	371c      	adds	r7, #28
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bc80      	pop	{r7}
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	40023800 	.word	0x40023800
 8003d70:	40010000 	.word	0x40010000
 8003d74:	40020000 	.word	0x40020000
 8003d78:	40020400 	.word	0x40020400
 8003d7c:	40020800 	.word	0x40020800
 8003d80:	40020c00 	.word	0x40020c00
 8003d84:	40021000 	.word	0x40021000
 8003d88:	40021400 	.word	0x40021400
 8003d8c:	40021800 	.word	0x40021800
 8003d90:	40010400 	.word	0x40010400

08003d94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b088      	sub	sp, #32
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d101      	bne.n	8003da6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e31d      	b.n	80043e2 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003da6:	4b94      	ldr	r3, [pc, #592]	; (8003ff8 <HAL_RCC_OscConfig+0x264>)
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f003 030c 	and.w	r3, r3, #12
 8003dae:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003db0:	4b91      	ldr	r3, [pc, #580]	; (8003ff8 <HAL_RCC_OscConfig+0x264>)
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003db8:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f003 0301 	and.w	r3, r3, #1
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d07b      	beq.n	8003ebe <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	2b08      	cmp	r3, #8
 8003dca:	d006      	beq.n	8003dda <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	2b0c      	cmp	r3, #12
 8003dd0:	d10f      	bne.n	8003df2 <HAL_RCC_OscConfig+0x5e>
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dd8:	d10b      	bne.n	8003df2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dda:	4b87      	ldr	r3, [pc, #540]	; (8003ff8 <HAL_RCC_OscConfig+0x264>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d06a      	beq.n	8003ebc <HAL_RCC_OscConfig+0x128>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d166      	bne.n	8003ebc <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e2f7      	b.n	80043e2 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d106      	bne.n	8003e08 <HAL_RCC_OscConfig+0x74>
 8003dfa:	4b7f      	ldr	r3, [pc, #508]	; (8003ff8 <HAL_RCC_OscConfig+0x264>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a7e      	ldr	r2, [pc, #504]	; (8003ff8 <HAL_RCC_OscConfig+0x264>)
 8003e00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e04:	6013      	str	r3, [r2, #0]
 8003e06:	e02d      	b.n	8003e64 <HAL_RCC_OscConfig+0xd0>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d10c      	bne.n	8003e2a <HAL_RCC_OscConfig+0x96>
 8003e10:	4b79      	ldr	r3, [pc, #484]	; (8003ff8 <HAL_RCC_OscConfig+0x264>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a78      	ldr	r2, [pc, #480]	; (8003ff8 <HAL_RCC_OscConfig+0x264>)
 8003e16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e1a:	6013      	str	r3, [r2, #0]
 8003e1c:	4b76      	ldr	r3, [pc, #472]	; (8003ff8 <HAL_RCC_OscConfig+0x264>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a75      	ldr	r2, [pc, #468]	; (8003ff8 <HAL_RCC_OscConfig+0x264>)
 8003e22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e26:	6013      	str	r3, [r2, #0]
 8003e28:	e01c      	b.n	8003e64 <HAL_RCC_OscConfig+0xd0>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	2b05      	cmp	r3, #5
 8003e30:	d10c      	bne.n	8003e4c <HAL_RCC_OscConfig+0xb8>
 8003e32:	4b71      	ldr	r3, [pc, #452]	; (8003ff8 <HAL_RCC_OscConfig+0x264>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a70      	ldr	r2, [pc, #448]	; (8003ff8 <HAL_RCC_OscConfig+0x264>)
 8003e38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e3c:	6013      	str	r3, [r2, #0]
 8003e3e:	4b6e      	ldr	r3, [pc, #440]	; (8003ff8 <HAL_RCC_OscConfig+0x264>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a6d      	ldr	r2, [pc, #436]	; (8003ff8 <HAL_RCC_OscConfig+0x264>)
 8003e44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e48:	6013      	str	r3, [r2, #0]
 8003e4a:	e00b      	b.n	8003e64 <HAL_RCC_OscConfig+0xd0>
 8003e4c:	4b6a      	ldr	r3, [pc, #424]	; (8003ff8 <HAL_RCC_OscConfig+0x264>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	4a69      	ldr	r2, [pc, #420]	; (8003ff8 <HAL_RCC_OscConfig+0x264>)
 8003e52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e56:	6013      	str	r3, [r2, #0]
 8003e58:	4b67      	ldr	r3, [pc, #412]	; (8003ff8 <HAL_RCC_OscConfig+0x264>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a66      	ldr	r2, [pc, #408]	; (8003ff8 <HAL_RCC_OscConfig+0x264>)
 8003e5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d013      	beq.n	8003e94 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e6c:	f7fe fd74 	bl	8002958 <HAL_GetTick>
 8003e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e72:	e008      	b.n	8003e86 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e74:	f7fe fd70 	bl	8002958 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b64      	cmp	r3, #100	; 0x64
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e2ad      	b.n	80043e2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e86:	4b5c      	ldr	r3, [pc, #368]	; (8003ff8 <HAL_RCC_OscConfig+0x264>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d0f0      	beq.n	8003e74 <HAL_RCC_OscConfig+0xe0>
 8003e92:	e014      	b.n	8003ebe <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e94:	f7fe fd60 	bl	8002958 <HAL_GetTick>
 8003e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003e9a:	e008      	b.n	8003eae <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e9c:	f7fe fd5c 	bl	8002958 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	2b64      	cmp	r3, #100	; 0x64
 8003ea8:	d901      	bls.n	8003eae <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e299      	b.n	80043e2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003eae:	4b52      	ldr	r3, [pc, #328]	; (8003ff8 <HAL_RCC_OscConfig+0x264>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1f0      	bne.n	8003e9c <HAL_RCC_OscConfig+0x108>
 8003eba:	e000      	b.n	8003ebe <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ebc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f003 0302 	and.w	r3, r3, #2
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d05a      	beq.n	8003f80 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	2b04      	cmp	r3, #4
 8003ece:	d005      	beq.n	8003edc <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	2b0c      	cmp	r3, #12
 8003ed4:	d119      	bne.n	8003f0a <HAL_RCC_OscConfig+0x176>
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d116      	bne.n	8003f0a <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003edc:	4b46      	ldr	r3, [pc, #280]	; (8003ff8 <HAL_RCC_OscConfig+0x264>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d005      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x160>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	68db      	ldr	r3, [r3, #12]
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	d001      	beq.n	8003ef4 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e276      	b.n	80043e2 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ef4:	4b40      	ldr	r3, [pc, #256]	; (8003ff8 <HAL_RCC_OscConfig+0x264>)
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	691b      	ldr	r3, [r3, #16]
 8003f00:	021b      	lsls	r3, r3, #8
 8003f02:	493d      	ldr	r1, [pc, #244]	; (8003ff8 <HAL_RCC_OscConfig+0x264>)
 8003f04:	4313      	orrs	r3, r2
 8003f06:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f08:	e03a      	b.n	8003f80 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d020      	beq.n	8003f54 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f12:	4b3a      	ldr	r3, [pc, #232]	; (8003ffc <HAL_RCC_OscConfig+0x268>)
 8003f14:	2201      	movs	r2, #1
 8003f16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f18:	f7fe fd1e 	bl	8002958 <HAL_GetTick>
 8003f1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f1e:	e008      	b.n	8003f32 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f20:	f7fe fd1a 	bl	8002958 <HAL_GetTick>
 8003f24:	4602      	mov	r2, r0
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	1ad3      	subs	r3, r2, r3
 8003f2a:	2b02      	cmp	r3, #2
 8003f2c:	d901      	bls.n	8003f32 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003f2e:	2303      	movs	r3, #3
 8003f30:	e257      	b.n	80043e2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003f32:	4b31      	ldr	r3, [pc, #196]	; (8003ff8 <HAL_RCC_OscConfig+0x264>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f003 0302 	and.w	r3, r3, #2
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d0f0      	beq.n	8003f20 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f3e:	4b2e      	ldr	r3, [pc, #184]	; (8003ff8 <HAL_RCC_OscConfig+0x264>)
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	021b      	lsls	r3, r3, #8
 8003f4c:	492a      	ldr	r1, [pc, #168]	; (8003ff8 <HAL_RCC_OscConfig+0x264>)
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	604b      	str	r3, [r1, #4]
 8003f52:	e015      	b.n	8003f80 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f54:	4b29      	ldr	r3, [pc, #164]	; (8003ffc <HAL_RCC_OscConfig+0x268>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f5a:	f7fe fcfd 	bl	8002958 <HAL_GetTick>
 8003f5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003f60:	e008      	b.n	8003f74 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f62:	f7fe fcf9 	bl	8002958 <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	2b02      	cmp	r3, #2
 8003f6e:	d901      	bls.n	8003f74 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e236      	b.n	80043e2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003f74:	4b20      	ldr	r3, [pc, #128]	; (8003ff8 <HAL_RCC_OscConfig+0x264>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0302 	and.w	r3, r3, #2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d1f0      	bne.n	8003f62 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0310 	and.w	r3, r3, #16
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	f000 80b8 	beq.w	80040fe <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d170      	bne.n	8004076 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f94:	4b18      	ldr	r3, [pc, #96]	; (8003ff8 <HAL_RCC_OscConfig+0x264>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d005      	beq.n	8003fac <HAL_RCC_OscConfig+0x218>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	699b      	ldr	r3, [r3, #24]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d101      	bne.n	8003fac <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e21a      	b.n	80043e2 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a1a      	ldr	r2, [r3, #32]
 8003fb0:	4b11      	ldr	r3, [pc, #68]	; (8003ff8 <HAL_RCC_OscConfig+0x264>)
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d921      	bls.n	8004000 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a1b      	ldr	r3, [r3, #32]
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f000 fc3b 	bl	800483c <RCC_SetFlashLatencyFromMSIRange>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d001      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e208      	b.n	80043e2 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003fd0:	4b09      	ldr	r3, [pc, #36]	; (8003ff8 <HAL_RCC_OscConfig+0x264>)
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6a1b      	ldr	r3, [r3, #32]
 8003fdc:	4906      	ldr	r1, [pc, #24]	; (8003ff8 <HAL_RCC_OscConfig+0x264>)
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fe2:	4b05      	ldr	r3, [pc, #20]	; (8003ff8 <HAL_RCC_OscConfig+0x264>)
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	69db      	ldr	r3, [r3, #28]
 8003fee:	061b      	lsls	r3, r3, #24
 8003ff0:	4901      	ldr	r1, [pc, #4]	; (8003ff8 <HAL_RCC_OscConfig+0x264>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	604b      	str	r3, [r1, #4]
 8003ff6:	e020      	b.n	800403a <HAL_RCC_OscConfig+0x2a6>
 8003ff8:	40023800 	.word	0x40023800
 8003ffc:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004000:	4b99      	ldr	r3, [pc, #612]	; (8004268 <HAL_RCC_OscConfig+0x4d4>)
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a1b      	ldr	r3, [r3, #32]
 800400c:	4996      	ldr	r1, [pc, #600]	; (8004268 <HAL_RCC_OscConfig+0x4d4>)
 800400e:	4313      	orrs	r3, r2
 8004010:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004012:	4b95      	ldr	r3, [pc, #596]	; (8004268 <HAL_RCC_OscConfig+0x4d4>)
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	69db      	ldr	r3, [r3, #28]
 800401e:	061b      	lsls	r3, r3, #24
 8004020:	4991      	ldr	r1, [pc, #580]	; (8004268 <HAL_RCC_OscConfig+0x4d4>)
 8004022:	4313      	orrs	r3, r2
 8004024:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a1b      	ldr	r3, [r3, #32]
 800402a:	4618      	mov	r0, r3
 800402c:	f000 fc06 	bl	800483c <RCC_SetFlashLatencyFromMSIRange>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d001      	beq.n	800403a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e1d3      	b.n	80043e2 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a1b      	ldr	r3, [r3, #32]
 800403e:	0b5b      	lsrs	r3, r3, #13
 8004040:	3301      	adds	r3, #1
 8004042:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004046:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800404a:	4a87      	ldr	r2, [pc, #540]	; (8004268 <HAL_RCC_OscConfig+0x4d4>)
 800404c:	6892      	ldr	r2, [r2, #8]
 800404e:	0912      	lsrs	r2, r2, #4
 8004050:	f002 020f 	and.w	r2, r2, #15
 8004054:	4985      	ldr	r1, [pc, #532]	; (800426c <HAL_RCC_OscConfig+0x4d8>)
 8004056:	5c8a      	ldrb	r2, [r1, r2]
 8004058:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800405a:	4a85      	ldr	r2, [pc, #532]	; (8004270 <HAL_RCC_OscConfig+0x4dc>)
 800405c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800405e:	4b85      	ldr	r3, [pc, #532]	; (8004274 <HAL_RCC_OscConfig+0x4e0>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4618      	mov	r0, r3
 8004064:	f7fe fc2c 	bl	80028c0 <HAL_InitTick>
 8004068:	4603      	mov	r3, r0
 800406a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800406c:	7bfb      	ldrb	r3, [r7, #15]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d045      	beq.n	80040fe <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8004072:	7bfb      	ldrb	r3, [r7, #15]
 8004074:	e1b5      	b.n	80043e2 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	699b      	ldr	r3, [r3, #24]
 800407a:	2b00      	cmp	r3, #0
 800407c:	d029      	beq.n	80040d2 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800407e:	4b7e      	ldr	r3, [pc, #504]	; (8004278 <HAL_RCC_OscConfig+0x4e4>)
 8004080:	2201      	movs	r2, #1
 8004082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004084:	f7fe fc68 	bl	8002958 <HAL_GetTick>
 8004088:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800408a:	e008      	b.n	800409e <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800408c:	f7fe fc64 	bl	8002958 <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	2b02      	cmp	r3, #2
 8004098:	d901      	bls.n	800409e <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e1a1      	b.n	80043e2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800409e:	4b72      	ldr	r3, [pc, #456]	; (8004268 <HAL_RCC_OscConfig+0x4d4>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d0f0      	beq.n	800408c <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80040aa:	4b6f      	ldr	r3, [pc, #444]	; (8004268 <HAL_RCC_OscConfig+0x4d4>)
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	496c      	ldr	r1, [pc, #432]	; (8004268 <HAL_RCC_OscConfig+0x4d4>)
 80040b8:	4313      	orrs	r3, r2
 80040ba:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040bc:	4b6a      	ldr	r3, [pc, #424]	; (8004268 <HAL_RCC_OscConfig+0x4d4>)
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	69db      	ldr	r3, [r3, #28]
 80040c8:	061b      	lsls	r3, r3, #24
 80040ca:	4967      	ldr	r1, [pc, #412]	; (8004268 <HAL_RCC_OscConfig+0x4d4>)
 80040cc:	4313      	orrs	r3, r2
 80040ce:	604b      	str	r3, [r1, #4]
 80040d0:	e015      	b.n	80040fe <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80040d2:	4b69      	ldr	r3, [pc, #420]	; (8004278 <HAL_RCC_OscConfig+0x4e4>)
 80040d4:	2200      	movs	r2, #0
 80040d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040d8:	f7fe fc3e 	bl	8002958 <HAL_GetTick>
 80040dc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80040de:	e008      	b.n	80040f2 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80040e0:	f7fe fc3a 	bl	8002958 <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d901      	bls.n	80040f2 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e177      	b.n	80043e2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80040f2:	4b5d      	ldr	r3, [pc, #372]	; (8004268 <HAL_RCC_OscConfig+0x4d4>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1f0      	bne.n	80040e0 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f003 0308 	and.w	r3, r3, #8
 8004106:	2b00      	cmp	r3, #0
 8004108:	d030      	beq.n	800416c <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d016      	beq.n	8004140 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004112:	4b5a      	ldr	r3, [pc, #360]	; (800427c <HAL_RCC_OscConfig+0x4e8>)
 8004114:	2201      	movs	r2, #1
 8004116:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004118:	f7fe fc1e 	bl	8002958 <HAL_GetTick>
 800411c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800411e:	e008      	b.n	8004132 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004120:	f7fe fc1a 	bl	8002958 <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	2b02      	cmp	r3, #2
 800412c:	d901      	bls.n	8004132 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e157      	b.n	80043e2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004132:	4b4d      	ldr	r3, [pc, #308]	; (8004268 <HAL_RCC_OscConfig+0x4d4>)
 8004134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b00      	cmp	r3, #0
 800413c:	d0f0      	beq.n	8004120 <HAL_RCC_OscConfig+0x38c>
 800413e:	e015      	b.n	800416c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004140:	4b4e      	ldr	r3, [pc, #312]	; (800427c <HAL_RCC_OscConfig+0x4e8>)
 8004142:	2200      	movs	r2, #0
 8004144:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004146:	f7fe fc07 	bl	8002958 <HAL_GetTick>
 800414a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800414c:	e008      	b.n	8004160 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800414e:	f7fe fc03 	bl	8002958 <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	2b02      	cmp	r3, #2
 800415a:	d901      	bls.n	8004160 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e140      	b.n	80043e2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004160:	4b41      	ldr	r3, [pc, #260]	; (8004268 <HAL_RCC_OscConfig+0x4d4>)
 8004162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004164:	f003 0302 	and.w	r3, r3, #2
 8004168:	2b00      	cmp	r3, #0
 800416a:	d1f0      	bne.n	800414e <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0304 	and.w	r3, r3, #4
 8004174:	2b00      	cmp	r3, #0
 8004176:	f000 80b5 	beq.w	80042e4 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800417a:	2300      	movs	r3, #0
 800417c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800417e:	4b3a      	ldr	r3, [pc, #232]	; (8004268 <HAL_RCC_OscConfig+0x4d4>)
 8004180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d10d      	bne.n	80041a6 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800418a:	4b37      	ldr	r3, [pc, #220]	; (8004268 <HAL_RCC_OscConfig+0x4d4>)
 800418c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418e:	4a36      	ldr	r2, [pc, #216]	; (8004268 <HAL_RCC_OscConfig+0x4d4>)
 8004190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004194:	6253      	str	r3, [r2, #36]	; 0x24
 8004196:	4b34      	ldr	r3, [pc, #208]	; (8004268 <HAL_RCC_OscConfig+0x4d4>)
 8004198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800419e:	60bb      	str	r3, [r7, #8]
 80041a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041a2:	2301      	movs	r3, #1
 80041a4:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041a6:	4b36      	ldr	r3, [pc, #216]	; (8004280 <HAL_RCC_OscConfig+0x4ec>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d118      	bne.n	80041e4 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041b2:	4b33      	ldr	r3, [pc, #204]	; (8004280 <HAL_RCC_OscConfig+0x4ec>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a32      	ldr	r2, [pc, #200]	; (8004280 <HAL_RCC_OscConfig+0x4ec>)
 80041b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041be:	f7fe fbcb 	bl	8002958 <HAL_GetTick>
 80041c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041c4:	e008      	b.n	80041d8 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041c6:	f7fe fbc7 	bl	8002958 <HAL_GetTick>
 80041ca:	4602      	mov	r2, r0
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	2b64      	cmp	r3, #100	; 0x64
 80041d2:	d901      	bls.n	80041d8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e104      	b.n	80043e2 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041d8:	4b29      	ldr	r3, [pc, #164]	; (8004280 <HAL_RCC_OscConfig+0x4ec>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d0f0      	beq.n	80041c6 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	2b01      	cmp	r3, #1
 80041ea:	d106      	bne.n	80041fa <HAL_RCC_OscConfig+0x466>
 80041ec:	4b1e      	ldr	r3, [pc, #120]	; (8004268 <HAL_RCC_OscConfig+0x4d4>)
 80041ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041f0:	4a1d      	ldr	r2, [pc, #116]	; (8004268 <HAL_RCC_OscConfig+0x4d4>)
 80041f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041f6:	6353      	str	r3, [r2, #52]	; 0x34
 80041f8:	e02d      	b.n	8004256 <HAL_RCC_OscConfig+0x4c2>
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d10c      	bne.n	800421c <HAL_RCC_OscConfig+0x488>
 8004202:	4b19      	ldr	r3, [pc, #100]	; (8004268 <HAL_RCC_OscConfig+0x4d4>)
 8004204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004206:	4a18      	ldr	r2, [pc, #96]	; (8004268 <HAL_RCC_OscConfig+0x4d4>)
 8004208:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800420c:	6353      	str	r3, [r2, #52]	; 0x34
 800420e:	4b16      	ldr	r3, [pc, #88]	; (8004268 <HAL_RCC_OscConfig+0x4d4>)
 8004210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004212:	4a15      	ldr	r2, [pc, #84]	; (8004268 <HAL_RCC_OscConfig+0x4d4>)
 8004214:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004218:	6353      	str	r3, [r2, #52]	; 0x34
 800421a:	e01c      	b.n	8004256 <HAL_RCC_OscConfig+0x4c2>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	2b05      	cmp	r3, #5
 8004222:	d10c      	bne.n	800423e <HAL_RCC_OscConfig+0x4aa>
 8004224:	4b10      	ldr	r3, [pc, #64]	; (8004268 <HAL_RCC_OscConfig+0x4d4>)
 8004226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004228:	4a0f      	ldr	r2, [pc, #60]	; (8004268 <HAL_RCC_OscConfig+0x4d4>)
 800422a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800422e:	6353      	str	r3, [r2, #52]	; 0x34
 8004230:	4b0d      	ldr	r3, [pc, #52]	; (8004268 <HAL_RCC_OscConfig+0x4d4>)
 8004232:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004234:	4a0c      	ldr	r2, [pc, #48]	; (8004268 <HAL_RCC_OscConfig+0x4d4>)
 8004236:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800423a:	6353      	str	r3, [r2, #52]	; 0x34
 800423c:	e00b      	b.n	8004256 <HAL_RCC_OscConfig+0x4c2>
 800423e:	4b0a      	ldr	r3, [pc, #40]	; (8004268 <HAL_RCC_OscConfig+0x4d4>)
 8004240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004242:	4a09      	ldr	r2, [pc, #36]	; (8004268 <HAL_RCC_OscConfig+0x4d4>)
 8004244:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004248:	6353      	str	r3, [r2, #52]	; 0x34
 800424a:	4b07      	ldr	r3, [pc, #28]	; (8004268 <HAL_RCC_OscConfig+0x4d4>)
 800424c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800424e:	4a06      	ldr	r2, [pc, #24]	; (8004268 <HAL_RCC_OscConfig+0x4d4>)
 8004250:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004254:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d024      	beq.n	80042a8 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800425e:	f7fe fb7b 	bl	8002958 <HAL_GetTick>
 8004262:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004264:	e019      	b.n	800429a <HAL_RCC_OscConfig+0x506>
 8004266:	bf00      	nop
 8004268:	40023800 	.word	0x40023800
 800426c:	080070f8 	.word	0x080070f8
 8004270:	20000018 	.word	0x20000018
 8004274:	20000024 	.word	0x20000024
 8004278:	42470020 	.word	0x42470020
 800427c:	42470680 	.word	0x42470680
 8004280:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004284:	f7fe fb68 	bl	8002958 <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004292:	4293      	cmp	r3, r2
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e0a3      	b.n	80043e2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800429a:	4b54      	ldr	r3, [pc, #336]	; (80043ec <HAL_RCC_OscConfig+0x658>)
 800429c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800429e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d0ee      	beq.n	8004284 <HAL_RCC_OscConfig+0x4f0>
 80042a6:	e014      	b.n	80042d2 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042a8:	f7fe fb56 	bl	8002958 <HAL_GetTick>
 80042ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80042ae:	e00a      	b.n	80042c6 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042b0:	f7fe fb52 	bl	8002958 <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80042be:	4293      	cmp	r3, r2
 80042c0:	d901      	bls.n	80042c6 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e08d      	b.n	80043e2 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80042c6:	4b49      	ldr	r3, [pc, #292]	; (80043ec <HAL_RCC_OscConfig+0x658>)
 80042c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1ee      	bne.n	80042b0 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80042d2:	7ffb      	ldrb	r3, [r7, #31]
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d105      	bne.n	80042e4 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042d8:	4b44      	ldr	r3, [pc, #272]	; (80043ec <HAL_RCC_OscConfig+0x658>)
 80042da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042dc:	4a43      	ldr	r2, [pc, #268]	; (80043ec <HAL_RCC_OscConfig+0x658>)
 80042de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042e2:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d079      	beq.n	80043e0 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	2b0c      	cmp	r3, #12
 80042f0:	d056      	beq.n	80043a0 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d13b      	bne.n	8004372 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042fa:	4b3d      	ldr	r3, [pc, #244]	; (80043f0 <HAL_RCC_OscConfig+0x65c>)
 80042fc:	2200      	movs	r2, #0
 80042fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004300:	f7fe fb2a 	bl	8002958 <HAL_GetTick>
 8004304:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004306:	e008      	b.n	800431a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004308:	f7fe fb26 	bl	8002958 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	2b02      	cmp	r3, #2
 8004314:	d901      	bls.n	800431a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e063      	b.n	80043e2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800431a:	4b34      	ldr	r3, [pc, #208]	; (80043ec <HAL_RCC_OscConfig+0x658>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1f0      	bne.n	8004308 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004326:	4b31      	ldr	r3, [pc, #196]	; (80043ec <HAL_RCC_OscConfig+0x658>)
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004336:	4319      	orrs	r1, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800433c:	430b      	orrs	r3, r1
 800433e:	492b      	ldr	r1, [pc, #172]	; (80043ec <HAL_RCC_OscConfig+0x658>)
 8004340:	4313      	orrs	r3, r2
 8004342:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004344:	4b2a      	ldr	r3, [pc, #168]	; (80043f0 <HAL_RCC_OscConfig+0x65c>)
 8004346:	2201      	movs	r2, #1
 8004348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800434a:	f7fe fb05 	bl	8002958 <HAL_GetTick>
 800434e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004350:	e008      	b.n	8004364 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004352:	f7fe fb01 	bl	8002958 <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	2b02      	cmp	r3, #2
 800435e:	d901      	bls.n	8004364 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	e03e      	b.n	80043e2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004364:	4b21      	ldr	r3, [pc, #132]	; (80043ec <HAL_RCC_OscConfig+0x658>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d0f0      	beq.n	8004352 <HAL_RCC_OscConfig+0x5be>
 8004370:	e036      	b.n	80043e0 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004372:	4b1f      	ldr	r3, [pc, #124]	; (80043f0 <HAL_RCC_OscConfig+0x65c>)
 8004374:	2200      	movs	r2, #0
 8004376:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004378:	f7fe faee 	bl	8002958 <HAL_GetTick>
 800437c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800437e:	e008      	b.n	8004392 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004380:	f7fe faea 	bl	8002958 <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	2b02      	cmp	r3, #2
 800438c:	d901      	bls.n	8004392 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e027      	b.n	80043e2 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004392:	4b16      	ldr	r3, [pc, #88]	; (80043ec <HAL_RCC_OscConfig+0x658>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1f0      	bne.n	8004380 <HAL_RCC_OscConfig+0x5ec>
 800439e:	e01f      	b.n	80043e0 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d101      	bne.n	80043ac <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e01a      	b.n	80043e2 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80043ac:	4b0f      	ldr	r3, [pc, #60]	; (80043ec <HAL_RCC_OscConfig+0x658>)
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043bc:	429a      	cmp	r2, r3
 80043be:	d10d      	bne.n	80043dc <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d106      	bne.n	80043dc <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80043d8:	429a      	cmp	r2, r3
 80043da:	d001      	beq.n	80043e0 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e000      	b.n	80043e2 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3720      	adds	r7, #32
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	40023800 	.word	0x40023800
 80043f0:	42470060 	.word	0x42470060

080043f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d101      	bne.n	8004408 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e11a      	b.n	800463e <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004408:	4b8f      	ldr	r3, [pc, #572]	; (8004648 <HAL_RCC_ClockConfig+0x254>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0301 	and.w	r3, r3, #1
 8004410:	683a      	ldr	r2, [r7, #0]
 8004412:	429a      	cmp	r2, r3
 8004414:	d919      	bls.n	800444a <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	2b01      	cmp	r3, #1
 800441a:	d105      	bne.n	8004428 <HAL_RCC_ClockConfig+0x34>
 800441c:	4b8a      	ldr	r3, [pc, #552]	; (8004648 <HAL_RCC_ClockConfig+0x254>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a89      	ldr	r2, [pc, #548]	; (8004648 <HAL_RCC_ClockConfig+0x254>)
 8004422:	f043 0304 	orr.w	r3, r3, #4
 8004426:	6013      	str	r3, [r2, #0]
 8004428:	4b87      	ldr	r3, [pc, #540]	; (8004648 <HAL_RCC_ClockConfig+0x254>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f023 0201 	bic.w	r2, r3, #1
 8004430:	4985      	ldr	r1, [pc, #532]	; (8004648 <HAL_RCC_ClockConfig+0x254>)
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	4313      	orrs	r3, r2
 8004436:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004438:	4b83      	ldr	r3, [pc, #524]	; (8004648 <HAL_RCC_ClockConfig+0x254>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0301 	and.w	r3, r3, #1
 8004440:	683a      	ldr	r2, [r7, #0]
 8004442:	429a      	cmp	r2, r3
 8004444:	d001      	beq.n	800444a <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8004446:	2301      	movs	r3, #1
 8004448:	e0f9      	b.n	800463e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0302 	and.w	r3, r3, #2
 8004452:	2b00      	cmp	r3, #0
 8004454:	d008      	beq.n	8004468 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004456:	4b7d      	ldr	r3, [pc, #500]	; (800464c <HAL_RCC_ClockConfig+0x258>)
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	497a      	ldr	r1, [pc, #488]	; (800464c <HAL_RCC_ClockConfig+0x258>)
 8004464:	4313      	orrs	r3, r2
 8004466:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 0301 	and.w	r3, r3, #1
 8004470:	2b00      	cmp	r3, #0
 8004472:	f000 808e 	beq.w	8004592 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	2b02      	cmp	r3, #2
 800447c:	d107      	bne.n	800448e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800447e:	4b73      	ldr	r3, [pc, #460]	; (800464c <HAL_RCC_ClockConfig+0x258>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d121      	bne.n	80044ce <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e0d7      	b.n	800463e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	2b03      	cmp	r3, #3
 8004494:	d107      	bne.n	80044a6 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004496:	4b6d      	ldr	r3, [pc, #436]	; (800464c <HAL_RCC_ClockConfig+0x258>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d115      	bne.n	80044ce <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e0cb      	b.n	800463e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d107      	bne.n	80044be <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80044ae:	4b67      	ldr	r3, [pc, #412]	; (800464c <HAL_RCC_ClockConfig+0x258>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0302 	and.w	r3, r3, #2
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d109      	bne.n	80044ce <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e0bf      	b.n	800463e <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80044be:	4b63      	ldr	r3, [pc, #396]	; (800464c <HAL_RCC_ClockConfig+0x258>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d101      	bne.n	80044ce <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e0b7      	b.n	800463e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044ce:	4b5f      	ldr	r3, [pc, #380]	; (800464c <HAL_RCC_ClockConfig+0x258>)
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	f023 0203 	bic.w	r2, r3, #3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	495c      	ldr	r1, [pc, #368]	; (800464c <HAL_RCC_ClockConfig+0x258>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80044e0:	f7fe fa3a 	bl	8002958 <HAL_GetTick>
 80044e4:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d112      	bne.n	8004514 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80044ee:	e00a      	b.n	8004506 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044f0:	f7fe fa32 	bl	8002958 <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80044fe:	4293      	cmp	r3, r2
 8004500:	d901      	bls.n	8004506 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e09b      	b.n	800463e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004506:	4b51      	ldr	r3, [pc, #324]	; (800464c <HAL_RCC_ClockConfig+0x258>)
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	f003 030c 	and.w	r3, r3, #12
 800450e:	2b08      	cmp	r3, #8
 8004510:	d1ee      	bne.n	80044f0 <HAL_RCC_ClockConfig+0xfc>
 8004512:	e03e      	b.n	8004592 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	2b03      	cmp	r3, #3
 800451a:	d112      	bne.n	8004542 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800451c:	e00a      	b.n	8004534 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800451e:	f7fe fa1b 	bl	8002958 <HAL_GetTick>
 8004522:	4602      	mov	r2, r0
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	f241 3288 	movw	r2, #5000	; 0x1388
 800452c:	4293      	cmp	r3, r2
 800452e:	d901      	bls.n	8004534 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8004530:	2303      	movs	r3, #3
 8004532:	e084      	b.n	800463e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004534:	4b45      	ldr	r3, [pc, #276]	; (800464c <HAL_RCC_ClockConfig+0x258>)
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f003 030c 	and.w	r3, r3, #12
 800453c:	2b0c      	cmp	r3, #12
 800453e:	d1ee      	bne.n	800451e <HAL_RCC_ClockConfig+0x12a>
 8004540:	e027      	b.n	8004592 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	2b01      	cmp	r3, #1
 8004548:	d11d      	bne.n	8004586 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800454a:	e00a      	b.n	8004562 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800454c:	f7fe fa04 	bl	8002958 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	f241 3288 	movw	r2, #5000	; 0x1388
 800455a:	4293      	cmp	r3, r2
 800455c:	d901      	bls.n	8004562 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e06d      	b.n	800463e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004562:	4b3a      	ldr	r3, [pc, #232]	; (800464c <HAL_RCC_ClockConfig+0x258>)
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f003 030c 	and.w	r3, r3, #12
 800456a:	2b04      	cmp	r3, #4
 800456c:	d1ee      	bne.n	800454c <HAL_RCC_ClockConfig+0x158>
 800456e:	e010      	b.n	8004592 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004570:	f7fe f9f2 	bl	8002958 <HAL_GetTick>
 8004574:	4602      	mov	r2, r0
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	1ad3      	subs	r3, r2, r3
 800457a:	f241 3288 	movw	r2, #5000	; 0x1388
 800457e:	4293      	cmp	r3, r2
 8004580:	d901      	bls.n	8004586 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e05b      	b.n	800463e <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004586:	4b31      	ldr	r3, [pc, #196]	; (800464c <HAL_RCC_ClockConfig+0x258>)
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f003 030c 	and.w	r3, r3, #12
 800458e:	2b00      	cmp	r3, #0
 8004590:	d1ee      	bne.n	8004570 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004592:	4b2d      	ldr	r3, [pc, #180]	; (8004648 <HAL_RCC_ClockConfig+0x254>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	683a      	ldr	r2, [r7, #0]
 800459c:	429a      	cmp	r2, r3
 800459e:	d219      	bcs.n	80045d4 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	2b01      	cmp	r3, #1
 80045a4:	d105      	bne.n	80045b2 <HAL_RCC_ClockConfig+0x1be>
 80045a6:	4b28      	ldr	r3, [pc, #160]	; (8004648 <HAL_RCC_ClockConfig+0x254>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a27      	ldr	r2, [pc, #156]	; (8004648 <HAL_RCC_ClockConfig+0x254>)
 80045ac:	f043 0304 	orr.w	r3, r3, #4
 80045b0:	6013      	str	r3, [r2, #0]
 80045b2:	4b25      	ldr	r3, [pc, #148]	; (8004648 <HAL_RCC_ClockConfig+0x254>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f023 0201 	bic.w	r2, r3, #1
 80045ba:	4923      	ldr	r1, [pc, #140]	; (8004648 <HAL_RCC_ClockConfig+0x254>)
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	4313      	orrs	r3, r2
 80045c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045c2:	4b21      	ldr	r3, [pc, #132]	; (8004648 <HAL_RCC_ClockConfig+0x254>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	683a      	ldr	r2, [r7, #0]
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d001      	beq.n	80045d4 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e034      	b.n	800463e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0304 	and.w	r3, r3, #4
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d008      	beq.n	80045f2 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045e0:	4b1a      	ldr	r3, [pc, #104]	; (800464c <HAL_RCC_ClockConfig+0x258>)
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	4917      	ldr	r1, [pc, #92]	; (800464c <HAL_RCC_ClockConfig+0x258>)
 80045ee:	4313      	orrs	r3, r2
 80045f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 0308 	and.w	r3, r3, #8
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d009      	beq.n	8004612 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045fe:	4b13      	ldr	r3, [pc, #76]	; (800464c <HAL_RCC_ClockConfig+0x258>)
 8004600:	689b      	ldr	r3, [r3, #8]
 8004602:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	00db      	lsls	r3, r3, #3
 800460c:	490f      	ldr	r1, [pc, #60]	; (800464c <HAL_RCC_ClockConfig+0x258>)
 800460e:	4313      	orrs	r3, r2
 8004610:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004612:	f000 f823 	bl	800465c <HAL_RCC_GetSysClockFreq>
 8004616:	4602      	mov	r2, r0
 8004618:	4b0c      	ldr	r3, [pc, #48]	; (800464c <HAL_RCC_ClockConfig+0x258>)
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	091b      	lsrs	r3, r3, #4
 800461e:	f003 030f 	and.w	r3, r3, #15
 8004622:	490b      	ldr	r1, [pc, #44]	; (8004650 <HAL_RCC_ClockConfig+0x25c>)
 8004624:	5ccb      	ldrb	r3, [r1, r3]
 8004626:	fa22 f303 	lsr.w	r3, r2, r3
 800462a:	4a0a      	ldr	r2, [pc, #40]	; (8004654 <HAL_RCC_ClockConfig+0x260>)
 800462c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800462e:	4b0a      	ldr	r3, [pc, #40]	; (8004658 <HAL_RCC_ClockConfig+0x264>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4618      	mov	r0, r3
 8004634:	f7fe f944 	bl	80028c0 <HAL_InitTick>
 8004638:	4603      	mov	r3, r0
 800463a:	72fb      	strb	r3, [r7, #11]

  return status;
 800463c:	7afb      	ldrb	r3, [r7, #11]
}
 800463e:	4618      	mov	r0, r3
 8004640:	3710      	adds	r7, #16
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	40023c00 	.word	0x40023c00
 800464c:	40023800 	.word	0x40023800
 8004650:	080070f8 	.word	0x080070f8
 8004654:	20000018 	.word	0x20000018
 8004658:	20000024 	.word	0x20000024

0800465c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800465c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004660:	b08e      	sub	sp, #56	; 0x38
 8004662:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8004664:	4b58      	ldr	r3, [pc, #352]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x16c>)
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800466a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800466c:	f003 030c 	and.w	r3, r3, #12
 8004670:	2b0c      	cmp	r3, #12
 8004672:	d00d      	beq.n	8004690 <HAL_RCC_GetSysClockFreq+0x34>
 8004674:	2b0c      	cmp	r3, #12
 8004676:	f200 8092 	bhi.w	800479e <HAL_RCC_GetSysClockFreq+0x142>
 800467a:	2b04      	cmp	r3, #4
 800467c:	d002      	beq.n	8004684 <HAL_RCC_GetSysClockFreq+0x28>
 800467e:	2b08      	cmp	r3, #8
 8004680:	d003      	beq.n	800468a <HAL_RCC_GetSysClockFreq+0x2e>
 8004682:	e08c      	b.n	800479e <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004684:	4b51      	ldr	r3, [pc, #324]	; (80047cc <HAL_RCC_GetSysClockFreq+0x170>)
 8004686:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004688:	e097      	b.n	80047ba <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800468a:	4b51      	ldr	r3, [pc, #324]	; (80047d0 <HAL_RCC_GetSysClockFreq+0x174>)
 800468c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800468e:	e094      	b.n	80047ba <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004692:	0c9b      	lsrs	r3, r3, #18
 8004694:	f003 020f 	and.w	r2, r3, #15
 8004698:	4b4e      	ldr	r3, [pc, #312]	; (80047d4 <HAL_RCC_GetSysClockFreq+0x178>)
 800469a:	5c9b      	ldrb	r3, [r3, r2]
 800469c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800469e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a0:	0d9b      	lsrs	r3, r3, #22
 80046a2:	f003 0303 	and.w	r3, r3, #3
 80046a6:	3301      	adds	r3, #1
 80046a8:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046aa:	4b47      	ldr	r3, [pc, #284]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x16c>)
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d021      	beq.n	80046fa <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80046b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b8:	2200      	movs	r2, #0
 80046ba:	61bb      	str	r3, [r7, #24]
 80046bc:	61fa      	str	r2, [r7, #28]
 80046be:	4b44      	ldr	r3, [pc, #272]	; (80047d0 <HAL_RCC_GetSysClockFreq+0x174>)
 80046c0:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80046c4:	464a      	mov	r2, r9
 80046c6:	fb03 f202 	mul.w	r2, r3, r2
 80046ca:	2300      	movs	r3, #0
 80046cc:	4644      	mov	r4, r8
 80046ce:	fb04 f303 	mul.w	r3, r4, r3
 80046d2:	4413      	add	r3, r2
 80046d4:	4a3e      	ldr	r2, [pc, #248]	; (80047d0 <HAL_RCC_GetSysClockFreq+0x174>)
 80046d6:	4644      	mov	r4, r8
 80046d8:	fba4 0102 	umull	r0, r1, r4, r2
 80046dc:	440b      	add	r3, r1
 80046de:	4619      	mov	r1, r3
 80046e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e2:	2200      	movs	r2, #0
 80046e4:	613b      	str	r3, [r7, #16]
 80046e6:	617a      	str	r2, [r7, #20]
 80046e8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80046ec:	f7fb fd66 	bl	80001bc <__aeabi_uldivmod>
 80046f0:	4602      	mov	r2, r0
 80046f2:	460b      	mov	r3, r1
 80046f4:	4613      	mov	r3, r2
 80046f6:	637b      	str	r3, [r7, #52]	; 0x34
 80046f8:	e04e      	b.n	8004798 <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80046fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046fc:	2200      	movs	r2, #0
 80046fe:	469a      	mov	sl, r3
 8004700:	4693      	mov	fp, r2
 8004702:	4652      	mov	r2, sl
 8004704:	465b      	mov	r3, fp
 8004706:	f04f 0000 	mov.w	r0, #0
 800470a:	f04f 0100 	mov.w	r1, #0
 800470e:	0159      	lsls	r1, r3, #5
 8004710:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004714:	0150      	lsls	r0, r2, #5
 8004716:	4602      	mov	r2, r0
 8004718:	460b      	mov	r3, r1
 800471a:	ebb2 080a 	subs.w	r8, r2, sl
 800471e:	eb63 090b 	sbc.w	r9, r3, fp
 8004722:	f04f 0200 	mov.w	r2, #0
 8004726:	f04f 0300 	mov.w	r3, #0
 800472a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800472e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004732:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004736:	ebb2 0408 	subs.w	r4, r2, r8
 800473a:	eb63 0509 	sbc.w	r5, r3, r9
 800473e:	f04f 0200 	mov.w	r2, #0
 8004742:	f04f 0300 	mov.w	r3, #0
 8004746:	00eb      	lsls	r3, r5, #3
 8004748:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800474c:	00e2      	lsls	r2, r4, #3
 800474e:	4614      	mov	r4, r2
 8004750:	461d      	mov	r5, r3
 8004752:	eb14 030a 	adds.w	r3, r4, sl
 8004756:	603b      	str	r3, [r7, #0]
 8004758:	eb45 030b 	adc.w	r3, r5, fp
 800475c:	607b      	str	r3, [r7, #4]
 800475e:	f04f 0200 	mov.w	r2, #0
 8004762:	f04f 0300 	mov.w	r3, #0
 8004766:	e9d7 4500 	ldrd	r4, r5, [r7]
 800476a:	4629      	mov	r1, r5
 800476c:	028b      	lsls	r3, r1, #10
 800476e:	4620      	mov	r0, r4
 8004770:	4629      	mov	r1, r5
 8004772:	4604      	mov	r4, r0
 8004774:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8004778:	4601      	mov	r1, r0
 800477a:	028a      	lsls	r2, r1, #10
 800477c:	4610      	mov	r0, r2
 800477e:	4619      	mov	r1, r3
 8004780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004782:	2200      	movs	r2, #0
 8004784:	60bb      	str	r3, [r7, #8]
 8004786:	60fa      	str	r2, [r7, #12]
 8004788:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800478c:	f7fb fd16 	bl	80001bc <__aeabi_uldivmod>
 8004790:	4602      	mov	r2, r0
 8004792:	460b      	mov	r3, r1
 8004794:	4613      	mov	r3, r2
 8004796:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllvco;
 8004798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800479a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800479c:	e00d      	b.n	80047ba <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800479e:	4b0a      	ldr	r3, [pc, #40]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x16c>)
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	0b5b      	lsrs	r3, r3, #13
 80047a4:	f003 0307 	and.w	r3, r3, #7
 80047a8:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80047aa:	6a3b      	ldr	r3, [r7, #32]
 80047ac:	3301      	adds	r3, #1
 80047ae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80047b2:	fa02 f303 	lsl.w	r3, r2, r3
 80047b6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80047b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3738      	adds	r7, #56	; 0x38
 80047c0:	46bd      	mov	sp, r7
 80047c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047c6:	bf00      	nop
 80047c8:	40023800 	.word	0x40023800
 80047cc:	00f42400 	.word	0x00f42400
 80047d0:	016e3600 	.word	0x016e3600
 80047d4:	080070ec 	.word	0x080070ec

080047d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047d8:	b480      	push	{r7}
 80047da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047dc:	4b02      	ldr	r3, [pc, #8]	; (80047e8 <HAL_RCC_GetHCLKFreq+0x10>)
 80047de:	681b      	ldr	r3, [r3, #0]
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bc80      	pop	{r7}
 80047e6:	4770      	bx	lr
 80047e8:	20000018 	.word	0x20000018

080047ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80047f0:	f7ff fff2 	bl	80047d8 <HAL_RCC_GetHCLKFreq>
 80047f4:	4602      	mov	r2, r0
 80047f6:	4b05      	ldr	r3, [pc, #20]	; (800480c <HAL_RCC_GetPCLK1Freq+0x20>)
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	0a1b      	lsrs	r3, r3, #8
 80047fc:	f003 0307 	and.w	r3, r3, #7
 8004800:	4903      	ldr	r1, [pc, #12]	; (8004810 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004802:	5ccb      	ldrb	r3, [r1, r3]
 8004804:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004808:	4618      	mov	r0, r3
 800480a:	bd80      	pop	{r7, pc}
 800480c:	40023800 	.word	0x40023800
 8004810:	08007108 	.word	0x08007108

08004814 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004818:	f7ff ffde 	bl	80047d8 <HAL_RCC_GetHCLKFreq>
 800481c:	4602      	mov	r2, r0
 800481e:	4b05      	ldr	r3, [pc, #20]	; (8004834 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	0adb      	lsrs	r3, r3, #11
 8004824:	f003 0307 	and.w	r3, r3, #7
 8004828:	4903      	ldr	r1, [pc, #12]	; (8004838 <HAL_RCC_GetPCLK2Freq+0x24>)
 800482a:	5ccb      	ldrb	r3, [r1, r3]
 800482c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004830:	4618      	mov	r0, r3
 8004832:	bd80      	pop	{r7, pc}
 8004834:	40023800 	.word	0x40023800
 8004838:	08007108 	.word	0x08007108

0800483c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 800483c:	b480      	push	{r7}
 800483e:	b087      	sub	sp, #28
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004844:	2300      	movs	r3, #0
 8004846:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004848:	4b29      	ldr	r3, [pc, #164]	; (80048f0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d12c      	bne.n	80048ae <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004854:	4b26      	ldr	r3, [pc, #152]	; (80048f0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004858:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d005      	beq.n	800486c <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004860:	4b24      	ldr	r3, [pc, #144]	; (80048f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8004868:	617b      	str	r3, [r7, #20]
 800486a:	e016      	b.n	800489a <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800486c:	4b20      	ldr	r3, [pc, #128]	; (80048f0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800486e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004870:	4a1f      	ldr	r2, [pc, #124]	; (80048f0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004872:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004876:	6253      	str	r3, [r2, #36]	; 0x24
 8004878:	4b1d      	ldr	r3, [pc, #116]	; (80048f0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800487a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004880:	60fb      	str	r3, [r7, #12]
 8004882:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8004884:	4b1b      	ldr	r3, [pc, #108]	; (80048f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800488c:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 800488e:	4b18      	ldr	r3, [pc, #96]	; (80048f0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004892:	4a17      	ldr	r2, [pc, #92]	; (80048f0 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8004894:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004898:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80048a0:	d105      	bne.n	80048ae <RCC_SetFlashLatencyFromMSIRange+0x72>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80048a8:	d101      	bne.n	80048ae <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80048aa:	2301      	movs	r3, #1
 80048ac:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d105      	bne.n	80048c0 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80048b4:	4b10      	ldr	r3, [pc, #64]	; (80048f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a0f      	ldr	r2, [pc, #60]	; (80048f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80048ba:	f043 0304 	orr.w	r3, r3, #4
 80048be:	6013      	str	r3, [r2, #0]
 80048c0:	4b0d      	ldr	r3, [pc, #52]	; (80048f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f023 0201 	bic.w	r2, r3, #1
 80048c8:	490b      	ldr	r1, [pc, #44]	; (80048f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80048d0:	4b09      	ldr	r3, [pc, #36]	; (80048f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 0301 	and.w	r3, r3, #1
 80048d8:	693a      	ldr	r2, [r7, #16]
 80048da:	429a      	cmp	r2, r3
 80048dc:	d001      	beq.n	80048e2 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e000      	b.n	80048e4 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80048e2:	2300      	movs	r3, #0
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	371c      	adds	r7, #28
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bc80      	pop	{r7}
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	40023800 	.word	0x40023800
 80048f4:	40007000 	.word	0x40007000
 80048f8:	40023c00 	.word	0x40023c00

080048fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d101      	bne.n	800490e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e03f      	b.n	800498e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004914:	b2db      	uxtb	r3, r3
 8004916:	2b00      	cmp	r3, #0
 8004918:	d106      	bne.n	8004928 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004922:	6878      	ldr	r0, [r7, #4]
 8004924:	f7fc fd88 	bl	8001438 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2224      	movs	r2, #36	; 0x24
 800492c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68da      	ldr	r2, [r3, #12]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800493e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 fd7f 	bl	8005444 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	691a      	ldr	r2, [r3, #16]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004954:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	695a      	ldr	r2, [r3, #20]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004964:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	68da      	ldr	r2, [r3, #12]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004974:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2220      	movs	r2, #32
 8004980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2220      	movs	r2, #32
 8004988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800498c:	2300      	movs	r3, #0
}
 800498e:	4618      	mov	r0, r3
 8004990:	3708      	adds	r7, #8
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}

08004996 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004996:	b580      	push	{r7, lr}
 8004998:	b08a      	sub	sp, #40	; 0x28
 800499a:	af02      	add	r7, sp, #8
 800499c:	60f8      	str	r0, [r7, #12]
 800499e:	60b9      	str	r1, [r7, #8]
 80049a0:	603b      	str	r3, [r7, #0]
 80049a2:	4613      	mov	r3, r2
 80049a4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80049a6:	2300      	movs	r3, #0
 80049a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	2b20      	cmp	r3, #32
 80049b4:	d17c      	bne.n	8004ab0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d002      	beq.n	80049c2 <HAL_UART_Transmit+0x2c>
 80049bc:	88fb      	ldrh	r3, [r7, #6]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d101      	bne.n	80049c6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e075      	b.n	8004ab2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d101      	bne.n	80049d4 <HAL_UART_Transmit+0x3e>
 80049d0:	2302      	movs	r3, #2
 80049d2:	e06e      	b.n	8004ab2 <HAL_UART_Transmit+0x11c>
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2200      	movs	r2, #0
 80049e0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2221      	movs	r2, #33	; 0x21
 80049e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049ea:	f7fd ffb5 	bl	8002958 <HAL_GetTick>
 80049ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	88fa      	ldrh	r2, [r7, #6]
 80049f4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	88fa      	ldrh	r2, [r7, #6]
 80049fa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a04:	d108      	bne.n	8004a18 <HAL_UART_Transmit+0x82>
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d104      	bne.n	8004a18 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	61bb      	str	r3, [r7, #24]
 8004a16:	e003      	b.n	8004a20 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004a28:	e02a      	b.n	8004a80 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	9300      	str	r3, [sp, #0]
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	2200      	movs	r2, #0
 8004a32:	2180      	movs	r1, #128	; 0x80
 8004a34:	68f8      	ldr	r0, [r7, #12]
 8004a36:	f000 faf1 	bl	800501c <UART_WaitOnFlagUntilTimeout>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d001      	beq.n	8004a44 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004a40:	2303      	movs	r3, #3
 8004a42:	e036      	b.n	8004ab2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d10b      	bne.n	8004a62 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a4a:	69bb      	ldr	r3, [r7, #24]
 8004a4c:	881b      	ldrh	r3, [r3, #0]
 8004a4e:	461a      	mov	r2, r3
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a58:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	3302      	adds	r3, #2
 8004a5e:	61bb      	str	r3, [r7, #24]
 8004a60:	e007      	b.n	8004a72 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	781a      	ldrb	r2, [r3, #0]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004a6c:	69fb      	ldr	r3, [r7, #28]
 8004a6e:	3301      	adds	r3, #1
 8004a70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a76:	b29b      	uxth	r3, r3
 8004a78:	3b01      	subs	r3, #1
 8004a7a:	b29a      	uxth	r2, r3
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d1cf      	bne.n	8004a2a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	9300      	str	r3, [sp, #0]
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	2200      	movs	r2, #0
 8004a92:	2140      	movs	r1, #64	; 0x40
 8004a94:	68f8      	ldr	r0, [r7, #12]
 8004a96:	f000 fac1 	bl	800501c <UART_WaitOnFlagUntilTimeout>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d001      	beq.n	8004aa4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	e006      	b.n	8004ab2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2220      	movs	r2, #32
 8004aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004aac:	2300      	movs	r3, #0
 8004aae:	e000      	b.n	8004ab2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004ab0:	2302      	movs	r3, #2
  }
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3720      	adds	r7, #32
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}

08004aba <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004aba:	b580      	push	{r7, lr}
 8004abc:	b084      	sub	sp, #16
 8004abe:	af00      	add	r7, sp, #0
 8004ac0:	60f8      	str	r0, [r7, #12]
 8004ac2:	60b9      	str	r1, [r7, #8]
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ace:	b2db      	uxtb	r3, r3
 8004ad0:	2b20      	cmp	r3, #32
 8004ad2:	d11d      	bne.n	8004b10 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d002      	beq.n	8004ae0 <HAL_UART_Receive_DMA+0x26>
 8004ada:	88fb      	ldrh	r3, [r7, #6]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d101      	bne.n	8004ae4 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e016      	b.n	8004b12 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d101      	bne.n	8004af2 <HAL_UART_Receive_DMA+0x38>
 8004aee:	2302      	movs	r3, #2
 8004af0:	e00f      	b.n	8004b12 <HAL_UART_Receive_DMA+0x58>
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2201      	movs	r2, #1
 8004af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8004b00:	88fb      	ldrh	r3, [r7, #6]
 8004b02:	461a      	mov	r2, r3
 8004b04:	68b9      	ldr	r1, [r7, #8]
 8004b06:	68f8      	ldr	r0, [r7, #12]
 8004b08:	f000 fad2 	bl	80050b0 <UART_Start_Receive_DMA>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	e000      	b.n	8004b12 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004b10:	2302      	movs	r3, #2
  }
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3710      	adds	r7, #16
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
	...

08004b1c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b08a      	sub	sp, #40	; 0x28
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8004b40:	2300      	movs	r3, #0
 8004b42:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b46:	f003 030f 	and.w	r3, r3, #15
 8004b4a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004b4c:	69bb      	ldr	r3, [r7, #24]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d10d      	bne.n	8004b6e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b54:	f003 0320 	and.w	r3, r3, #32
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d008      	beq.n	8004b6e <HAL_UART_IRQHandler+0x52>
 8004b5c:	6a3b      	ldr	r3, [r7, #32]
 8004b5e:	f003 0320 	and.w	r3, r3, #32
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d003      	beq.n	8004b6e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 fbc2 	bl	80052f0 <UART_Receive_IT>
      return;
 8004b6c:	e17b      	b.n	8004e66 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	f000 80b1 	beq.w	8004cd8 <HAL_UART_IRQHandler+0x1bc>
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	f003 0301 	and.w	r3, r3, #1
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d105      	bne.n	8004b8c <HAL_UART_IRQHandler+0x70>
 8004b80:	6a3b      	ldr	r3, [r7, #32]
 8004b82:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	f000 80a6 	beq.w	8004cd8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8e:	f003 0301 	and.w	r3, r3, #1
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d00a      	beq.n	8004bac <HAL_UART_IRQHandler+0x90>
 8004b96:	6a3b      	ldr	r3, [r7, #32]
 8004b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d005      	beq.n	8004bac <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba4:	f043 0201 	orr.w	r2, r3, #1
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bae:	f003 0304 	and.w	r3, r3, #4
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00a      	beq.n	8004bcc <HAL_UART_IRQHandler+0xb0>
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	f003 0301 	and.w	r3, r3, #1
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d005      	beq.n	8004bcc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc4:	f043 0202 	orr.w	r2, r3, #2
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bce:	f003 0302 	and.w	r3, r3, #2
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00a      	beq.n	8004bec <HAL_UART_IRQHandler+0xd0>
 8004bd6:	69fb      	ldr	r3, [r7, #28]
 8004bd8:	f003 0301 	and.w	r3, r3, #1
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d005      	beq.n	8004bec <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be4:	f043 0204 	orr.w	r2, r3, #4
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8004bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bee:	f003 0308 	and.w	r3, r3, #8
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d00f      	beq.n	8004c16 <HAL_UART_IRQHandler+0xfa>
 8004bf6:	6a3b      	ldr	r3, [r7, #32]
 8004bf8:	f003 0320 	and.w	r3, r3, #32
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d104      	bne.n	8004c0a <HAL_UART_IRQHandler+0xee>
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	f003 0301 	and.w	r3, r3, #1
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d005      	beq.n	8004c16 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c0e:	f043 0208 	orr.w	r2, r3, #8
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	f000 811e 	beq.w	8004e5c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c22:	f003 0320 	and.w	r3, r3, #32
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d007      	beq.n	8004c3a <HAL_UART_IRQHandler+0x11e>
 8004c2a:	6a3b      	ldr	r3, [r7, #32]
 8004c2c:	f003 0320 	and.w	r3, r3, #32
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d002      	beq.n	8004c3a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f000 fb5b 	bl	80052f0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	695b      	ldr	r3, [r3, #20]
 8004c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c44:	2b40      	cmp	r3, #64	; 0x40
 8004c46:	bf0c      	ite	eq
 8004c48:	2301      	moveq	r3, #1
 8004c4a:	2300      	movne	r3, #0
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c54:	f003 0308 	and.w	r3, r3, #8
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d102      	bne.n	8004c62 <HAL_UART_IRQHandler+0x146>
 8004c5c:	697b      	ldr	r3, [r7, #20]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d031      	beq.n	8004cc6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f000 fa9d 	bl	80051a2 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	695b      	ldr	r3, [r3, #20]
 8004c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c72:	2b40      	cmp	r3, #64	; 0x40
 8004c74:	d123      	bne.n	8004cbe <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	695a      	ldr	r2, [r3, #20]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c84:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d013      	beq.n	8004cb6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c92:	4a76      	ldr	r2, [pc, #472]	; (8004e6c <HAL_UART_IRQHandler+0x350>)
 8004c94:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f7fe fdcb 	bl	8003836 <HAL_DMA_Abort_IT>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d016      	beq.n	8004cd4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004cb0:	4610      	mov	r0, r2
 8004cb2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cb4:	e00e      	b.n	8004cd4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 f8ec 	bl	8004e94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cbc:	e00a      	b.n	8004cd4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 f8e8 	bl	8004e94 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cc4:	e006      	b.n	8004cd4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004cc6:	6878      	ldr	r0, [r7, #4]
 8004cc8:	f000 f8e4 	bl	8004e94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2200      	movs	r2, #0
 8004cd0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004cd2:	e0c3      	b.n	8004e5c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cd4:	bf00      	nop
    return;
 8004cd6:	e0c1      	b.n	8004e5c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	f040 80a1 	bne.w	8004e24 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce4:	f003 0310 	and.w	r3, r3, #16
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	f000 809b 	beq.w	8004e24 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8004cee:	6a3b      	ldr	r3, [r7, #32]
 8004cf0:	f003 0310 	and.w	r3, r3, #16
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	f000 8095 	beq.w	8004e24 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	60fb      	str	r3, [r7, #12]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	60fb      	str	r3, [r7, #12]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	60fb      	str	r3, [r7, #12]
 8004d0e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	695b      	ldr	r3, [r3, #20]
 8004d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d1a:	2b40      	cmp	r3, #64	; 0x40
 8004d1c:	d14e      	bne.n	8004dbc <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004d28:	8a3b      	ldrh	r3, [r7, #16]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	f000 8098 	beq.w	8004e60 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d34:	8a3a      	ldrh	r2, [r7, #16]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	f080 8092 	bcs.w	8004e60 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	8a3a      	ldrh	r2, [r7, #16]
 8004d40:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d46:	699b      	ldr	r3, [r3, #24]
 8004d48:	2b20      	cmp	r3, #32
 8004d4a:	d02b      	beq.n	8004da4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	68da      	ldr	r2, [r3, #12]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d5a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	695a      	ldr	r2, [r3, #20]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f022 0201 	bic.w	r2, r2, #1
 8004d6a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	695a      	ldr	r2, [r3, #20]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d7a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2220      	movs	r2, #32
 8004d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2200      	movs	r2, #0
 8004d88:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68da      	ldr	r2, [r3, #12]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f022 0210 	bic.w	r2, r2, #16
 8004d98:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f7fe fd0c 	bl	80037bc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004dac:	b29b      	uxth	r3, r3
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	b29b      	uxth	r3, r3
 8004db2:	4619      	mov	r1, r3
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f000 f876 	bl	8004ea6 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004dba:	e051      	b.n	8004e60 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d047      	beq.n	8004e64 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004dd4:	8a7b      	ldrh	r3, [r7, #18]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d044      	beq.n	8004e64 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	68da      	ldr	r2, [r3, #12]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004de8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	695a      	ldr	r2, [r3, #20]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f022 0201 	bic.w	r2, r2, #1
 8004df8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2220      	movs	r2, #32
 8004dfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	68da      	ldr	r2, [r3, #12]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f022 0210 	bic.w	r2, r2, #16
 8004e16:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004e18:	8a7b      	ldrh	r3, [r7, #18]
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f000 f842 	bl	8004ea6 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004e22:	e01f      	b.n	8004e64 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d008      	beq.n	8004e40 <HAL_UART_IRQHandler+0x324>
 8004e2e:	6a3b      	ldr	r3, [r7, #32]
 8004e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d003      	beq.n	8004e40 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f000 f9f2 	bl	8005222 <UART_Transmit_IT>
    return;
 8004e3e:	e012      	b.n	8004e66 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d00d      	beq.n	8004e66 <HAL_UART_IRQHandler+0x34a>
 8004e4a:	6a3b      	ldr	r3, [r7, #32]
 8004e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d008      	beq.n	8004e66 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 fa33 	bl	80052c0 <UART_EndTransmit_IT>
    return;
 8004e5a:	e004      	b.n	8004e66 <HAL_UART_IRQHandler+0x34a>
    return;
 8004e5c:	bf00      	nop
 8004e5e:	e002      	b.n	8004e66 <HAL_UART_IRQHandler+0x34a>
      return;
 8004e60:	bf00      	nop
 8004e62:	e000      	b.n	8004e66 <HAL_UART_IRQHandler+0x34a>
      return;
 8004e64:	bf00      	nop
  }
}
 8004e66:	3728      	adds	r7, #40	; 0x28
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	080051fb 	.word	0x080051fb

08004e70 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004e78:	bf00      	nop
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bc80      	pop	{r7}
 8004e80:	4770      	bx	lr

08004e82 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004e82:	b480      	push	{r7}
 8004e84:	b083      	sub	sp, #12
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004e8a:	bf00      	nop
 8004e8c:	370c      	adds	r7, #12
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bc80      	pop	{r7}
 8004e92:	4770      	bx	lr

08004e94 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b083      	sub	sp, #12
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004e9c:	bf00      	nop
 8004e9e:	370c      	adds	r7, #12
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bc80      	pop	{r7}
 8004ea4:	4770      	bx	lr

08004ea6 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ea6:	b480      	push	{r7}
 8004ea8:	b083      	sub	sp, #12
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
 8004eae:	460b      	mov	r3, r1
 8004eb0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004eb2:	bf00      	nop
 8004eb4:	370c      	adds	r7, #12
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bc80      	pop	{r7}
 8004eba:	4770      	bx	lr

08004ebc <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec8:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0320 	and.w	r3, r3, #32
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d12a      	bne.n	8004f2e <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2200      	movs	r2, #0
 8004edc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	68da      	ldr	r2, [r3, #12]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004eec:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	695a      	ldr	r2, [r3, #20]
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f022 0201 	bic.w	r2, r2, #1
 8004efc:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	695a      	ldr	r2, [r3, #20]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f0c:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2220      	movs	r2, #32
 8004f12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d107      	bne.n	8004f2e <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68da      	ldr	r2, [r3, #12]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f022 0210 	bic.w	r2, r2, #16
 8004f2c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d106      	bne.n	8004f44 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	68f8      	ldr	r0, [r7, #12]
 8004f3e:	f7ff ffb2 	bl	8004ea6 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004f42:	e002      	b.n	8004f4a <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8004f44:	68f8      	ldr	r0, [r7, #12]
 8004f46:	f7fc f81b 	bl	8000f80 <HAL_UART_RxCpltCallback>
}
 8004f4a:	bf00      	nop
 8004f4c:	3710      	adds	r7, #16
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}

08004f52 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004f52:	b580      	push	{r7, lr}
 8004f54:	b084      	sub	sp, #16
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d108      	bne.n	8004f7a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004f6c:	085b      	lsrs	r3, r3, #1
 8004f6e:	b29b      	uxth	r3, r3
 8004f70:	4619      	mov	r1, r3
 8004f72:	68f8      	ldr	r0, [r7, #12]
 8004f74:	f7ff ff97 	bl	8004ea6 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004f78:	e002      	b.n	8004f80 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004f7a:	68f8      	ldr	r0, [r7, #12]
 8004f7c:	f7ff ff81 	bl	8004e82 <HAL_UART_RxHalfCpltCallback>
}
 8004f80:	bf00      	nop
 8004f82:	3710      	adds	r7, #16
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004f90:	2300      	movs	r3, #0
 8004f92:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f98:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	695b      	ldr	r3, [r3, #20]
 8004fa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fa4:	2b80      	cmp	r3, #128	; 0x80
 8004fa6:	bf0c      	ite	eq
 8004fa8:	2301      	moveq	r3, #1
 8004faa:	2300      	movne	r3, #0
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fb6:	b2db      	uxtb	r3, r3
 8004fb8:	2b21      	cmp	r3, #33	; 0x21
 8004fba:	d108      	bne.n	8004fce <UART_DMAError+0x46>
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d005      	beq.n	8004fce <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004fc8:	68b8      	ldr	r0, [r7, #8]
 8004fca:	f000 f8d5 	bl	8005178 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	695b      	ldr	r3, [r3, #20]
 8004fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fd8:	2b40      	cmp	r3, #64	; 0x40
 8004fda:	bf0c      	ite	eq
 8004fdc:	2301      	moveq	r3, #1
 8004fde:	2300      	movne	r3, #0
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	2b22      	cmp	r3, #34	; 0x22
 8004fee:	d108      	bne.n	8005002 <UART_DMAError+0x7a>
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d005      	beq.n	8005002 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004ffc:	68b8      	ldr	r0, [r7, #8]
 8004ffe:	f000 f8d0 	bl	80051a2 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005006:	f043 0210 	orr.w	r2, r3, #16
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800500e:	68b8      	ldr	r0, [r7, #8]
 8005010:	f7ff ff40 	bl	8004e94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005014:	bf00      	nop
 8005016:	3710      	adds	r7, #16
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}

0800501c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	603b      	str	r3, [r7, #0]
 8005028:	4613      	mov	r3, r2
 800502a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800502c:	e02c      	b.n	8005088 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800502e:	69bb      	ldr	r3, [r7, #24]
 8005030:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005034:	d028      	beq.n	8005088 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d007      	beq.n	800504c <UART_WaitOnFlagUntilTimeout+0x30>
 800503c:	f7fd fc8c 	bl	8002958 <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	69ba      	ldr	r2, [r7, #24]
 8005048:	429a      	cmp	r2, r3
 800504a:	d21d      	bcs.n	8005088 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	68da      	ldr	r2, [r3, #12]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800505a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	695a      	ldr	r2, [r3, #20]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f022 0201 	bic.w	r2, r2, #1
 800506a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2220      	movs	r2, #32
 8005070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2220      	movs	r2, #32
 8005078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2200      	movs	r2, #0
 8005080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005084:	2303      	movs	r3, #3
 8005086:	e00f      	b.n	80050a8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	4013      	ands	r3, r2
 8005092:	68ba      	ldr	r2, [r7, #8]
 8005094:	429a      	cmp	r2, r3
 8005096:	bf0c      	ite	eq
 8005098:	2301      	moveq	r3, #1
 800509a:	2300      	movne	r3, #0
 800509c:	b2db      	uxtb	r3, r3
 800509e:	461a      	mov	r2, r3
 80050a0:	79fb      	ldrb	r3, [r7, #7]
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d0c3      	beq.n	800502e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80050a6:	2300      	movs	r3, #0
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3710      	adds	r7, #16
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b086      	sub	sp, #24
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	4613      	mov	r3, r2
 80050bc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80050be:	68ba      	ldr	r2, [r7, #8]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	88fa      	ldrh	r2, [r7, #6]
 80050c8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2200      	movs	r2, #0
 80050ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2222      	movs	r2, #34	; 0x22
 80050d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050dc:	4a23      	ldr	r2, [pc, #140]	; (800516c <UART_Start_Receive_DMA+0xbc>)
 80050de:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e4:	4a22      	ldr	r2, [pc, #136]	; (8005170 <UART_Start_Receive_DMA+0xc0>)
 80050e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050ec:	4a21      	ldr	r2, [pc, #132]	; (8005174 <UART_Start_Receive_DMA+0xc4>)
 80050ee:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f4:	2200      	movs	r2, #0
 80050f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80050f8:	f107 0308 	add.w	r3, r7, #8
 80050fc:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	3304      	adds	r3, #4
 8005108:	4619      	mov	r1, r3
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	681a      	ldr	r2, [r3, #0]
 800510e:	88fb      	ldrh	r3, [r7, #6]
 8005110:	f7fe faf4 	bl	80036fc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005114:	2300      	movs	r3, #0
 8005116:	613b      	str	r3, [r7, #16]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	613b      	str	r3, [r7, #16]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	613b      	str	r3, [r7, #16]
 8005128:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2200      	movs	r2, #0
 800512e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	68da      	ldr	r2, [r3, #12]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005140:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	695a      	ldr	r2, [r3, #20]
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f042 0201 	orr.w	r2, r2, #1
 8005150:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	695a      	ldr	r2, [r3, #20]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005160:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8005162:	2300      	movs	r3, #0
}
 8005164:	4618      	mov	r0, r3
 8005166:	3718      	adds	r7, #24
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}
 800516c:	08004ebd 	.word	0x08004ebd
 8005170:	08004f53 	.word	0x08004f53
 8005174:	08004f89 	.word	0x08004f89

08005178 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	68da      	ldr	r2, [r3, #12]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800518e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2220      	movs	r2, #32
 8005194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005198:	bf00      	nop
 800519a:	370c      	adds	r7, #12
 800519c:	46bd      	mov	sp, r7
 800519e:	bc80      	pop	{r7}
 80051a0:	4770      	bx	lr

080051a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051a2:	b480      	push	{r7}
 80051a4:	b083      	sub	sp, #12
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68da      	ldr	r2, [r3, #12]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80051b8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	695a      	ldr	r2, [r3, #20]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f022 0201 	bic.w	r2, r2, #1
 80051c8:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ce:	2b01      	cmp	r3, #1
 80051d0:	d107      	bne.n	80051e2 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	68da      	ldr	r2, [r3, #12]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f022 0210 	bic.w	r2, r2, #16
 80051e0:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2220      	movs	r2, #32
 80051e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2200      	movs	r2, #0
 80051ee:	631a      	str	r2, [r3, #48]	; 0x30
}
 80051f0:	bf00      	nop
 80051f2:	370c      	adds	r7, #12
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bc80      	pop	{r7}
 80051f8:	4770      	bx	lr

080051fa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80051fa:	b580      	push	{r7, lr}
 80051fc:	b084      	sub	sp, #16
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005206:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2200      	movs	r2, #0
 800520c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	2200      	movs	r2, #0
 8005212:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005214:	68f8      	ldr	r0, [r7, #12]
 8005216:	f7ff fe3d 	bl	8004e94 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800521a:	bf00      	nop
 800521c:	3710      	adds	r7, #16
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}

08005222 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005222:	b480      	push	{r7}
 8005224:	b085      	sub	sp, #20
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005230:	b2db      	uxtb	r3, r3
 8005232:	2b21      	cmp	r3, #33	; 0x21
 8005234:	d13e      	bne.n	80052b4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800523e:	d114      	bne.n	800526a <UART_Transmit_IT+0x48>
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	691b      	ldr	r3, [r3, #16]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d110      	bne.n	800526a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6a1b      	ldr	r3, [r3, #32]
 800524c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	881b      	ldrh	r3, [r3, #0]
 8005252:	461a      	mov	r2, r3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800525c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a1b      	ldr	r3, [r3, #32]
 8005262:	1c9a      	adds	r2, r3, #2
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	621a      	str	r2, [r3, #32]
 8005268:	e008      	b.n	800527c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a1b      	ldr	r3, [r3, #32]
 800526e:	1c59      	adds	r1, r3, #1
 8005270:	687a      	ldr	r2, [r7, #4]
 8005272:	6211      	str	r1, [r2, #32]
 8005274:	781a      	ldrb	r2, [r3, #0]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005280:	b29b      	uxth	r3, r3
 8005282:	3b01      	subs	r3, #1
 8005284:	b29b      	uxth	r3, r3
 8005286:	687a      	ldr	r2, [r7, #4]
 8005288:	4619      	mov	r1, r3
 800528a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800528c:	2b00      	cmp	r3, #0
 800528e:	d10f      	bne.n	80052b0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68da      	ldr	r2, [r3, #12]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800529e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68da      	ldr	r2, [r3, #12]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80052ae:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80052b0:	2300      	movs	r3, #0
 80052b2:	e000      	b.n	80052b6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80052b4:	2302      	movs	r3, #2
  }
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3714      	adds	r7, #20
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bc80      	pop	{r7}
 80052be:	4770      	bx	lr

080052c0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	68da      	ldr	r2, [r3, #12]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052d6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2220      	movs	r2, #32
 80052dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f7ff fdc5 	bl	8004e70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3708      	adds	r7, #8
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b086      	sub	sp, #24
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	2b22      	cmp	r3, #34	; 0x22
 8005302:	f040 8099 	bne.w	8005438 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800530e:	d117      	bne.n	8005340 <UART_Receive_IT+0x50>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	691b      	ldr	r3, [r3, #16]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d113      	bne.n	8005340 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005318:	2300      	movs	r3, #0
 800531a:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005320:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	b29b      	uxth	r3, r3
 800532a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800532e:	b29a      	uxth	r2, r3
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005338:	1c9a      	adds	r2, r3, #2
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	629a      	str	r2, [r3, #40]	; 0x28
 800533e:	e026      	b.n	800538e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005344:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8005346:	2300      	movs	r3, #0
 8005348:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005352:	d007      	beq.n	8005364 <UART_Receive_IT+0x74>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d10a      	bne.n	8005372 <UART_Receive_IT+0x82>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	691b      	ldr	r3, [r3, #16]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d106      	bne.n	8005372 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	b2da      	uxtb	r2, r3
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	701a      	strb	r2, [r3, #0]
 8005370:	e008      	b.n	8005384 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	b2db      	uxtb	r3, r3
 800537a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800537e:	b2da      	uxtb	r2, r3
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005388:	1c5a      	adds	r2, r3, #1
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005392:	b29b      	uxth	r3, r3
 8005394:	3b01      	subs	r3, #1
 8005396:	b29b      	uxth	r3, r3
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	4619      	mov	r1, r3
 800539c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d148      	bne.n	8005434 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	68da      	ldr	r2, [r3, #12]
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f022 0220 	bic.w	r2, r2, #32
 80053b0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68da      	ldr	r2, [r3, #12]
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80053c0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	695a      	ldr	r2, [r3, #20]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f022 0201 	bic.w	r2, r2, #1
 80053d0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2220      	movs	r2, #32
 80053d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d123      	bne.n	800542a <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	68da      	ldr	r2, [r3, #12]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f022 0210 	bic.w	r2, r2, #16
 80053f6:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0310 	and.w	r3, r3, #16
 8005402:	2b10      	cmp	r3, #16
 8005404:	d10a      	bne.n	800541c <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005406:	2300      	movs	r3, #0
 8005408:	60fb      	str	r3, [r7, #12]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	60fb      	str	r3, [r7, #12]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	60fb      	str	r3, [r7, #12]
 800541a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005420:	4619      	mov	r1, r3
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f7ff fd3f 	bl	8004ea6 <HAL_UARTEx_RxEventCallback>
 8005428:	e002      	b.n	8005430 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f7fb fda8 	bl	8000f80 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005430:	2300      	movs	r3, #0
 8005432:	e002      	b.n	800543a <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8005434:	2300      	movs	r3, #0
 8005436:	e000      	b.n	800543a <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005438:	2302      	movs	r3, #2
  }
}
 800543a:	4618      	mov	r0, r3
 800543c:	3718      	adds	r7, #24
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}
	...

08005444 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b084      	sub	sp, #16
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	68da      	ldr	r2, [r3, #12]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	430a      	orrs	r2, r1
 8005460:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	689a      	ldr	r2, [r3, #8]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	431a      	orrs	r2, r3
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	695b      	ldr	r3, [r3, #20]
 8005470:	431a      	orrs	r2, r3
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	69db      	ldr	r3, [r3, #28]
 8005476:	4313      	orrs	r3, r2
 8005478:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005484:	f023 030c 	bic.w	r3, r3, #12
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	6812      	ldr	r2, [r2, #0]
 800548c:	68b9      	ldr	r1, [r7, #8]
 800548e:	430b      	orrs	r3, r1
 8005490:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	695b      	ldr	r3, [r3, #20]
 8005498:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	699a      	ldr	r2, [r3, #24]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	430a      	orrs	r2, r1
 80054a6:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a55      	ldr	r2, [pc, #340]	; (8005604 <UART_SetConfig+0x1c0>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d103      	bne.n	80054ba <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80054b2:	f7ff f9af 	bl	8004814 <HAL_RCC_GetPCLK2Freq>
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	e002      	b.n	80054c0 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80054ba:	f7ff f997 	bl	80047ec <HAL_RCC_GetPCLK1Freq>
 80054be:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	69db      	ldr	r3, [r3, #28]
 80054c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054c8:	d14c      	bne.n	8005564 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80054ca:	68fa      	ldr	r2, [r7, #12]
 80054cc:	4613      	mov	r3, r2
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	4413      	add	r3, r2
 80054d2:	009a      	lsls	r2, r3, #2
 80054d4:	441a      	add	r2, r3
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	005b      	lsls	r3, r3, #1
 80054dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80054e0:	4a49      	ldr	r2, [pc, #292]	; (8005608 <UART_SetConfig+0x1c4>)
 80054e2:	fba2 2303 	umull	r2, r3, r2, r3
 80054e6:	095b      	lsrs	r3, r3, #5
 80054e8:	0119      	lsls	r1, r3, #4
 80054ea:	68fa      	ldr	r2, [r7, #12]
 80054ec:	4613      	mov	r3, r2
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	4413      	add	r3, r2
 80054f2:	009a      	lsls	r2, r3, #2
 80054f4:	441a      	add	r2, r3
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	005b      	lsls	r3, r3, #1
 80054fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8005500:	4b41      	ldr	r3, [pc, #260]	; (8005608 <UART_SetConfig+0x1c4>)
 8005502:	fba3 0302 	umull	r0, r3, r3, r2
 8005506:	095b      	lsrs	r3, r3, #5
 8005508:	2064      	movs	r0, #100	; 0x64
 800550a:	fb00 f303 	mul.w	r3, r0, r3
 800550e:	1ad3      	subs	r3, r2, r3
 8005510:	00db      	lsls	r3, r3, #3
 8005512:	3332      	adds	r3, #50	; 0x32
 8005514:	4a3c      	ldr	r2, [pc, #240]	; (8005608 <UART_SetConfig+0x1c4>)
 8005516:	fba2 2303 	umull	r2, r3, r2, r3
 800551a:	095b      	lsrs	r3, r3, #5
 800551c:	005b      	lsls	r3, r3, #1
 800551e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005522:	4419      	add	r1, r3
 8005524:	68fa      	ldr	r2, [r7, #12]
 8005526:	4613      	mov	r3, r2
 8005528:	009b      	lsls	r3, r3, #2
 800552a:	4413      	add	r3, r2
 800552c:	009a      	lsls	r2, r3, #2
 800552e:	441a      	add	r2, r3
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	005b      	lsls	r3, r3, #1
 8005536:	fbb2 f2f3 	udiv	r2, r2, r3
 800553a:	4b33      	ldr	r3, [pc, #204]	; (8005608 <UART_SetConfig+0x1c4>)
 800553c:	fba3 0302 	umull	r0, r3, r3, r2
 8005540:	095b      	lsrs	r3, r3, #5
 8005542:	2064      	movs	r0, #100	; 0x64
 8005544:	fb00 f303 	mul.w	r3, r0, r3
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	00db      	lsls	r3, r3, #3
 800554c:	3332      	adds	r3, #50	; 0x32
 800554e:	4a2e      	ldr	r2, [pc, #184]	; (8005608 <UART_SetConfig+0x1c4>)
 8005550:	fba2 2303 	umull	r2, r3, r2, r3
 8005554:	095b      	lsrs	r3, r3, #5
 8005556:	f003 0207 	and.w	r2, r3, #7
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	440a      	add	r2, r1
 8005560:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005562:	e04a      	b.n	80055fa <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005564:	68fa      	ldr	r2, [r7, #12]
 8005566:	4613      	mov	r3, r2
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	4413      	add	r3, r2
 800556c:	009a      	lsls	r2, r3, #2
 800556e:	441a      	add	r2, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	fbb2 f3f3 	udiv	r3, r2, r3
 800557a:	4a23      	ldr	r2, [pc, #140]	; (8005608 <UART_SetConfig+0x1c4>)
 800557c:	fba2 2303 	umull	r2, r3, r2, r3
 8005580:	095b      	lsrs	r3, r3, #5
 8005582:	0119      	lsls	r1, r3, #4
 8005584:	68fa      	ldr	r2, [r7, #12]
 8005586:	4613      	mov	r3, r2
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	4413      	add	r3, r2
 800558c:	009a      	lsls	r2, r3, #2
 800558e:	441a      	add	r2, r3
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	009b      	lsls	r3, r3, #2
 8005596:	fbb2 f2f3 	udiv	r2, r2, r3
 800559a:	4b1b      	ldr	r3, [pc, #108]	; (8005608 <UART_SetConfig+0x1c4>)
 800559c:	fba3 0302 	umull	r0, r3, r3, r2
 80055a0:	095b      	lsrs	r3, r3, #5
 80055a2:	2064      	movs	r0, #100	; 0x64
 80055a4:	fb00 f303 	mul.w	r3, r0, r3
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	011b      	lsls	r3, r3, #4
 80055ac:	3332      	adds	r3, #50	; 0x32
 80055ae:	4a16      	ldr	r2, [pc, #88]	; (8005608 <UART_SetConfig+0x1c4>)
 80055b0:	fba2 2303 	umull	r2, r3, r2, r3
 80055b4:	095b      	lsrs	r3, r3, #5
 80055b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055ba:	4419      	add	r1, r3
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	4613      	mov	r3, r2
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	4413      	add	r3, r2
 80055c4:	009a      	lsls	r2, r3, #2
 80055c6:	441a      	add	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	009b      	lsls	r3, r3, #2
 80055ce:	fbb2 f2f3 	udiv	r2, r2, r3
 80055d2:	4b0d      	ldr	r3, [pc, #52]	; (8005608 <UART_SetConfig+0x1c4>)
 80055d4:	fba3 0302 	umull	r0, r3, r3, r2
 80055d8:	095b      	lsrs	r3, r3, #5
 80055da:	2064      	movs	r0, #100	; 0x64
 80055dc:	fb00 f303 	mul.w	r3, r0, r3
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	011b      	lsls	r3, r3, #4
 80055e4:	3332      	adds	r3, #50	; 0x32
 80055e6:	4a08      	ldr	r2, [pc, #32]	; (8005608 <UART_SetConfig+0x1c4>)
 80055e8:	fba2 2303 	umull	r2, r3, r2, r3
 80055ec:	095b      	lsrs	r3, r3, #5
 80055ee:	f003 020f 	and.w	r2, r3, #15
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	440a      	add	r2, r1
 80055f8:	609a      	str	r2, [r3, #8]
}
 80055fa:	bf00      	nop
 80055fc:	3710      	adds	r7, #16
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	40013800 	.word	0x40013800
 8005608:	51eb851f 	.word	0x51eb851f

0800560c <__errno>:
 800560c:	4b01      	ldr	r3, [pc, #4]	; (8005614 <__errno+0x8>)
 800560e:	6818      	ldr	r0, [r3, #0]
 8005610:	4770      	bx	lr
 8005612:	bf00      	nop
 8005614:	2000002c 	.word	0x2000002c

08005618 <__libc_init_array>:
 8005618:	b570      	push	{r4, r5, r6, lr}
 800561a:	2600      	movs	r6, #0
 800561c:	4d0c      	ldr	r5, [pc, #48]	; (8005650 <__libc_init_array+0x38>)
 800561e:	4c0d      	ldr	r4, [pc, #52]	; (8005654 <__libc_init_array+0x3c>)
 8005620:	1b64      	subs	r4, r4, r5
 8005622:	10a4      	asrs	r4, r4, #2
 8005624:	42a6      	cmp	r6, r4
 8005626:	d109      	bne.n	800563c <__libc_init_array+0x24>
 8005628:	f001 f97c 	bl	8006924 <_init>
 800562c:	2600      	movs	r6, #0
 800562e:	4d0a      	ldr	r5, [pc, #40]	; (8005658 <__libc_init_array+0x40>)
 8005630:	4c0a      	ldr	r4, [pc, #40]	; (800565c <__libc_init_array+0x44>)
 8005632:	1b64      	subs	r4, r4, r5
 8005634:	10a4      	asrs	r4, r4, #2
 8005636:	42a6      	cmp	r6, r4
 8005638:	d105      	bne.n	8005646 <__libc_init_array+0x2e>
 800563a:	bd70      	pop	{r4, r5, r6, pc}
 800563c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005640:	4798      	blx	r3
 8005642:	3601      	adds	r6, #1
 8005644:	e7ee      	b.n	8005624 <__libc_init_array+0xc>
 8005646:	f855 3b04 	ldr.w	r3, [r5], #4
 800564a:	4798      	blx	r3
 800564c:	3601      	adds	r6, #1
 800564e:	e7f2      	b.n	8005636 <__libc_init_array+0x1e>
 8005650:	0800737c 	.word	0x0800737c
 8005654:	0800737c 	.word	0x0800737c
 8005658:	0800737c 	.word	0x0800737c
 800565c:	08007380 	.word	0x08007380

08005660 <memcmp>:
 8005660:	b510      	push	{r4, lr}
 8005662:	3901      	subs	r1, #1
 8005664:	4402      	add	r2, r0
 8005666:	4290      	cmp	r0, r2
 8005668:	d101      	bne.n	800566e <memcmp+0xe>
 800566a:	2000      	movs	r0, #0
 800566c:	e005      	b.n	800567a <memcmp+0x1a>
 800566e:	7803      	ldrb	r3, [r0, #0]
 8005670:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005674:	42a3      	cmp	r3, r4
 8005676:	d001      	beq.n	800567c <memcmp+0x1c>
 8005678:	1b18      	subs	r0, r3, r4
 800567a:	bd10      	pop	{r4, pc}
 800567c:	3001      	adds	r0, #1
 800567e:	e7f2      	b.n	8005666 <memcmp+0x6>

08005680 <memcpy>:
 8005680:	440a      	add	r2, r1
 8005682:	4291      	cmp	r1, r2
 8005684:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005688:	d100      	bne.n	800568c <memcpy+0xc>
 800568a:	4770      	bx	lr
 800568c:	b510      	push	{r4, lr}
 800568e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005692:	4291      	cmp	r1, r2
 8005694:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005698:	d1f9      	bne.n	800568e <memcpy+0xe>
 800569a:	bd10      	pop	{r4, pc}

0800569c <memset>:
 800569c:	4603      	mov	r3, r0
 800569e:	4402      	add	r2, r0
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d100      	bne.n	80056a6 <memset+0xa>
 80056a4:	4770      	bx	lr
 80056a6:	f803 1b01 	strb.w	r1, [r3], #1
 80056aa:	e7f9      	b.n	80056a0 <memset+0x4>

080056ac <sniprintf>:
 80056ac:	b40c      	push	{r2, r3}
 80056ae:	b530      	push	{r4, r5, lr}
 80056b0:	4b17      	ldr	r3, [pc, #92]	; (8005710 <sniprintf+0x64>)
 80056b2:	1e0c      	subs	r4, r1, #0
 80056b4:	681d      	ldr	r5, [r3, #0]
 80056b6:	b09d      	sub	sp, #116	; 0x74
 80056b8:	da08      	bge.n	80056cc <sniprintf+0x20>
 80056ba:	238b      	movs	r3, #139	; 0x8b
 80056bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80056c0:	602b      	str	r3, [r5, #0]
 80056c2:	b01d      	add	sp, #116	; 0x74
 80056c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80056c8:	b002      	add	sp, #8
 80056ca:	4770      	bx	lr
 80056cc:	f44f 7302 	mov.w	r3, #520	; 0x208
 80056d0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80056d4:	bf0c      	ite	eq
 80056d6:	4623      	moveq	r3, r4
 80056d8:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80056dc:	9304      	str	r3, [sp, #16]
 80056de:	9307      	str	r3, [sp, #28]
 80056e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80056e4:	9002      	str	r0, [sp, #8]
 80056e6:	9006      	str	r0, [sp, #24]
 80056e8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80056ec:	4628      	mov	r0, r5
 80056ee:	ab21      	add	r3, sp, #132	; 0x84
 80056f0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80056f2:	a902      	add	r1, sp, #8
 80056f4:	9301      	str	r3, [sp, #4]
 80056f6:	f000 f89d 	bl	8005834 <_svfiprintf_r>
 80056fa:	1c43      	adds	r3, r0, #1
 80056fc:	bfbc      	itt	lt
 80056fe:	238b      	movlt	r3, #139	; 0x8b
 8005700:	602b      	strlt	r3, [r5, #0]
 8005702:	2c00      	cmp	r4, #0
 8005704:	d0dd      	beq.n	80056c2 <sniprintf+0x16>
 8005706:	2200      	movs	r2, #0
 8005708:	9b02      	ldr	r3, [sp, #8]
 800570a:	701a      	strb	r2, [r3, #0]
 800570c:	e7d9      	b.n	80056c2 <sniprintf+0x16>
 800570e:	bf00      	nop
 8005710:	2000002c 	.word	0x2000002c

08005714 <siscanf>:
 8005714:	b40e      	push	{r1, r2, r3}
 8005716:	f44f 7201 	mov.w	r2, #516	; 0x204
 800571a:	b530      	push	{r4, r5, lr}
 800571c:	b09c      	sub	sp, #112	; 0x70
 800571e:	ac1f      	add	r4, sp, #124	; 0x7c
 8005720:	f854 5b04 	ldr.w	r5, [r4], #4
 8005724:	f8ad 2014 	strh.w	r2, [sp, #20]
 8005728:	9002      	str	r0, [sp, #8]
 800572a:	9006      	str	r0, [sp, #24]
 800572c:	f7fa fd3e 	bl	80001ac <strlen>
 8005730:	4b0b      	ldr	r3, [pc, #44]	; (8005760 <siscanf+0x4c>)
 8005732:	9003      	str	r0, [sp, #12]
 8005734:	930b      	str	r3, [sp, #44]	; 0x2c
 8005736:	2300      	movs	r3, #0
 8005738:	930f      	str	r3, [sp, #60]	; 0x3c
 800573a:	9314      	str	r3, [sp, #80]	; 0x50
 800573c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005740:	9007      	str	r0, [sp, #28]
 8005742:	4808      	ldr	r0, [pc, #32]	; (8005764 <siscanf+0x50>)
 8005744:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005748:	462a      	mov	r2, r5
 800574a:	4623      	mov	r3, r4
 800574c:	a902      	add	r1, sp, #8
 800574e:	6800      	ldr	r0, [r0, #0]
 8005750:	9401      	str	r4, [sp, #4]
 8005752:	f000 f9c9 	bl	8005ae8 <__ssvfiscanf_r>
 8005756:	b01c      	add	sp, #112	; 0x70
 8005758:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800575c:	b003      	add	sp, #12
 800575e:	4770      	bx	lr
 8005760:	08005769 	.word	0x08005769
 8005764:	2000002c 	.word	0x2000002c

08005768 <__seofread>:
 8005768:	2000      	movs	r0, #0
 800576a:	4770      	bx	lr

0800576c <strcpy>:
 800576c:	4603      	mov	r3, r0
 800576e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005772:	f803 2b01 	strb.w	r2, [r3], #1
 8005776:	2a00      	cmp	r2, #0
 8005778:	d1f9      	bne.n	800576e <strcpy+0x2>
 800577a:	4770      	bx	lr

0800577c <__ssputs_r>:
 800577c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005780:	688e      	ldr	r6, [r1, #8]
 8005782:	4682      	mov	sl, r0
 8005784:	429e      	cmp	r6, r3
 8005786:	460c      	mov	r4, r1
 8005788:	4690      	mov	r8, r2
 800578a:	461f      	mov	r7, r3
 800578c:	d838      	bhi.n	8005800 <__ssputs_r+0x84>
 800578e:	898a      	ldrh	r2, [r1, #12]
 8005790:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005794:	d032      	beq.n	80057fc <__ssputs_r+0x80>
 8005796:	6825      	ldr	r5, [r4, #0]
 8005798:	6909      	ldr	r1, [r1, #16]
 800579a:	3301      	adds	r3, #1
 800579c:	eba5 0901 	sub.w	r9, r5, r1
 80057a0:	6965      	ldr	r5, [r4, #20]
 80057a2:	444b      	add	r3, r9
 80057a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80057a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80057ac:	106d      	asrs	r5, r5, #1
 80057ae:	429d      	cmp	r5, r3
 80057b0:	bf38      	it	cc
 80057b2:	461d      	movcc	r5, r3
 80057b4:	0553      	lsls	r3, r2, #21
 80057b6:	d531      	bpl.n	800581c <__ssputs_r+0xa0>
 80057b8:	4629      	mov	r1, r5
 80057ba:	f000 ffeb 	bl	8006794 <_malloc_r>
 80057be:	4606      	mov	r6, r0
 80057c0:	b950      	cbnz	r0, 80057d8 <__ssputs_r+0x5c>
 80057c2:	230c      	movs	r3, #12
 80057c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057c8:	f8ca 3000 	str.w	r3, [sl]
 80057cc:	89a3      	ldrh	r3, [r4, #12]
 80057ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80057d2:	81a3      	strh	r3, [r4, #12]
 80057d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057d8:	464a      	mov	r2, r9
 80057da:	6921      	ldr	r1, [r4, #16]
 80057dc:	f7ff ff50 	bl	8005680 <memcpy>
 80057e0:	89a3      	ldrh	r3, [r4, #12]
 80057e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80057e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057ea:	81a3      	strh	r3, [r4, #12]
 80057ec:	6126      	str	r6, [r4, #16]
 80057ee:	444e      	add	r6, r9
 80057f0:	6026      	str	r6, [r4, #0]
 80057f2:	463e      	mov	r6, r7
 80057f4:	6165      	str	r5, [r4, #20]
 80057f6:	eba5 0509 	sub.w	r5, r5, r9
 80057fa:	60a5      	str	r5, [r4, #8]
 80057fc:	42be      	cmp	r6, r7
 80057fe:	d900      	bls.n	8005802 <__ssputs_r+0x86>
 8005800:	463e      	mov	r6, r7
 8005802:	4632      	mov	r2, r6
 8005804:	4641      	mov	r1, r8
 8005806:	6820      	ldr	r0, [r4, #0]
 8005808:	f000 ff42 	bl	8006690 <memmove>
 800580c:	68a3      	ldr	r3, [r4, #8]
 800580e:	2000      	movs	r0, #0
 8005810:	1b9b      	subs	r3, r3, r6
 8005812:	60a3      	str	r3, [r4, #8]
 8005814:	6823      	ldr	r3, [r4, #0]
 8005816:	4433      	add	r3, r6
 8005818:	6023      	str	r3, [r4, #0]
 800581a:	e7db      	b.n	80057d4 <__ssputs_r+0x58>
 800581c:	462a      	mov	r2, r5
 800581e:	f001 f82d 	bl	800687c <_realloc_r>
 8005822:	4606      	mov	r6, r0
 8005824:	2800      	cmp	r0, #0
 8005826:	d1e1      	bne.n	80057ec <__ssputs_r+0x70>
 8005828:	4650      	mov	r0, sl
 800582a:	6921      	ldr	r1, [r4, #16]
 800582c:	f000 ff4a 	bl	80066c4 <_free_r>
 8005830:	e7c7      	b.n	80057c2 <__ssputs_r+0x46>
	...

08005834 <_svfiprintf_r>:
 8005834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005838:	4698      	mov	r8, r3
 800583a:	898b      	ldrh	r3, [r1, #12]
 800583c:	4607      	mov	r7, r0
 800583e:	061b      	lsls	r3, r3, #24
 8005840:	460d      	mov	r5, r1
 8005842:	4614      	mov	r4, r2
 8005844:	b09d      	sub	sp, #116	; 0x74
 8005846:	d50e      	bpl.n	8005866 <_svfiprintf_r+0x32>
 8005848:	690b      	ldr	r3, [r1, #16]
 800584a:	b963      	cbnz	r3, 8005866 <_svfiprintf_r+0x32>
 800584c:	2140      	movs	r1, #64	; 0x40
 800584e:	f000 ffa1 	bl	8006794 <_malloc_r>
 8005852:	6028      	str	r0, [r5, #0]
 8005854:	6128      	str	r0, [r5, #16]
 8005856:	b920      	cbnz	r0, 8005862 <_svfiprintf_r+0x2e>
 8005858:	230c      	movs	r3, #12
 800585a:	603b      	str	r3, [r7, #0]
 800585c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005860:	e0d1      	b.n	8005a06 <_svfiprintf_r+0x1d2>
 8005862:	2340      	movs	r3, #64	; 0x40
 8005864:	616b      	str	r3, [r5, #20]
 8005866:	2300      	movs	r3, #0
 8005868:	9309      	str	r3, [sp, #36]	; 0x24
 800586a:	2320      	movs	r3, #32
 800586c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005870:	2330      	movs	r3, #48	; 0x30
 8005872:	f04f 0901 	mov.w	r9, #1
 8005876:	f8cd 800c 	str.w	r8, [sp, #12]
 800587a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005a20 <_svfiprintf_r+0x1ec>
 800587e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005882:	4623      	mov	r3, r4
 8005884:	469a      	mov	sl, r3
 8005886:	f813 2b01 	ldrb.w	r2, [r3], #1
 800588a:	b10a      	cbz	r2, 8005890 <_svfiprintf_r+0x5c>
 800588c:	2a25      	cmp	r2, #37	; 0x25
 800588e:	d1f9      	bne.n	8005884 <_svfiprintf_r+0x50>
 8005890:	ebba 0b04 	subs.w	fp, sl, r4
 8005894:	d00b      	beq.n	80058ae <_svfiprintf_r+0x7a>
 8005896:	465b      	mov	r3, fp
 8005898:	4622      	mov	r2, r4
 800589a:	4629      	mov	r1, r5
 800589c:	4638      	mov	r0, r7
 800589e:	f7ff ff6d 	bl	800577c <__ssputs_r>
 80058a2:	3001      	adds	r0, #1
 80058a4:	f000 80aa 	beq.w	80059fc <_svfiprintf_r+0x1c8>
 80058a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058aa:	445a      	add	r2, fp
 80058ac:	9209      	str	r2, [sp, #36]	; 0x24
 80058ae:	f89a 3000 	ldrb.w	r3, [sl]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	f000 80a2 	beq.w	80059fc <_svfiprintf_r+0x1c8>
 80058b8:	2300      	movs	r3, #0
 80058ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80058be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80058c2:	f10a 0a01 	add.w	sl, sl, #1
 80058c6:	9304      	str	r3, [sp, #16]
 80058c8:	9307      	str	r3, [sp, #28]
 80058ca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80058ce:	931a      	str	r3, [sp, #104]	; 0x68
 80058d0:	4654      	mov	r4, sl
 80058d2:	2205      	movs	r2, #5
 80058d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058d8:	4851      	ldr	r0, [pc, #324]	; (8005a20 <_svfiprintf_r+0x1ec>)
 80058da:	f000 fecb 	bl	8006674 <memchr>
 80058de:	9a04      	ldr	r2, [sp, #16]
 80058e0:	b9d8      	cbnz	r0, 800591a <_svfiprintf_r+0xe6>
 80058e2:	06d0      	lsls	r0, r2, #27
 80058e4:	bf44      	itt	mi
 80058e6:	2320      	movmi	r3, #32
 80058e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80058ec:	0711      	lsls	r1, r2, #28
 80058ee:	bf44      	itt	mi
 80058f0:	232b      	movmi	r3, #43	; 0x2b
 80058f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80058f6:	f89a 3000 	ldrb.w	r3, [sl]
 80058fa:	2b2a      	cmp	r3, #42	; 0x2a
 80058fc:	d015      	beq.n	800592a <_svfiprintf_r+0xf6>
 80058fe:	4654      	mov	r4, sl
 8005900:	2000      	movs	r0, #0
 8005902:	f04f 0c0a 	mov.w	ip, #10
 8005906:	9a07      	ldr	r2, [sp, #28]
 8005908:	4621      	mov	r1, r4
 800590a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800590e:	3b30      	subs	r3, #48	; 0x30
 8005910:	2b09      	cmp	r3, #9
 8005912:	d94e      	bls.n	80059b2 <_svfiprintf_r+0x17e>
 8005914:	b1b0      	cbz	r0, 8005944 <_svfiprintf_r+0x110>
 8005916:	9207      	str	r2, [sp, #28]
 8005918:	e014      	b.n	8005944 <_svfiprintf_r+0x110>
 800591a:	eba0 0308 	sub.w	r3, r0, r8
 800591e:	fa09 f303 	lsl.w	r3, r9, r3
 8005922:	4313      	orrs	r3, r2
 8005924:	46a2      	mov	sl, r4
 8005926:	9304      	str	r3, [sp, #16]
 8005928:	e7d2      	b.n	80058d0 <_svfiprintf_r+0x9c>
 800592a:	9b03      	ldr	r3, [sp, #12]
 800592c:	1d19      	adds	r1, r3, #4
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	9103      	str	r1, [sp, #12]
 8005932:	2b00      	cmp	r3, #0
 8005934:	bfbb      	ittet	lt
 8005936:	425b      	neglt	r3, r3
 8005938:	f042 0202 	orrlt.w	r2, r2, #2
 800593c:	9307      	strge	r3, [sp, #28]
 800593e:	9307      	strlt	r3, [sp, #28]
 8005940:	bfb8      	it	lt
 8005942:	9204      	strlt	r2, [sp, #16]
 8005944:	7823      	ldrb	r3, [r4, #0]
 8005946:	2b2e      	cmp	r3, #46	; 0x2e
 8005948:	d10c      	bne.n	8005964 <_svfiprintf_r+0x130>
 800594a:	7863      	ldrb	r3, [r4, #1]
 800594c:	2b2a      	cmp	r3, #42	; 0x2a
 800594e:	d135      	bne.n	80059bc <_svfiprintf_r+0x188>
 8005950:	9b03      	ldr	r3, [sp, #12]
 8005952:	3402      	adds	r4, #2
 8005954:	1d1a      	adds	r2, r3, #4
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	9203      	str	r2, [sp, #12]
 800595a:	2b00      	cmp	r3, #0
 800595c:	bfb8      	it	lt
 800595e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005962:	9305      	str	r3, [sp, #20]
 8005964:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005a24 <_svfiprintf_r+0x1f0>
 8005968:	2203      	movs	r2, #3
 800596a:	4650      	mov	r0, sl
 800596c:	7821      	ldrb	r1, [r4, #0]
 800596e:	f000 fe81 	bl	8006674 <memchr>
 8005972:	b140      	cbz	r0, 8005986 <_svfiprintf_r+0x152>
 8005974:	2340      	movs	r3, #64	; 0x40
 8005976:	eba0 000a 	sub.w	r0, r0, sl
 800597a:	fa03 f000 	lsl.w	r0, r3, r0
 800597e:	9b04      	ldr	r3, [sp, #16]
 8005980:	3401      	adds	r4, #1
 8005982:	4303      	orrs	r3, r0
 8005984:	9304      	str	r3, [sp, #16]
 8005986:	f814 1b01 	ldrb.w	r1, [r4], #1
 800598a:	2206      	movs	r2, #6
 800598c:	4826      	ldr	r0, [pc, #152]	; (8005a28 <_svfiprintf_r+0x1f4>)
 800598e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005992:	f000 fe6f 	bl	8006674 <memchr>
 8005996:	2800      	cmp	r0, #0
 8005998:	d038      	beq.n	8005a0c <_svfiprintf_r+0x1d8>
 800599a:	4b24      	ldr	r3, [pc, #144]	; (8005a2c <_svfiprintf_r+0x1f8>)
 800599c:	bb1b      	cbnz	r3, 80059e6 <_svfiprintf_r+0x1b2>
 800599e:	9b03      	ldr	r3, [sp, #12]
 80059a0:	3307      	adds	r3, #7
 80059a2:	f023 0307 	bic.w	r3, r3, #7
 80059a6:	3308      	adds	r3, #8
 80059a8:	9303      	str	r3, [sp, #12]
 80059aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80059ac:	4433      	add	r3, r6
 80059ae:	9309      	str	r3, [sp, #36]	; 0x24
 80059b0:	e767      	b.n	8005882 <_svfiprintf_r+0x4e>
 80059b2:	460c      	mov	r4, r1
 80059b4:	2001      	movs	r0, #1
 80059b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80059ba:	e7a5      	b.n	8005908 <_svfiprintf_r+0xd4>
 80059bc:	2300      	movs	r3, #0
 80059be:	f04f 0c0a 	mov.w	ip, #10
 80059c2:	4619      	mov	r1, r3
 80059c4:	3401      	adds	r4, #1
 80059c6:	9305      	str	r3, [sp, #20]
 80059c8:	4620      	mov	r0, r4
 80059ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80059ce:	3a30      	subs	r2, #48	; 0x30
 80059d0:	2a09      	cmp	r2, #9
 80059d2:	d903      	bls.n	80059dc <_svfiprintf_r+0x1a8>
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d0c5      	beq.n	8005964 <_svfiprintf_r+0x130>
 80059d8:	9105      	str	r1, [sp, #20]
 80059da:	e7c3      	b.n	8005964 <_svfiprintf_r+0x130>
 80059dc:	4604      	mov	r4, r0
 80059de:	2301      	movs	r3, #1
 80059e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80059e4:	e7f0      	b.n	80059c8 <_svfiprintf_r+0x194>
 80059e6:	ab03      	add	r3, sp, #12
 80059e8:	9300      	str	r3, [sp, #0]
 80059ea:	462a      	mov	r2, r5
 80059ec:	4638      	mov	r0, r7
 80059ee:	4b10      	ldr	r3, [pc, #64]	; (8005a30 <_svfiprintf_r+0x1fc>)
 80059f0:	a904      	add	r1, sp, #16
 80059f2:	f3af 8000 	nop.w
 80059f6:	1c42      	adds	r2, r0, #1
 80059f8:	4606      	mov	r6, r0
 80059fa:	d1d6      	bne.n	80059aa <_svfiprintf_r+0x176>
 80059fc:	89ab      	ldrh	r3, [r5, #12]
 80059fe:	065b      	lsls	r3, r3, #25
 8005a00:	f53f af2c 	bmi.w	800585c <_svfiprintf_r+0x28>
 8005a04:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a06:	b01d      	add	sp, #116	; 0x74
 8005a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a0c:	ab03      	add	r3, sp, #12
 8005a0e:	9300      	str	r3, [sp, #0]
 8005a10:	462a      	mov	r2, r5
 8005a12:	4638      	mov	r0, r7
 8005a14:	4b06      	ldr	r3, [pc, #24]	; (8005a30 <_svfiprintf_r+0x1fc>)
 8005a16:	a904      	add	r1, sp, #16
 8005a18:	f000 fa50 	bl	8005ebc <_printf_i>
 8005a1c:	e7eb      	b.n	80059f6 <_svfiprintf_r+0x1c2>
 8005a1e:	bf00      	nop
 8005a20:	080072c5 	.word	0x080072c5
 8005a24:	080072cb 	.word	0x080072cb
 8005a28:	080072cf 	.word	0x080072cf
 8005a2c:	00000000 	.word	0x00000000
 8005a30:	0800577d 	.word	0x0800577d

08005a34 <_sungetc_r>:
 8005a34:	b538      	push	{r3, r4, r5, lr}
 8005a36:	1c4b      	adds	r3, r1, #1
 8005a38:	4614      	mov	r4, r2
 8005a3a:	d103      	bne.n	8005a44 <_sungetc_r+0x10>
 8005a3c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8005a40:	4628      	mov	r0, r5
 8005a42:	bd38      	pop	{r3, r4, r5, pc}
 8005a44:	8993      	ldrh	r3, [r2, #12]
 8005a46:	b2cd      	uxtb	r5, r1
 8005a48:	f023 0320 	bic.w	r3, r3, #32
 8005a4c:	8193      	strh	r3, [r2, #12]
 8005a4e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005a50:	6852      	ldr	r2, [r2, #4]
 8005a52:	b18b      	cbz	r3, 8005a78 <_sungetc_r+0x44>
 8005a54:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005a56:	4293      	cmp	r3, r2
 8005a58:	dd08      	ble.n	8005a6c <_sungetc_r+0x38>
 8005a5a:	6823      	ldr	r3, [r4, #0]
 8005a5c:	1e5a      	subs	r2, r3, #1
 8005a5e:	6022      	str	r2, [r4, #0]
 8005a60:	f803 5c01 	strb.w	r5, [r3, #-1]
 8005a64:	6863      	ldr	r3, [r4, #4]
 8005a66:	3301      	adds	r3, #1
 8005a68:	6063      	str	r3, [r4, #4]
 8005a6a:	e7e9      	b.n	8005a40 <_sungetc_r+0xc>
 8005a6c:	4621      	mov	r1, r4
 8005a6e:	f000 fdc7 	bl	8006600 <__submore>
 8005a72:	2800      	cmp	r0, #0
 8005a74:	d0f1      	beq.n	8005a5a <_sungetc_r+0x26>
 8005a76:	e7e1      	b.n	8005a3c <_sungetc_r+0x8>
 8005a78:	6921      	ldr	r1, [r4, #16]
 8005a7a:	6823      	ldr	r3, [r4, #0]
 8005a7c:	b151      	cbz	r1, 8005a94 <_sungetc_r+0x60>
 8005a7e:	4299      	cmp	r1, r3
 8005a80:	d208      	bcs.n	8005a94 <_sungetc_r+0x60>
 8005a82:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8005a86:	42a9      	cmp	r1, r5
 8005a88:	d104      	bne.n	8005a94 <_sungetc_r+0x60>
 8005a8a:	3b01      	subs	r3, #1
 8005a8c:	3201      	adds	r2, #1
 8005a8e:	6023      	str	r3, [r4, #0]
 8005a90:	6062      	str	r2, [r4, #4]
 8005a92:	e7d5      	b.n	8005a40 <_sungetc_r+0xc>
 8005a94:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8005a98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005a9c:	6363      	str	r3, [r4, #52]	; 0x34
 8005a9e:	2303      	movs	r3, #3
 8005aa0:	63a3      	str	r3, [r4, #56]	; 0x38
 8005aa2:	4623      	mov	r3, r4
 8005aa4:	f803 5f46 	strb.w	r5, [r3, #70]!
 8005aa8:	6023      	str	r3, [r4, #0]
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e7dc      	b.n	8005a68 <_sungetc_r+0x34>

08005aae <__ssrefill_r>:
 8005aae:	b510      	push	{r4, lr}
 8005ab0:	460c      	mov	r4, r1
 8005ab2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005ab4:	b169      	cbz	r1, 8005ad2 <__ssrefill_r+0x24>
 8005ab6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005aba:	4299      	cmp	r1, r3
 8005abc:	d001      	beq.n	8005ac2 <__ssrefill_r+0x14>
 8005abe:	f000 fe01 	bl	80066c4 <_free_r>
 8005ac2:	2000      	movs	r0, #0
 8005ac4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005ac6:	6360      	str	r0, [r4, #52]	; 0x34
 8005ac8:	6063      	str	r3, [r4, #4]
 8005aca:	b113      	cbz	r3, 8005ad2 <__ssrefill_r+0x24>
 8005acc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005ace:	6023      	str	r3, [r4, #0]
 8005ad0:	bd10      	pop	{r4, pc}
 8005ad2:	6923      	ldr	r3, [r4, #16]
 8005ad4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ad8:	6023      	str	r3, [r4, #0]
 8005ada:	2300      	movs	r3, #0
 8005adc:	6063      	str	r3, [r4, #4]
 8005ade:	89a3      	ldrh	r3, [r4, #12]
 8005ae0:	f043 0320 	orr.w	r3, r3, #32
 8005ae4:	81a3      	strh	r3, [r4, #12]
 8005ae6:	e7f3      	b.n	8005ad0 <__ssrefill_r+0x22>

08005ae8 <__ssvfiscanf_r>:
 8005ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005aec:	460c      	mov	r4, r1
 8005aee:	2100      	movs	r1, #0
 8005af0:	4606      	mov	r6, r0
 8005af2:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8005af6:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8005afa:	49a7      	ldr	r1, [pc, #668]	; (8005d98 <__ssvfiscanf_r+0x2b0>)
 8005afc:	f10d 0804 	add.w	r8, sp, #4
 8005b00:	91a0      	str	r1, [sp, #640]	; 0x280
 8005b02:	49a6      	ldr	r1, [pc, #664]	; (8005d9c <__ssvfiscanf_r+0x2b4>)
 8005b04:	4fa6      	ldr	r7, [pc, #664]	; (8005da0 <__ssvfiscanf_r+0x2b8>)
 8005b06:	f8df 929c 	ldr.w	r9, [pc, #668]	; 8005da4 <__ssvfiscanf_r+0x2bc>
 8005b0a:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8005b0e:	91a1      	str	r1, [sp, #644]	; 0x284
 8005b10:	9300      	str	r3, [sp, #0]
 8005b12:	7813      	ldrb	r3, [r2, #0]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	f000 815c 	beq.w	8005dd2 <__ssvfiscanf_r+0x2ea>
 8005b1a:	5dd9      	ldrb	r1, [r3, r7]
 8005b1c:	1c55      	adds	r5, r2, #1
 8005b1e:	f011 0108 	ands.w	r1, r1, #8
 8005b22:	d019      	beq.n	8005b58 <__ssvfiscanf_r+0x70>
 8005b24:	6863      	ldr	r3, [r4, #4]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	dd0f      	ble.n	8005b4a <__ssvfiscanf_r+0x62>
 8005b2a:	6823      	ldr	r3, [r4, #0]
 8005b2c:	781a      	ldrb	r2, [r3, #0]
 8005b2e:	5cba      	ldrb	r2, [r7, r2]
 8005b30:	0712      	lsls	r2, r2, #28
 8005b32:	d401      	bmi.n	8005b38 <__ssvfiscanf_r+0x50>
 8005b34:	462a      	mov	r2, r5
 8005b36:	e7ec      	b.n	8005b12 <__ssvfiscanf_r+0x2a>
 8005b38:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005b3a:	3301      	adds	r3, #1
 8005b3c:	3201      	adds	r2, #1
 8005b3e:	9245      	str	r2, [sp, #276]	; 0x114
 8005b40:	6862      	ldr	r2, [r4, #4]
 8005b42:	6023      	str	r3, [r4, #0]
 8005b44:	3a01      	subs	r2, #1
 8005b46:	6062      	str	r2, [r4, #4]
 8005b48:	e7ec      	b.n	8005b24 <__ssvfiscanf_r+0x3c>
 8005b4a:	4621      	mov	r1, r4
 8005b4c:	4630      	mov	r0, r6
 8005b4e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005b50:	4798      	blx	r3
 8005b52:	2800      	cmp	r0, #0
 8005b54:	d0e9      	beq.n	8005b2a <__ssvfiscanf_r+0x42>
 8005b56:	e7ed      	b.n	8005b34 <__ssvfiscanf_r+0x4c>
 8005b58:	2b25      	cmp	r3, #37	; 0x25
 8005b5a:	d012      	beq.n	8005b82 <__ssvfiscanf_r+0x9a>
 8005b5c:	469a      	mov	sl, r3
 8005b5e:	6863      	ldr	r3, [r4, #4]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	f340 8094 	ble.w	8005c8e <__ssvfiscanf_r+0x1a6>
 8005b66:	6822      	ldr	r2, [r4, #0]
 8005b68:	7813      	ldrb	r3, [r2, #0]
 8005b6a:	4553      	cmp	r3, sl
 8005b6c:	f040 8131 	bne.w	8005dd2 <__ssvfiscanf_r+0x2ea>
 8005b70:	6863      	ldr	r3, [r4, #4]
 8005b72:	3201      	adds	r2, #1
 8005b74:	3b01      	subs	r3, #1
 8005b76:	6063      	str	r3, [r4, #4]
 8005b78:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8005b7a:	6022      	str	r2, [r4, #0]
 8005b7c:	3301      	adds	r3, #1
 8005b7e:	9345      	str	r3, [sp, #276]	; 0x114
 8005b80:	e7d8      	b.n	8005b34 <__ssvfiscanf_r+0x4c>
 8005b82:	9141      	str	r1, [sp, #260]	; 0x104
 8005b84:	9143      	str	r1, [sp, #268]	; 0x10c
 8005b86:	7853      	ldrb	r3, [r2, #1]
 8005b88:	2b2a      	cmp	r3, #42	; 0x2a
 8005b8a:	bf04      	itt	eq
 8005b8c:	2310      	moveq	r3, #16
 8005b8e:	1c95      	addeq	r5, r2, #2
 8005b90:	f04f 020a 	mov.w	r2, #10
 8005b94:	bf08      	it	eq
 8005b96:	9341      	streq	r3, [sp, #260]	; 0x104
 8005b98:	46aa      	mov	sl, r5
 8005b9a:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8005b9e:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8005ba2:	2b09      	cmp	r3, #9
 8005ba4:	d91d      	bls.n	8005be2 <__ssvfiscanf_r+0xfa>
 8005ba6:	2203      	movs	r2, #3
 8005ba8:	487e      	ldr	r0, [pc, #504]	; (8005da4 <__ssvfiscanf_r+0x2bc>)
 8005baa:	f000 fd63 	bl	8006674 <memchr>
 8005bae:	b140      	cbz	r0, 8005bc2 <__ssvfiscanf_r+0xda>
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	4655      	mov	r5, sl
 8005bb4:	eba0 0009 	sub.w	r0, r0, r9
 8005bb8:	fa03 f000 	lsl.w	r0, r3, r0
 8005bbc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005bbe:	4318      	orrs	r0, r3
 8005bc0:	9041      	str	r0, [sp, #260]	; 0x104
 8005bc2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005bc6:	2b78      	cmp	r3, #120	; 0x78
 8005bc8:	d806      	bhi.n	8005bd8 <__ssvfiscanf_r+0xf0>
 8005bca:	2b57      	cmp	r3, #87	; 0x57
 8005bcc:	d810      	bhi.n	8005bf0 <__ssvfiscanf_r+0x108>
 8005bce:	2b25      	cmp	r3, #37	; 0x25
 8005bd0:	d0c4      	beq.n	8005b5c <__ssvfiscanf_r+0x74>
 8005bd2:	d857      	bhi.n	8005c84 <__ssvfiscanf_r+0x19c>
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d065      	beq.n	8005ca4 <__ssvfiscanf_r+0x1bc>
 8005bd8:	2303      	movs	r3, #3
 8005bda:	9347      	str	r3, [sp, #284]	; 0x11c
 8005bdc:	230a      	movs	r3, #10
 8005bde:	9342      	str	r3, [sp, #264]	; 0x108
 8005be0:	e072      	b.n	8005cc8 <__ssvfiscanf_r+0x1e0>
 8005be2:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005be4:	4655      	mov	r5, sl
 8005be6:	fb02 1103 	mla	r1, r2, r3, r1
 8005bea:	3930      	subs	r1, #48	; 0x30
 8005bec:	9143      	str	r1, [sp, #268]	; 0x10c
 8005bee:	e7d3      	b.n	8005b98 <__ssvfiscanf_r+0xb0>
 8005bf0:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8005bf4:	2a20      	cmp	r2, #32
 8005bf6:	d8ef      	bhi.n	8005bd8 <__ssvfiscanf_r+0xf0>
 8005bf8:	a101      	add	r1, pc, #4	; (adr r1, 8005c00 <__ssvfiscanf_r+0x118>)
 8005bfa:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005bfe:	bf00      	nop
 8005c00:	08005cb3 	.word	0x08005cb3
 8005c04:	08005bd9 	.word	0x08005bd9
 8005c08:	08005bd9 	.word	0x08005bd9
 8005c0c:	08005d11 	.word	0x08005d11
 8005c10:	08005bd9 	.word	0x08005bd9
 8005c14:	08005bd9 	.word	0x08005bd9
 8005c18:	08005bd9 	.word	0x08005bd9
 8005c1c:	08005bd9 	.word	0x08005bd9
 8005c20:	08005bd9 	.word	0x08005bd9
 8005c24:	08005bd9 	.word	0x08005bd9
 8005c28:	08005bd9 	.word	0x08005bd9
 8005c2c:	08005d27 	.word	0x08005d27
 8005c30:	08005cfd 	.word	0x08005cfd
 8005c34:	08005c8b 	.word	0x08005c8b
 8005c38:	08005c8b 	.word	0x08005c8b
 8005c3c:	08005c8b 	.word	0x08005c8b
 8005c40:	08005bd9 	.word	0x08005bd9
 8005c44:	08005d01 	.word	0x08005d01
 8005c48:	08005bd9 	.word	0x08005bd9
 8005c4c:	08005bd9 	.word	0x08005bd9
 8005c50:	08005bd9 	.word	0x08005bd9
 8005c54:	08005bd9 	.word	0x08005bd9
 8005c58:	08005d37 	.word	0x08005d37
 8005c5c:	08005d09 	.word	0x08005d09
 8005c60:	08005cab 	.word	0x08005cab
 8005c64:	08005bd9 	.word	0x08005bd9
 8005c68:	08005bd9 	.word	0x08005bd9
 8005c6c:	08005d33 	.word	0x08005d33
 8005c70:	08005bd9 	.word	0x08005bd9
 8005c74:	08005cfd 	.word	0x08005cfd
 8005c78:	08005bd9 	.word	0x08005bd9
 8005c7c:	08005bd9 	.word	0x08005bd9
 8005c80:	08005cb3 	.word	0x08005cb3
 8005c84:	3b45      	subs	r3, #69	; 0x45
 8005c86:	2b02      	cmp	r3, #2
 8005c88:	d8a6      	bhi.n	8005bd8 <__ssvfiscanf_r+0xf0>
 8005c8a:	2305      	movs	r3, #5
 8005c8c:	e01b      	b.n	8005cc6 <__ssvfiscanf_r+0x1de>
 8005c8e:	4621      	mov	r1, r4
 8005c90:	4630      	mov	r0, r6
 8005c92:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005c94:	4798      	blx	r3
 8005c96:	2800      	cmp	r0, #0
 8005c98:	f43f af65 	beq.w	8005b66 <__ssvfiscanf_r+0x7e>
 8005c9c:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005c9e:	2800      	cmp	r0, #0
 8005ca0:	f040 808d 	bne.w	8005dbe <__ssvfiscanf_r+0x2d6>
 8005ca4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ca8:	e08f      	b.n	8005dca <__ssvfiscanf_r+0x2e2>
 8005caa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005cac:	f042 0220 	orr.w	r2, r2, #32
 8005cb0:	9241      	str	r2, [sp, #260]	; 0x104
 8005cb2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005cb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cb8:	9241      	str	r2, [sp, #260]	; 0x104
 8005cba:	2210      	movs	r2, #16
 8005cbc:	2b6f      	cmp	r3, #111	; 0x6f
 8005cbe:	bf34      	ite	cc
 8005cc0:	2303      	movcc	r3, #3
 8005cc2:	2304      	movcs	r3, #4
 8005cc4:	9242      	str	r2, [sp, #264]	; 0x108
 8005cc6:	9347      	str	r3, [sp, #284]	; 0x11c
 8005cc8:	6863      	ldr	r3, [r4, #4]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	dd42      	ble.n	8005d54 <__ssvfiscanf_r+0x26c>
 8005cce:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005cd0:	0659      	lsls	r1, r3, #25
 8005cd2:	d404      	bmi.n	8005cde <__ssvfiscanf_r+0x1f6>
 8005cd4:	6823      	ldr	r3, [r4, #0]
 8005cd6:	781a      	ldrb	r2, [r3, #0]
 8005cd8:	5cba      	ldrb	r2, [r7, r2]
 8005cda:	0712      	lsls	r2, r2, #28
 8005cdc:	d441      	bmi.n	8005d62 <__ssvfiscanf_r+0x27a>
 8005cde:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8005ce0:	2b02      	cmp	r3, #2
 8005ce2:	dc50      	bgt.n	8005d86 <__ssvfiscanf_r+0x29e>
 8005ce4:	466b      	mov	r3, sp
 8005ce6:	4622      	mov	r2, r4
 8005ce8:	4630      	mov	r0, r6
 8005cea:	a941      	add	r1, sp, #260	; 0x104
 8005cec:	f000 fa0c 	bl	8006108 <_scanf_chars>
 8005cf0:	2801      	cmp	r0, #1
 8005cf2:	d06e      	beq.n	8005dd2 <__ssvfiscanf_r+0x2ea>
 8005cf4:	2802      	cmp	r0, #2
 8005cf6:	f47f af1d 	bne.w	8005b34 <__ssvfiscanf_r+0x4c>
 8005cfa:	e7cf      	b.n	8005c9c <__ssvfiscanf_r+0x1b4>
 8005cfc:	220a      	movs	r2, #10
 8005cfe:	e7dd      	b.n	8005cbc <__ssvfiscanf_r+0x1d4>
 8005d00:	2300      	movs	r3, #0
 8005d02:	9342      	str	r3, [sp, #264]	; 0x108
 8005d04:	2303      	movs	r3, #3
 8005d06:	e7de      	b.n	8005cc6 <__ssvfiscanf_r+0x1de>
 8005d08:	2308      	movs	r3, #8
 8005d0a:	9342      	str	r3, [sp, #264]	; 0x108
 8005d0c:	2304      	movs	r3, #4
 8005d0e:	e7da      	b.n	8005cc6 <__ssvfiscanf_r+0x1de>
 8005d10:	4629      	mov	r1, r5
 8005d12:	4640      	mov	r0, r8
 8005d14:	f000 fb4a 	bl	80063ac <__sccl>
 8005d18:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005d1a:	4605      	mov	r5, r0
 8005d1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d20:	9341      	str	r3, [sp, #260]	; 0x104
 8005d22:	2301      	movs	r3, #1
 8005d24:	e7cf      	b.n	8005cc6 <__ssvfiscanf_r+0x1de>
 8005d26:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005d28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d2c:	9341      	str	r3, [sp, #260]	; 0x104
 8005d2e:	2300      	movs	r3, #0
 8005d30:	e7c9      	b.n	8005cc6 <__ssvfiscanf_r+0x1de>
 8005d32:	2302      	movs	r3, #2
 8005d34:	e7c7      	b.n	8005cc6 <__ssvfiscanf_r+0x1de>
 8005d36:	9841      	ldr	r0, [sp, #260]	; 0x104
 8005d38:	06c3      	lsls	r3, r0, #27
 8005d3a:	f53f aefb 	bmi.w	8005b34 <__ssvfiscanf_r+0x4c>
 8005d3e:	9b00      	ldr	r3, [sp, #0]
 8005d40:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005d42:	1d19      	adds	r1, r3, #4
 8005d44:	9100      	str	r1, [sp, #0]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f010 0f01 	tst.w	r0, #1
 8005d4c:	bf14      	ite	ne
 8005d4e:	801a      	strhne	r2, [r3, #0]
 8005d50:	601a      	streq	r2, [r3, #0]
 8005d52:	e6ef      	b.n	8005b34 <__ssvfiscanf_r+0x4c>
 8005d54:	4621      	mov	r1, r4
 8005d56:	4630      	mov	r0, r6
 8005d58:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005d5a:	4798      	blx	r3
 8005d5c:	2800      	cmp	r0, #0
 8005d5e:	d0b6      	beq.n	8005cce <__ssvfiscanf_r+0x1e6>
 8005d60:	e79c      	b.n	8005c9c <__ssvfiscanf_r+0x1b4>
 8005d62:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005d64:	3201      	adds	r2, #1
 8005d66:	9245      	str	r2, [sp, #276]	; 0x114
 8005d68:	6862      	ldr	r2, [r4, #4]
 8005d6a:	3a01      	subs	r2, #1
 8005d6c:	2a00      	cmp	r2, #0
 8005d6e:	6062      	str	r2, [r4, #4]
 8005d70:	dd02      	ble.n	8005d78 <__ssvfiscanf_r+0x290>
 8005d72:	3301      	adds	r3, #1
 8005d74:	6023      	str	r3, [r4, #0]
 8005d76:	e7ad      	b.n	8005cd4 <__ssvfiscanf_r+0x1ec>
 8005d78:	4621      	mov	r1, r4
 8005d7a:	4630      	mov	r0, r6
 8005d7c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005d7e:	4798      	blx	r3
 8005d80:	2800      	cmp	r0, #0
 8005d82:	d0a7      	beq.n	8005cd4 <__ssvfiscanf_r+0x1ec>
 8005d84:	e78a      	b.n	8005c9c <__ssvfiscanf_r+0x1b4>
 8005d86:	2b04      	cmp	r3, #4
 8005d88:	dc0e      	bgt.n	8005da8 <__ssvfiscanf_r+0x2c0>
 8005d8a:	466b      	mov	r3, sp
 8005d8c:	4622      	mov	r2, r4
 8005d8e:	4630      	mov	r0, r6
 8005d90:	a941      	add	r1, sp, #260	; 0x104
 8005d92:	f000 fa13 	bl	80061bc <_scanf_i>
 8005d96:	e7ab      	b.n	8005cf0 <__ssvfiscanf_r+0x208>
 8005d98:	08005a35 	.word	0x08005a35
 8005d9c:	08005aaf 	.word	0x08005aaf
 8005da0:	080071c5 	.word	0x080071c5
 8005da4:	080072cb 	.word	0x080072cb
 8005da8:	4b0b      	ldr	r3, [pc, #44]	; (8005dd8 <__ssvfiscanf_r+0x2f0>)
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	f43f aec2 	beq.w	8005b34 <__ssvfiscanf_r+0x4c>
 8005db0:	466b      	mov	r3, sp
 8005db2:	4622      	mov	r2, r4
 8005db4:	4630      	mov	r0, r6
 8005db6:	a941      	add	r1, sp, #260	; 0x104
 8005db8:	f3af 8000 	nop.w
 8005dbc:	e798      	b.n	8005cf0 <__ssvfiscanf_r+0x208>
 8005dbe:	89a3      	ldrh	r3, [r4, #12]
 8005dc0:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005dc4:	bf18      	it	ne
 8005dc6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8005dca:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8005dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dd2:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005dd4:	e7f9      	b.n	8005dca <__ssvfiscanf_r+0x2e2>
 8005dd6:	bf00      	nop
 8005dd8:	00000000 	.word	0x00000000

08005ddc <_printf_common>:
 8005ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005de0:	4616      	mov	r6, r2
 8005de2:	4699      	mov	r9, r3
 8005de4:	688a      	ldr	r2, [r1, #8]
 8005de6:	690b      	ldr	r3, [r1, #16]
 8005de8:	4607      	mov	r7, r0
 8005dea:	4293      	cmp	r3, r2
 8005dec:	bfb8      	it	lt
 8005dee:	4613      	movlt	r3, r2
 8005df0:	6033      	str	r3, [r6, #0]
 8005df2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005df6:	460c      	mov	r4, r1
 8005df8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005dfc:	b10a      	cbz	r2, 8005e02 <_printf_common+0x26>
 8005dfe:	3301      	adds	r3, #1
 8005e00:	6033      	str	r3, [r6, #0]
 8005e02:	6823      	ldr	r3, [r4, #0]
 8005e04:	0699      	lsls	r1, r3, #26
 8005e06:	bf42      	ittt	mi
 8005e08:	6833      	ldrmi	r3, [r6, #0]
 8005e0a:	3302      	addmi	r3, #2
 8005e0c:	6033      	strmi	r3, [r6, #0]
 8005e0e:	6825      	ldr	r5, [r4, #0]
 8005e10:	f015 0506 	ands.w	r5, r5, #6
 8005e14:	d106      	bne.n	8005e24 <_printf_common+0x48>
 8005e16:	f104 0a19 	add.w	sl, r4, #25
 8005e1a:	68e3      	ldr	r3, [r4, #12]
 8005e1c:	6832      	ldr	r2, [r6, #0]
 8005e1e:	1a9b      	subs	r3, r3, r2
 8005e20:	42ab      	cmp	r3, r5
 8005e22:	dc28      	bgt.n	8005e76 <_printf_common+0x9a>
 8005e24:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e28:	1e13      	subs	r3, r2, #0
 8005e2a:	6822      	ldr	r2, [r4, #0]
 8005e2c:	bf18      	it	ne
 8005e2e:	2301      	movne	r3, #1
 8005e30:	0692      	lsls	r2, r2, #26
 8005e32:	d42d      	bmi.n	8005e90 <_printf_common+0xb4>
 8005e34:	4649      	mov	r1, r9
 8005e36:	4638      	mov	r0, r7
 8005e38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e3c:	47c0      	blx	r8
 8005e3e:	3001      	adds	r0, #1
 8005e40:	d020      	beq.n	8005e84 <_printf_common+0xa8>
 8005e42:	6823      	ldr	r3, [r4, #0]
 8005e44:	68e5      	ldr	r5, [r4, #12]
 8005e46:	f003 0306 	and.w	r3, r3, #6
 8005e4a:	2b04      	cmp	r3, #4
 8005e4c:	bf18      	it	ne
 8005e4e:	2500      	movne	r5, #0
 8005e50:	6832      	ldr	r2, [r6, #0]
 8005e52:	f04f 0600 	mov.w	r6, #0
 8005e56:	68a3      	ldr	r3, [r4, #8]
 8005e58:	bf08      	it	eq
 8005e5a:	1aad      	subeq	r5, r5, r2
 8005e5c:	6922      	ldr	r2, [r4, #16]
 8005e5e:	bf08      	it	eq
 8005e60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e64:	4293      	cmp	r3, r2
 8005e66:	bfc4      	itt	gt
 8005e68:	1a9b      	subgt	r3, r3, r2
 8005e6a:	18ed      	addgt	r5, r5, r3
 8005e6c:	341a      	adds	r4, #26
 8005e6e:	42b5      	cmp	r5, r6
 8005e70:	d11a      	bne.n	8005ea8 <_printf_common+0xcc>
 8005e72:	2000      	movs	r0, #0
 8005e74:	e008      	b.n	8005e88 <_printf_common+0xac>
 8005e76:	2301      	movs	r3, #1
 8005e78:	4652      	mov	r2, sl
 8005e7a:	4649      	mov	r1, r9
 8005e7c:	4638      	mov	r0, r7
 8005e7e:	47c0      	blx	r8
 8005e80:	3001      	adds	r0, #1
 8005e82:	d103      	bne.n	8005e8c <_printf_common+0xb0>
 8005e84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e8c:	3501      	adds	r5, #1
 8005e8e:	e7c4      	b.n	8005e1a <_printf_common+0x3e>
 8005e90:	2030      	movs	r0, #48	; 0x30
 8005e92:	18e1      	adds	r1, r4, r3
 8005e94:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e98:	1c5a      	adds	r2, r3, #1
 8005e9a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e9e:	4422      	add	r2, r4
 8005ea0:	3302      	adds	r3, #2
 8005ea2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005ea6:	e7c5      	b.n	8005e34 <_printf_common+0x58>
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	4622      	mov	r2, r4
 8005eac:	4649      	mov	r1, r9
 8005eae:	4638      	mov	r0, r7
 8005eb0:	47c0      	blx	r8
 8005eb2:	3001      	adds	r0, #1
 8005eb4:	d0e6      	beq.n	8005e84 <_printf_common+0xa8>
 8005eb6:	3601      	adds	r6, #1
 8005eb8:	e7d9      	b.n	8005e6e <_printf_common+0x92>
	...

08005ebc <_printf_i>:
 8005ebc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ec0:	7e0f      	ldrb	r7, [r1, #24]
 8005ec2:	4691      	mov	r9, r2
 8005ec4:	2f78      	cmp	r7, #120	; 0x78
 8005ec6:	4680      	mov	r8, r0
 8005ec8:	460c      	mov	r4, r1
 8005eca:	469a      	mov	sl, r3
 8005ecc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ece:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005ed2:	d807      	bhi.n	8005ee4 <_printf_i+0x28>
 8005ed4:	2f62      	cmp	r7, #98	; 0x62
 8005ed6:	d80a      	bhi.n	8005eee <_printf_i+0x32>
 8005ed8:	2f00      	cmp	r7, #0
 8005eda:	f000 80d9 	beq.w	8006090 <_printf_i+0x1d4>
 8005ede:	2f58      	cmp	r7, #88	; 0x58
 8005ee0:	f000 80a4 	beq.w	800602c <_printf_i+0x170>
 8005ee4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ee8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005eec:	e03a      	b.n	8005f64 <_printf_i+0xa8>
 8005eee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ef2:	2b15      	cmp	r3, #21
 8005ef4:	d8f6      	bhi.n	8005ee4 <_printf_i+0x28>
 8005ef6:	a101      	add	r1, pc, #4	; (adr r1, 8005efc <_printf_i+0x40>)
 8005ef8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005efc:	08005f55 	.word	0x08005f55
 8005f00:	08005f69 	.word	0x08005f69
 8005f04:	08005ee5 	.word	0x08005ee5
 8005f08:	08005ee5 	.word	0x08005ee5
 8005f0c:	08005ee5 	.word	0x08005ee5
 8005f10:	08005ee5 	.word	0x08005ee5
 8005f14:	08005f69 	.word	0x08005f69
 8005f18:	08005ee5 	.word	0x08005ee5
 8005f1c:	08005ee5 	.word	0x08005ee5
 8005f20:	08005ee5 	.word	0x08005ee5
 8005f24:	08005ee5 	.word	0x08005ee5
 8005f28:	08006077 	.word	0x08006077
 8005f2c:	08005f99 	.word	0x08005f99
 8005f30:	08006059 	.word	0x08006059
 8005f34:	08005ee5 	.word	0x08005ee5
 8005f38:	08005ee5 	.word	0x08005ee5
 8005f3c:	08006099 	.word	0x08006099
 8005f40:	08005ee5 	.word	0x08005ee5
 8005f44:	08005f99 	.word	0x08005f99
 8005f48:	08005ee5 	.word	0x08005ee5
 8005f4c:	08005ee5 	.word	0x08005ee5
 8005f50:	08006061 	.word	0x08006061
 8005f54:	682b      	ldr	r3, [r5, #0]
 8005f56:	1d1a      	adds	r2, r3, #4
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	602a      	str	r2, [r5, #0]
 8005f5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f64:	2301      	movs	r3, #1
 8005f66:	e0a4      	b.n	80060b2 <_printf_i+0x1f6>
 8005f68:	6820      	ldr	r0, [r4, #0]
 8005f6a:	6829      	ldr	r1, [r5, #0]
 8005f6c:	0606      	lsls	r6, r0, #24
 8005f6e:	f101 0304 	add.w	r3, r1, #4
 8005f72:	d50a      	bpl.n	8005f8a <_printf_i+0xce>
 8005f74:	680e      	ldr	r6, [r1, #0]
 8005f76:	602b      	str	r3, [r5, #0]
 8005f78:	2e00      	cmp	r6, #0
 8005f7a:	da03      	bge.n	8005f84 <_printf_i+0xc8>
 8005f7c:	232d      	movs	r3, #45	; 0x2d
 8005f7e:	4276      	negs	r6, r6
 8005f80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f84:	230a      	movs	r3, #10
 8005f86:	485e      	ldr	r0, [pc, #376]	; (8006100 <_printf_i+0x244>)
 8005f88:	e019      	b.n	8005fbe <_printf_i+0x102>
 8005f8a:	680e      	ldr	r6, [r1, #0]
 8005f8c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005f90:	602b      	str	r3, [r5, #0]
 8005f92:	bf18      	it	ne
 8005f94:	b236      	sxthne	r6, r6
 8005f96:	e7ef      	b.n	8005f78 <_printf_i+0xbc>
 8005f98:	682b      	ldr	r3, [r5, #0]
 8005f9a:	6820      	ldr	r0, [r4, #0]
 8005f9c:	1d19      	adds	r1, r3, #4
 8005f9e:	6029      	str	r1, [r5, #0]
 8005fa0:	0601      	lsls	r1, r0, #24
 8005fa2:	d501      	bpl.n	8005fa8 <_printf_i+0xec>
 8005fa4:	681e      	ldr	r6, [r3, #0]
 8005fa6:	e002      	b.n	8005fae <_printf_i+0xf2>
 8005fa8:	0646      	lsls	r6, r0, #25
 8005faa:	d5fb      	bpl.n	8005fa4 <_printf_i+0xe8>
 8005fac:	881e      	ldrh	r6, [r3, #0]
 8005fae:	2f6f      	cmp	r7, #111	; 0x6f
 8005fb0:	bf0c      	ite	eq
 8005fb2:	2308      	moveq	r3, #8
 8005fb4:	230a      	movne	r3, #10
 8005fb6:	4852      	ldr	r0, [pc, #328]	; (8006100 <_printf_i+0x244>)
 8005fb8:	2100      	movs	r1, #0
 8005fba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005fbe:	6865      	ldr	r5, [r4, #4]
 8005fc0:	2d00      	cmp	r5, #0
 8005fc2:	bfa8      	it	ge
 8005fc4:	6821      	ldrge	r1, [r4, #0]
 8005fc6:	60a5      	str	r5, [r4, #8]
 8005fc8:	bfa4      	itt	ge
 8005fca:	f021 0104 	bicge.w	r1, r1, #4
 8005fce:	6021      	strge	r1, [r4, #0]
 8005fd0:	b90e      	cbnz	r6, 8005fd6 <_printf_i+0x11a>
 8005fd2:	2d00      	cmp	r5, #0
 8005fd4:	d04d      	beq.n	8006072 <_printf_i+0x1b6>
 8005fd6:	4615      	mov	r5, r2
 8005fd8:	fbb6 f1f3 	udiv	r1, r6, r3
 8005fdc:	fb03 6711 	mls	r7, r3, r1, r6
 8005fe0:	5dc7      	ldrb	r7, [r0, r7]
 8005fe2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005fe6:	4637      	mov	r7, r6
 8005fe8:	42bb      	cmp	r3, r7
 8005fea:	460e      	mov	r6, r1
 8005fec:	d9f4      	bls.n	8005fd8 <_printf_i+0x11c>
 8005fee:	2b08      	cmp	r3, #8
 8005ff0:	d10b      	bne.n	800600a <_printf_i+0x14e>
 8005ff2:	6823      	ldr	r3, [r4, #0]
 8005ff4:	07de      	lsls	r6, r3, #31
 8005ff6:	d508      	bpl.n	800600a <_printf_i+0x14e>
 8005ff8:	6923      	ldr	r3, [r4, #16]
 8005ffa:	6861      	ldr	r1, [r4, #4]
 8005ffc:	4299      	cmp	r1, r3
 8005ffe:	bfde      	ittt	le
 8006000:	2330      	movle	r3, #48	; 0x30
 8006002:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006006:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800600a:	1b52      	subs	r2, r2, r5
 800600c:	6122      	str	r2, [r4, #16]
 800600e:	464b      	mov	r3, r9
 8006010:	4621      	mov	r1, r4
 8006012:	4640      	mov	r0, r8
 8006014:	f8cd a000 	str.w	sl, [sp]
 8006018:	aa03      	add	r2, sp, #12
 800601a:	f7ff fedf 	bl	8005ddc <_printf_common>
 800601e:	3001      	adds	r0, #1
 8006020:	d14c      	bne.n	80060bc <_printf_i+0x200>
 8006022:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006026:	b004      	add	sp, #16
 8006028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800602c:	4834      	ldr	r0, [pc, #208]	; (8006100 <_printf_i+0x244>)
 800602e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006032:	6829      	ldr	r1, [r5, #0]
 8006034:	6823      	ldr	r3, [r4, #0]
 8006036:	f851 6b04 	ldr.w	r6, [r1], #4
 800603a:	6029      	str	r1, [r5, #0]
 800603c:	061d      	lsls	r5, r3, #24
 800603e:	d514      	bpl.n	800606a <_printf_i+0x1ae>
 8006040:	07df      	lsls	r7, r3, #31
 8006042:	bf44      	itt	mi
 8006044:	f043 0320 	orrmi.w	r3, r3, #32
 8006048:	6023      	strmi	r3, [r4, #0]
 800604a:	b91e      	cbnz	r6, 8006054 <_printf_i+0x198>
 800604c:	6823      	ldr	r3, [r4, #0]
 800604e:	f023 0320 	bic.w	r3, r3, #32
 8006052:	6023      	str	r3, [r4, #0]
 8006054:	2310      	movs	r3, #16
 8006056:	e7af      	b.n	8005fb8 <_printf_i+0xfc>
 8006058:	6823      	ldr	r3, [r4, #0]
 800605a:	f043 0320 	orr.w	r3, r3, #32
 800605e:	6023      	str	r3, [r4, #0]
 8006060:	2378      	movs	r3, #120	; 0x78
 8006062:	4828      	ldr	r0, [pc, #160]	; (8006104 <_printf_i+0x248>)
 8006064:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006068:	e7e3      	b.n	8006032 <_printf_i+0x176>
 800606a:	0659      	lsls	r1, r3, #25
 800606c:	bf48      	it	mi
 800606e:	b2b6      	uxthmi	r6, r6
 8006070:	e7e6      	b.n	8006040 <_printf_i+0x184>
 8006072:	4615      	mov	r5, r2
 8006074:	e7bb      	b.n	8005fee <_printf_i+0x132>
 8006076:	682b      	ldr	r3, [r5, #0]
 8006078:	6826      	ldr	r6, [r4, #0]
 800607a:	1d18      	adds	r0, r3, #4
 800607c:	6961      	ldr	r1, [r4, #20]
 800607e:	6028      	str	r0, [r5, #0]
 8006080:	0635      	lsls	r5, r6, #24
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	d501      	bpl.n	800608a <_printf_i+0x1ce>
 8006086:	6019      	str	r1, [r3, #0]
 8006088:	e002      	b.n	8006090 <_printf_i+0x1d4>
 800608a:	0670      	lsls	r0, r6, #25
 800608c:	d5fb      	bpl.n	8006086 <_printf_i+0x1ca>
 800608e:	8019      	strh	r1, [r3, #0]
 8006090:	2300      	movs	r3, #0
 8006092:	4615      	mov	r5, r2
 8006094:	6123      	str	r3, [r4, #16]
 8006096:	e7ba      	b.n	800600e <_printf_i+0x152>
 8006098:	682b      	ldr	r3, [r5, #0]
 800609a:	2100      	movs	r1, #0
 800609c:	1d1a      	adds	r2, r3, #4
 800609e:	602a      	str	r2, [r5, #0]
 80060a0:	681d      	ldr	r5, [r3, #0]
 80060a2:	6862      	ldr	r2, [r4, #4]
 80060a4:	4628      	mov	r0, r5
 80060a6:	f000 fae5 	bl	8006674 <memchr>
 80060aa:	b108      	cbz	r0, 80060b0 <_printf_i+0x1f4>
 80060ac:	1b40      	subs	r0, r0, r5
 80060ae:	6060      	str	r0, [r4, #4]
 80060b0:	6863      	ldr	r3, [r4, #4]
 80060b2:	6123      	str	r3, [r4, #16]
 80060b4:	2300      	movs	r3, #0
 80060b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060ba:	e7a8      	b.n	800600e <_printf_i+0x152>
 80060bc:	462a      	mov	r2, r5
 80060be:	4649      	mov	r1, r9
 80060c0:	4640      	mov	r0, r8
 80060c2:	6923      	ldr	r3, [r4, #16]
 80060c4:	47d0      	blx	sl
 80060c6:	3001      	adds	r0, #1
 80060c8:	d0ab      	beq.n	8006022 <_printf_i+0x166>
 80060ca:	6823      	ldr	r3, [r4, #0]
 80060cc:	079b      	lsls	r3, r3, #30
 80060ce:	d413      	bmi.n	80060f8 <_printf_i+0x23c>
 80060d0:	68e0      	ldr	r0, [r4, #12]
 80060d2:	9b03      	ldr	r3, [sp, #12]
 80060d4:	4298      	cmp	r0, r3
 80060d6:	bfb8      	it	lt
 80060d8:	4618      	movlt	r0, r3
 80060da:	e7a4      	b.n	8006026 <_printf_i+0x16a>
 80060dc:	2301      	movs	r3, #1
 80060de:	4632      	mov	r2, r6
 80060e0:	4649      	mov	r1, r9
 80060e2:	4640      	mov	r0, r8
 80060e4:	47d0      	blx	sl
 80060e6:	3001      	adds	r0, #1
 80060e8:	d09b      	beq.n	8006022 <_printf_i+0x166>
 80060ea:	3501      	adds	r5, #1
 80060ec:	68e3      	ldr	r3, [r4, #12]
 80060ee:	9903      	ldr	r1, [sp, #12]
 80060f0:	1a5b      	subs	r3, r3, r1
 80060f2:	42ab      	cmp	r3, r5
 80060f4:	dcf2      	bgt.n	80060dc <_printf_i+0x220>
 80060f6:	e7eb      	b.n	80060d0 <_printf_i+0x214>
 80060f8:	2500      	movs	r5, #0
 80060fa:	f104 0619 	add.w	r6, r4, #25
 80060fe:	e7f5      	b.n	80060ec <_printf_i+0x230>
 8006100:	080072d6 	.word	0x080072d6
 8006104:	080072e7 	.word	0x080072e7

08006108 <_scanf_chars>:
 8006108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800610c:	4615      	mov	r5, r2
 800610e:	688a      	ldr	r2, [r1, #8]
 8006110:	4680      	mov	r8, r0
 8006112:	460c      	mov	r4, r1
 8006114:	b932      	cbnz	r2, 8006124 <_scanf_chars+0x1c>
 8006116:	698a      	ldr	r2, [r1, #24]
 8006118:	2a00      	cmp	r2, #0
 800611a:	bf0c      	ite	eq
 800611c:	2201      	moveq	r2, #1
 800611e:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8006122:	608a      	str	r2, [r1, #8]
 8006124:	2700      	movs	r7, #0
 8006126:	6822      	ldr	r2, [r4, #0]
 8006128:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80061b8 <_scanf_chars+0xb0>
 800612c:	06d1      	lsls	r1, r2, #27
 800612e:	bf5f      	itttt	pl
 8006130:	681a      	ldrpl	r2, [r3, #0]
 8006132:	1d11      	addpl	r1, r2, #4
 8006134:	6019      	strpl	r1, [r3, #0]
 8006136:	6816      	ldrpl	r6, [r2, #0]
 8006138:	69a0      	ldr	r0, [r4, #24]
 800613a:	b188      	cbz	r0, 8006160 <_scanf_chars+0x58>
 800613c:	2801      	cmp	r0, #1
 800613e:	d107      	bne.n	8006150 <_scanf_chars+0x48>
 8006140:	682b      	ldr	r3, [r5, #0]
 8006142:	781a      	ldrb	r2, [r3, #0]
 8006144:	6963      	ldr	r3, [r4, #20]
 8006146:	5c9b      	ldrb	r3, [r3, r2]
 8006148:	b953      	cbnz	r3, 8006160 <_scanf_chars+0x58>
 800614a:	2f00      	cmp	r7, #0
 800614c:	d031      	beq.n	80061b2 <_scanf_chars+0xaa>
 800614e:	e022      	b.n	8006196 <_scanf_chars+0x8e>
 8006150:	2802      	cmp	r0, #2
 8006152:	d120      	bne.n	8006196 <_scanf_chars+0x8e>
 8006154:	682b      	ldr	r3, [r5, #0]
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	f813 3009 	ldrb.w	r3, [r3, r9]
 800615c:	071b      	lsls	r3, r3, #28
 800615e:	d41a      	bmi.n	8006196 <_scanf_chars+0x8e>
 8006160:	6823      	ldr	r3, [r4, #0]
 8006162:	3701      	adds	r7, #1
 8006164:	06da      	lsls	r2, r3, #27
 8006166:	bf5e      	ittt	pl
 8006168:	682b      	ldrpl	r3, [r5, #0]
 800616a:	781b      	ldrbpl	r3, [r3, #0]
 800616c:	f806 3b01 	strbpl.w	r3, [r6], #1
 8006170:	682a      	ldr	r2, [r5, #0]
 8006172:	686b      	ldr	r3, [r5, #4]
 8006174:	3201      	adds	r2, #1
 8006176:	602a      	str	r2, [r5, #0]
 8006178:	68a2      	ldr	r2, [r4, #8]
 800617a:	3b01      	subs	r3, #1
 800617c:	3a01      	subs	r2, #1
 800617e:	606b      	str	r3, [r5, #4]
 8006180:	60a2      	str	r2, [r4, #8]
 8006182:	b142      	cbz	r2, 8006196 <_scanf_chars+0x8e>
 8006184:	2b00      	cmp	r3, #0
 8006186:	dcd7      	bgt.n	8006138 <_scanf_chars+0x30>
 8006188:	4629      	mov	r1, r5
 800618a:	4640      	mov	r0, r8
 800618c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006190:	4798      	blx	r3
 8006192:	2800      	cmp	r0, #0
 8006194:	d0d0      	beq.n	8006138 <_scanf_chars+0x30>
 8006196:	6823      	ldr	r3, [r4, #0]
 8006198:	f013 0310 	ands.w	r3, r3, #16
 800619c:	d105      	bne.n	80061aa <_scanf_chars+0xa2>
 800619e:	68e2      	ldr	r2, [r4, #12]
 80061a0:	3201      	adds	r2, #1
 80061a2:	60e2      	str	r2, [r4, #12]
 80061a4:	69a2      	ldr	r2, [r4, #24]
 80061a6:	b102      	cbz	r2, 80061aa <_scanf_chars+0xa2>
 80061a8:	7033      	strb	r3, [r6, #0]
 80061aa:	2000      	movs	r0, #0
 80061ac:	6923      	ldr	r3, [r4, #16]
 80061ae:	443b      	add	r3, r7
 80061b0:	6123      	str	r3, [r4, #16]
 80061b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061b6:	bf00      	nop
 80061b8:	080071c5 	.word	0x080071c5

080061bc <_scanf_i>:
 80061bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061c0:	460c      	mov	r4, r1
 80061c2:	4698      	mov	r8, r3
 80061c4:	4b75      	ldr	r3, [pc, #468]	; (800639c <_scanf_i+0x1e0>)
 80061c6:	b087      	sub	sp, #28
 80061c8:	4682      	mov	sl, r0
 80061ca:	4616      	mov	r6, r2
 80061cc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80061d0:	ab03      	add	r3, sp, #12
 80061d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80061d6:	4b72      	ldr	r3, [pc, #456]	; (80063a0 <_scanf_i+0x1e4>)
 80061d8:	69a1      	ldr	r1, [r4, #24]
 80061da:	4a72      	ldr	r2, [pc, #456]	; (80063a4 <_scanf_i+0x1e8>)
 80061dc:	4627      	mov	r7, r4
 80061de:	2903      	cmp	r1, #3
 80061e0:	bf18      	it	ne
 80061e2:	461a      	movne	r2, r3
 80061e4:	68a3      	ldr	r3, [r4, #8]
 80061e6:	9201      	str	r2, [sp, #4]
 80061e8:	1e5a      	subs	r2, r3, #1
 80061ea:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80061ee:	bf81      	itttt	hi
 80061f0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80061f4:	eb03 0905 	addhi.w	r9, r3, r5
 80061f8:	f240 135d 	movwhi	r3, #349	; 0x15d
 80061fc:	60a3      	strhi	r3, [r4, #8]
 80061fe:	f857 3b1c 	ldr.w	r3, [r7], #28
 8006202:	bf98      	it	ls
 8006204:	f04f 0900 	movls.w	r9, #0
 8006208:	463d      	mov	r5, r7
 800620a:	f04f 0b00 	mov.w	fp, #0
 800620e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8006212:	6023      	str	r3, [r4, #0]
 8006214:	6831      	ldr	r1, [r6, #0]
 8006216:	ab03      	add	r3, sp, #12
 8006218:	2202      	movs	r2, #2
 800621a:	7809      	ldrb	r1, [r1, #0]
 800621c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8006220:	f000 fa28 	bl	8006674 <memchr>
 8006224:	b328      	cbz	r0, 8006272 <_scanf_i+0xb6>
 8006226:	f1bb 0f01 	cmp.w	fp, #1
 800622a:	d159      	bne.n	80062e0 <_scanf_i+0x124>
 800622c:	6862      	ldr	r2, [r4, #4]
 800622e:	b92a      	cbnz	r2, 800623c <_scanf_i+0x80>
 8006230:	2308      	movs	r3, #8
 8006232:	6822      	ldr	r2, [r4, #0]
 8006234:	6063      	str	r3, [r4, #4]
 8006236:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800623a:	6022      	str	r2, [r4, #0]
 800623c:	6822      	ldr	r2, [r4, #0]
 800623e:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8006242:	6022      	str	r2, [r4, #0]
 8006244:	68a2      	ldr	r2, [r4, #8]
 8006246:	1e51      	subs	r1, r2, #1
 8006248:	60a1      	str	r1, [r4, #8]
 800624a:	b192      	cbz	r2, 8006272 <_scanf_i+0xb6>
 800624c:	6832      	ldr	r2, [r6, #0]
 800624e:	1c51      	adds	r1, r2, #1
 8006250:	6031      	str	r1, [r6, #0]
 8006252:	7812      	ldrb	r2, [r2, #0]
 8006254:	f805 2b01 	strb.w	r2, [r5], #1
 8006258:	6872      	ldr	r2, [r6, #4]
 800625a:	3a01      	subs	r2, #1
 800625c:	2a00      	cmp	r2, #0
 800625e:	6072      	str	r2, [r6, #4]
 8006260:	dc07      	bgt.n	8006272 <_scanf_i+0xb6>
 8006262:	4631      	mov	r1, r6
 8006264:	4650      	mov	r0, sl
 8006266:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800626a:	4790      	blx	r2
 800626c:	2800      	cmp	r0, #0
 800626e:	f040 8085 	bne.w	800637c <_scanf_i+0x1c0>
 8006272:	f10b 0b01 	add.w	fp, fp, #1
 8006276:	f1bb 0f03 	cmp.w	fp, #3
 800627a:	d1cb      	bne.n	8006214 <_scanf_i+0x58>
 800627c:	6863      	ldr	r3, [r4, #4]
 800627e:	b90b      	cbnz	r3, 8006284 <_scanf_i+0xc8>
 8006280:	230a      	movs	r3, #10
 8006282:	6063      	str	r3, [r4, #4]
 8006284:	6863      	ldr	r3, [r4, #4]
 8006286:	4948      	ldr	r1, [pc, #288]	; (80063a8 <_scanf_i+0x1ec>)
 8006288:	6960      	ldr	r0, [r4, #20]
 800628a:	1ac9      	subs	r1, r1, r3
 800628c:	f000 f88e 	bl	80063ac <__sccl>
 8006290:	f04f 0b00 	mov.w	fp, #0
 8006294:	68a3      	ldr	r3, [r4, #8]
 8006296:	6822      	ldr	r2, [r4, #0]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d03d      	beq.n	8006318 <_scanf_i+0x15c>
 800629c:	6831      	ldr	r1, [r6, #0]
 800629e:	6960      	ldr	r0, [r4, #20]
 80062a0:	f891 c000 	ldrb.w	ip, [r1]
 80062a4:	f810 000c 	ldrb.w	r0, [r0, ip]
 80062a8:	2800      	cmp	r0, #0
 80062aa:	d035      	beq.n	8006318 <_scanf_i+0x15c>
 80062ac:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80062b0:	d124      	bne.n	80062fc <_scanf_i+0x140>
 80062b2:	0510      	lsls	r0, r2, #20
 80062b4:	d522      	bpl.n	80062fc <_scanf_i+0x140>
 80062b6:	f10b 0b01 	add.w	fp, fp, #1
 80062ba:	f1b9 0f00 	cmp.w	r9, #0
 80062be:	d003      	beq.n	80062c8 <_scanf_i+0x10c>
 80062c0:	3301      	adds	r3, #1
 80062c2:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 80062c6:	60a3      	str	r3, [r4, #8]
 80062c8:	6873      	ldr	r3, [r6, #4]
 80062ca:	3b01      	subs	r3, #1
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	6073      	str	r3, [r6, #4]
 80062d0:	dd1b      	ble.n	800630a <_scanf_i+0x14e>
 80062d2:	6833      	ldr	r3, [r6, #0]
 80062d4:	3301      	adds	r3, #1
 80062d6:	6033      	str	r3, [r6, #0]
 80062d8:	68a3      	ldr	r3, [r4, #8]
 80062da:	3b01      	subs	r3, #1
 80062dc:	60a3      	str	r3, [r4, #8]
 80062de:	e7d9      	b.n	8006294 <_scanf_i+0xd8>
 80062e0:	f1bb 0f02 	cmp.w	fp, #2
 80062e4:	d1ae      	bne.n	8006244 <_scanf_i+0x88>
 80062e6:	6822      	ldr	r2, [r4, #0]
 80062e8:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80062ec:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80062f0:	d1bf      	bne.n	8006272 <_scanf_i+0xb6>
 80062f2:	2310      	movs	r3, #16
 80062f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062f8:	6063      	str	r3, [r4, #4]
 80062fa:	e7a2      	b.n	8006242 <_scanf_i+0x86>
 80062fc:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8006300:	6022      	str	r2, [r4, #0]
 8006302:	780b      	ldrb	r3, [r1, #0]
 8006304:	f805 3b01 	strb.w	r3, [r5], #1
 8006308:	e7de      	b.n	80062c8 <_scanf_i+0x10c>
 800630a:	4631      	mov	r1, r6
 800630c:	4650      	mov	r0, sl
 800630e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006312:	4798      	blx	r3
 8006314:	2800      	cmp	r0, #0
 8006316:	d0df      	beq.n	80062d8 <_scanf_i+0x11c>
 8006318:	6823      	ldr	r3, [r4, #0]
 800631a:	05db      	lsls	r3, r3, #23
 800631c:	d50d      	bpl.n	800633a <_scanf_i+0x17e>
 800631e:	42bd      	cmp	r5, r7
 8006320:	d909      	bls.n	8006336 <_scanf_i+0x17a>
 8006322:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006326:	4632      	mov	r2, r6
 8006328:	4650      	mov	r0, sl
 800632a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800632e:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8006332:	4798      	blx	r3
 8006334:	464d      	mov	r5, r9
 8006336:	42bd      	cmp	r5, r7
 8006338:	d02d      	beq.n	8006396 <_scanf_i+0x1da>
 800633a:	6822      	ldr	r2, [r4, #0]
 800633c:	f012 0210 	ands.w	r2, r2, #16
 8006340:	d113      	bne.n	800636a <_scanf_i+0x1ae>
 8006342:	702a      	strb	r2, [r5, #0]
 8006344:	4639      	mov	r1, r7
 8006346:	6863      	ldr	r3, [r4, #4]
 8006348:	4650      	mov	r0, sl
 800634a:	9e01      	ldr	r6, [sp, #4]
 800634c:	47b0      	blx	r6
 800634e:	6821      	ldr	r1, [r4, #0]
 8006350:	f8d8 3000 	ldr.w	r3, [r8]
 8006354:	f011 0f20 	tst.w	r1, #32
 8006358:	d013      	beq.n	8006382 <_scanf_i+0x1c6>
 800635a:	1d1a      	adds	r2, r3, #4
 800635c:	f8c8 2000 	str.w	r2, [r8]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	6018      	str	r0, [r3, #0]
 8006364:	68e3      	ldr	r3, [r4, #12]
 8006366:	3301      	adds	r3, #1
 8006368:	60e3      	str	r3, [r4, #12]
 800636a:	2000      	movs	r0, #0
 800636c:	1bed      	subs	r5, r5, r7
 800636e:	44ab      	add	fp, r5
 8006370:	6925      	ldr	r5, [r4, #16]
 8006372:	445d      	add	r5, fp
 8006374:	6125      	str	r5, [r4, #16]
 8006376:	b007      	add	sp, #28
 8006378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800637c:	f04f 0b00 	mov.w	fp, #0
 8006380:	e7ca      	b.n	8006318 <_scanf_i+0x15c>
 8006382:	1d1a      	adds	r2, r3, #4
 8006384:	f8c8 2000 	str.w	r2, [r8]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f011 0f01 	tst.w	r1, #1
 800638e:	bf14      	ite	ne
 8006390:	8018      	strhne	r0, [r3, #0]
 8006392:	6018      	streq	r0, [r3, #0]
 8006394:	e7e6      	b.n	8006364 <_scanf_i+0x1a8>
 8006396:	2001      	movs	r0, #1
 8006398:	e7ed      	b.n	8006376 <_scanf_i+0x1ba>
 800639a:	bf00      	nop
 800639c:	08006ee0 	.word	0x08006ee0
 80063a0:	080065fd 	.word	0x080065fd
 80063a4:	08006515 	.word	0x08006515
 80063a8:	08007311 	.word	0x08007311

080063ac <__sccl>:
 80063ac:	b570      	push	{r4, r5, r6, lr}
 80063ae:	780b      	ldrb	r3, [r1, #0]
 80063b0:	4604      	mov	r4, r0
 80063b2:	2b5e      	cmp	r3, #94	; 0x5e
 80063b4:	bf13      	iteet	ne
 80063b6:	2200      	movne	r2, #0
 80063b8:	2201      	moveq	r2, #1
 80063ba:	784b      	ldrbeq	r3, [r1, #1]
 80063bc:	1c48      	addne	r0, r1, #1
 80063be:	bf08      	it	eq
 80063c0:	1c88      	addeq	r0, r1, #2
 80063c2:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80063c6:	1e61      	subs	r1, r4, #1
 80063c8:	f801 2f01 	strb.w	r2, [r1, #1]!
 80063cc:	42a9      	cmp	r1, r5
 80063ce:	d1fb      	bne.n	80063c8 <__sccl+0x1c>
 80063d0:	b90b      	cbnz	r3, 80063d6 <__sccl+0x2a>
 80063d2:	3801      	subs	r0, #1
 80063d4:	bd70      	pop	{r4, r5, r6, pc}
 80063d6:	f082 0201 	eor.w	r2, r2, #1
 80063da:	4605      	mov	r5, r0
 80063dc:	54e2      	strb	r2, [r4, r3]
 80063de:	4628      	mov	r0, r5
 80063e0:	f810 1b01 	ldrb.w	r1, [r0], #1
 80063e4:	292d      	cmp	r1, #45	; 0x2d
 80063e6:	d006      	beq.n	80063f6 <__sccl+0x4a>
 80063e8:	295d      	cmp	r1, #93	; 0x5d
 80063ea:	d0f3      	beq.n	80063d4 <__sccl+0x28>
 80063ec:	b909      	cbnz	r1, 80063f2 <__sccl+0x46>
 80063ee:	4628      	mov	r0, r5
 80063f0:	e7f0      	b.n	80063d4 <__sccl+0x28>
 80063f2:	460b      	mov	r3, r1
 80063f4:	e7f1      	b.n	80063da <__sccl+0x2e>
 80063f6:	786e      	ldrb	r6, [r5, #1]
 80063f8:	2e5d      	cmp	r6, #93	; 0x5d
 80063fa:	d0fa      	beq.n	80063f2 <__sccl+0x46>
 80063fc:	42b3      	cmp	r3, r6
 80063fe:	dcf8      	bgt.n	80063f2 <__sccl+0x46>
 8006400:	4619      	mov	r1, r3
 8006402:	3502      	adds	r5, #2
 8006404:	3101      	adds	r1, #1
 8006406:	428e      	cmp	r6, r1
 8006408:	5462      	strb	r2, [r4, r1]
 800640a:	dcfb      	bgt.n	8006404 <__sccl+0x58>
 800640c:	1af1      	subs	r1, r6, r3
 800640e:	3901      	subs	r1, #1
 8006410:	42b3      	cmp	r3, r6
 8006412:	bfa8      	it	ge
 8006414:	2100      	movge	r1, #0
 8006416:	1c58      	adds	r0, r3, #1
 8006418:	1843      	adds	r3, r0, r1
 800641a:	e7e0      	b.n	80063de <__sccl+0x32>

0800641c <_strtol_l.constprop.0>:
 800641c:	2b01      	cmp	r3, #1
 800641e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006422:	4680      	mov	r8, r0
 8006424:	d001      	beq.n	800642a <_strtol_l.constprop.0+0xe>
 8006426:	2b24      	cmp	r3, #36	; 0x24
 8006428:	d906      	bls.n	8006438 <_strtol_l.constprop.0+0x1c>
 800642a:	f7ff f8ef 	bl	800560c <__errno>
 800642e:	2316      	movs	r3, #22
 8006430:	6003      	str	r3, [r0, #0]
 8006432:	2000      	movs	r0, #0
 8006434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006438:	460d      	mov	r5, r1
 800643a:	4f35      	ldr	r7, [pc, #212]	; (8006510 <_strtol_l.constprop.0+0xf4>)
 800643c:	4628      	mov	r0, r5
 800643e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006442:	5de6      	ldrb	r6, [r4, r7]
 8006444:	f016 0608 	ands.w	r6, r6, #8
 8006448:	d1f8      	bne.n	800643c <_strtol_l.constprop.0+0x20>
 800644a:	2c2d      	cmp	r4, #45	; 0x2d
 800644c:	d12f      	bne.n	80064ae <_strtol_l.constprop.0+0x92>
 800644e:	2601      	movs	r6, #1
 8006450:	782c      	ldrb	r4, [r5, #0]
 8006452:	1c85      	adds	r5, r0, #2
 8006454:	2b00      	cmp	r3, #0
 8006456:	d057      	beq.n	8006508 <_strtol_l.constprop.0+0xec>
 8006458:	2b10      	cmp	r3, #16
 800645a:	d109      	bne.n	8006470 <_strtol_l.constprop.0+0x54>
 800645c:	2c30      	cmp	r4, #48	; 0x30
 800645e:	d107      	bne.n	8006470 <_strtol_l.constprop.0+0x54>
 8006460:	7828      	ldrb	r0, [r5, #0]
 8006462:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006466:	2858      	cmp	r0, #88	; 0x58
 8006468:	d149      	bne.n	80064fe <_strtol_l.constprop.0+0xe2>
 800646a:	2310      	movs	r3, #16
 800646c:	786c      	ldrb	r4, [r5, #1]
 800646e:	3502      	adds	r5, #2
 8006470:	2700      	movs	r7, #0
 8006472:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8006476:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
 800647a:	fbbe f9f3 	udiv	r9, lr, r3
 800647e:	4638      	mov	r0, r7
 8006480:	fb03 ea19 	mls	sl, r3, r9, lr
 8006484:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006488:	f1bc 0f09 	cmp.w	ip, #9
 800648c:	d814      	bhi.n	80064b8 <_strtol_l.constprop.0+0x9c>
 800648e:	4664      	mov	r4, ip
 8006490:	42a3      	cmp	r3, r4
 8006492:	dd22      	ble.n	80064da <_strtol_l.constprop.0+0xbe>
 8006494:	2f00      	cmp	r7, #0
 8006496:	db1d      	blt.n	80064d4 <_strtol_l.constprop.0+0xb8>
 8006498:	4581      	cmp	r9, r0
 800649a:	d31b      	bcc.n	80064d4 <_strtol_l.constprop.0+0xb8>
 800649c:	d101      	bne.n	80064a2 <_strtol_l.constprop.0+0x86>
 800649e:	45a2      	cmp	sl, r4
 80064a0:	db18      	blt.n	80064d4 <_strtol_l.constprop.0+0xb8>
 80064a2:	2701      	movs	r7, #1
 80064a4:	fb00 4003 	mla	r0, r0, r3, r4
 80064a8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80064ac:	e7ea      	b.n	8006484 <_strtol_l.constprop.0+0x68>
 80064ae:	2c2b      	cmp	r4, #43	; 0x2b
 80064b0:	bf04      	itt	eq
 80064b2:	782c      	ldrbeq	r4, [r5, #0]
 80064b4:	1c85      	addeq	r5, r0, #2
 80064b6:	e7cd      	b.n	8006454 <_strtol_l.constprop.0+0x38>
 80064b8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80064bc:	f1bc 0f19 	cmp.w	ip, #25
 80064c0:	d801      	bhi.n	80064c6 <_strtol_l.constprop.0+0xaa>
 80064c2:	3c37      	subs	r4, #55	; 0x37
 80064c4:	e7e4      	b.n	8006490 <_strtol_l.constprop.0+0x74>
 80064c6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80064ca:	f1bc 0f19 	cmp.w	ip, #25
 80064ce:	d804      	bhi.n	80064da <_strtol_l.constprop.0+0xbe>
 80064d0:	3c57      	subs	r4, #87	; 0x57
 80064d2:	e7dd      	b.n	8006490 <_strtol_l.constprop.0+0x74>
 80064d4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80064d8:	e7e6      	b.n	80064a8 <_strtol_l.constprop.0+0x8c>
 80064da:	2f00      	cmp	r7, #0
 80064dc:	da07      	bge.n	80064ee <_strtol_l.constprop.0+0xd2>
 80064de:	2322      	movs	r3, #34	; 0x22
 80064e0:	4670      	mov	r0, lr
 80064e2:	f8c8 3000 	str.w	r3, [r8]
 80064e6:	2a00      	cmp	r2, #0
 80064e8:	d0a4      	beq.n	8006434 <_strtol_l.constprop.0+0x18>
 80064ea:	1e69      	subs	r1, r5, #1
 80064ec:	e005      	b.n	80064fa <_strtol_l.constprop.0+0xde>
 80064ee:	b106      	cbz	r6, 80064f2 <_strtol_l.constprop.0+0xd6>
 80064f0:	4240      	negs	r0, r0
 80064f2:	2a00      	cmp	r2, #0
 80064f4:	d09e      	beq.n	8006434 <_strtol_l.constprop.0+0x18>
 80064f6:	2f00      	cmp	r7, #0
 80064f8:	d1f7      	bne.n	80064ea <_strtol_l.constprop.0+0xce>
 80064fa:	6011      	str	r1, [r2, #0]
 80064fc:	e79a      	b.n	8006434 <_strtol_l.constprop.0+0x18>
 80064fe:	2430      	movs	r4, #48	; 0x30
 8006500:	2b00      	cmp	r3, #0
 8006502:	d1b5      	bne.n	8006470 <_strtol_l.constprop.0+0x54>
 8006504:	2308      	movs	r3, #8
 8006506:	e7b3      	b.n	8006470 <_strtol_l.constprop.0+0x54>
 8006508:	2c30      	cmp	r4, #48	; 0x30
 800650a:	d0a9      	beq.n	8006460 <_strtol_l.constprop.0+0x44>
 800650c:	230a      	movs	r3, #10
 800650e:	e7af      	b.n	8006470 <_strtol_l.constprop.0+0x54>
 8006510:	080071c5 	.word	0x080071c5

08006514 <_strtol_r>:
 8006514:	f7ff bf82 	b.w	800641c <_strtol_l.constprop.0>

08006518 <_strtoul_l.constprop.0>:
 8006518:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800651c:	4686      	mov	lr, r0
 800651e:	460d      	mov	r5, r1
 8006520:	4f35      	ldr	r7, [pc, #212]	; (80065f8 <_strtoul_l.constprop.0+0xe0>)
 8006522:	4628      	mov	r0, r5
 8006524:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006528:	5de6      	ldrb	r6, [r4, r7]
 800652a:	f016 0608 	ands.w	r6, r6, #8
 800652e:	d1f8      	bne.n	8006522 <_strtoul_l.constprop.0+0xa>
 8006530:	2c2d      	cmp	r4, #45	; 0x2d
 8006532:	d12f      	bne.n	8006594 <_strtoul_l.constprop.0+0x7c>
 8006534:	2601      	movs	r6, #1
 8006536:	782c      	ldrb	r4, [r5, #0]
 8006538:	1c85      	adds	r5, r0, #2
 800653a:	2b00      	cmp	r3, #0
 800653c:	d057      	beq.n	80065ee <_strtoul_l.constprop.0+0xd6>
 800653e:	2b10      	cmp	r3, #16
 8006540:	d109      	bne.n	8006556 <_strtoul_l.constprop.0+0x3e>
 8006542:	2c30      	cmp	r4, #48	; 0x30
 8006544:	d107      	bne.n	8006556 <_strtoul_l.constprop.0+0x3e>
 8006546:	7828      	ldrb	r0, [r5, #0]
 8006548:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800654c:	2858      	cmp	r0, #88	; 0x58
 800654e:	d149      	bne.n	80065e4 <_strtoul_l.constprop.0+0xcc>
 8006550:	2310      	movs	r3, #16
 8006552:	786c      	ldrb	r4, [r5, #1]
 8006554:	3502      	adds	r5, #2
 8006556:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800655a:	fbb8 f8f3 	udiv	r8, r8, r3
 800655e:	2700      	movs	r7, #0
 8006560:	fb03 f908 	mul.w	r9, r3, r8
 8006564:	4638      	mov	r0, r7
 8006566:	ea6f 0909 	mvn.w	r9, r9
 800656a:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800656e:	f1bc 0f09 	cmp.w	ip, #9
 8006572:	d814      	bhi.n	800659e <_strtoul_l.constprop.0+0x86>
 8006574:	4664      	mov	r4, ip
 8006576:	42a3      	cmp	r3, r4
 8006578:	dd22      	ble.n	80065c0 <_strtoul_l.constprop.0+0xa8>
 800657a:	2f00      	cmp	r7, #0
 800657c:	db1d      	blt.n	80065ba <_strtoul_l.constprop.0+0xa2>
 800657e:	4580      	cmp	r8, r0
 8006580:	d31b      	bcc.n	80065ba <_strtoul_l.constprop.0+0xa2>
 8006582:	d101      	bne.n	8006588 <_strtoul_l.constprop.0+0x70>
 8006584:	45a1      	cmp	r9, r4
 8006586:	db18      	blt.n	80065ba <_strtoul_l.constprop.0+0xa2>
 8006588:	2701      	movs	r7, #1
 800658a:	fb00 4003 	mla	r0, r0, r3, r4
 800658e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006592:	e7ea      	b.n	800656a <_strtoul_l.constprop.0+0x52>
 8006594:	2c2b      	cmp	r4, #43	; 0x2b
 8006596:	bf04      	itt	eq
 8006598:	782c      	ldrbeq	r4, [r5, #0]
 800659a:	1c85      	addeq	r5, r0, #2
 800659c:	e7cd      	b.n	800653a <_strtoul_l.constprop.0+0x22>
 800659e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80065a2:	f1bc 0f19 	cmp.w	ip, #25
 80065a6:	d801      	bhi.n	80065ac <_strtoul_l.constprop.0+0x94>
 80065a8:	3c37      	subs	r4, #55	; 0x37
 80065aa:	e7e4      	b.n	8006576 <_strtoul_l.constprop.0+0x5e>
 80065ac:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80065b0:	f1bc 0f19 	cmp.w	ip, #25
 80065b4:	d804      	bhi.n	80065c0 <_strtoul_l.constprop.0+0xa8>
 80065b6:	3c57      	subs	r4, #87	; 0x57
 80065b8:	e7dd      	b.n	8006576 <_strtoul_l.constprop.0+0x5e>
 80065ba:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80065be:	e7e6      	b.n	800658e <_strtoul_l.constprop.0+0x76>
 80065c0:	2f00      	cmp	r7, #0
 80065c2:	da07      	bge.n	80065d4 <_strtoul_l.constprop.0+0xbc>
 80065c4:	2322      	movs	r3, #34	; 0x22
 80065c6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80065ca:	f8ce 3000 	str.w	r3, [lr]
 80065ce:	b932      	cbnz	r2, 80065de <_strtoul_l.constprop.0+0xc6>
 80065d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80065d4:	b106      	cbz	r6, 80065d8 <_strtoul_l.constprop.0+0xc0>
 80065d6:	4240      	negs	r0, r0
 80065d8:	2a00      	cmp	r2, #0
 80065da:	d0f9      	beq.n	80065d0 <_strtoul_l.constprop.0+0xb8>
 80065dc:	b107      	cbz	r7, 80065e0 <_strtoul_l.constprop.0+0xc8>
 80065de:	1e69      	subs	r1, r5, #1
 80065e0:	6011      	str	r1, [r2, #0]
 80065e2:	e7f5      	b.n	80065d0 <_strtoul_l.constprop.0+0xb8>
 80065e4:	2430      	movs	r4, #48	; 0x30
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d1b5      	bne.n	8006556 <_strtoul_l.constprop.0+0x3e>
 80065ea:	2308      	movs	r3, #8
 80065ec:	e7b3      	b.n	8006556 <_strtoul_l.constprop.0+0x3e>
 80065ee:	2c30      	cmp	r4, #48	; 0x30
 80065f0:	d0a9      	beq.n	8006546 <_strtoul_l.constprop.0+0x2e>
 80065f2:	230a      	movs	r3, #10
 80065f4:	e7af      	b.n	8006556 <_strtoul_l.constprop.0+0x3e>
 80065f6:	bf00      	nop
 80065f8:	080071c5 	.word	0x080071c5

080065fc <_strtoul_r>:
 80065fc:	f7ff bf8c 	b.w	8006518 <_strtoul_l.constprop.0>

08006600 <__submore>:
 8006600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006604:	460c      	mov	r4, r1
 8006606:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006608:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800660c:	4299      	cmp	r1, r3
 800660e:	d11b      	bne.n	8006648 <__submore+0x48>
 8006610:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006614:	f000 f8be 	bl	8006794 <_malloc_r>
 8006618:	b918      	cbnz	r0, 8006622 <__submore+0x22>
 800661a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800661e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006622:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006626:	63a3      	str	r3, [r4, #56]	; 0x38
 8006628:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800662c:	6360      	str	r0, [r4, #52]	; 0x34
 800662e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8006632:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006636:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800663a:	7043      	strb	r3, [r0, #1]
 800663c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006640:	7003      	strb	r3, [r0, #0]
 8006642:	6020      	str	r0, [r4, #0]
 8006644:	2000      	movs	r0, #0
 8006646:	e7ea      	b.n	800661e <__submore+0x1e>
 8006648:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800664a:	0077      	lsls	r7, r6, #1
 800664c:	463a      	mov	r2, r7
 800664e:	f000 f915 	bl	800687c <_realloc_r>
 8006652:	4605      	mov	r5, r0
 8006654:	2800      	cmp	r0, #0
 8006656:	d0e0      	beq.n	800661a <__submore+0x1a>
 8006658:	eb00 0806 	add.w	r8, r0, r6
 800665c:	4601      	mov	r1, r0
 800665e:	4632      	mov	r2, r6
 8006660:	4640      	mov	r0, r8
 8006662:	f7ff f80d 	bl	8005680 <memcpy>
 8006666:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800666a:	f8c4 8000 	str.w	r8, [r4]
 800666e:	e7e9      	b.n	8006644 <__submore+0x44>

08006670 <__retarget_lock_acquire_recursive>:
 8006670:	4770      	bx	lr

08006672 <__retarget_lock_release_recursive>:
 8006672:	4770      	bx	lr

08006674 <memchr>:
 8006674:	4603      	mov	r3, r0
 8006676:	b510      	push	{r4, lr}
 8006678:	b2c9      	uxtb	r1, r1
 800667a:	4402      	add	r2, r0
 800667c:	4293      	cmp	r3, r2
 800667e:	4618      	mov	r0, r3
 8006680:	d101      	bne.n	8006686 <memchr+0x12>
 8006682:	2000      	movs	r0, #0
 8006684:	e003      	b.n	800668e <memchr+0x1a>
 8006686:	7804      	ldrb	r4, [r0, #0]
 8006688:	3301      	adds	r3, #1
 800668a:	428c      	cmp	r4, r1
 800668c:	d1f6      	bne.n	800667c <memchr+0x8>
 800668e:	bd10      	pop	{r4, pc}

08006690 <memmove>:
 8006690:	4288      	cmp	r0, r1
 8006692:	b510      	push	{r4, lr}
 8006694:	eb01 0402 	add.w	r4, r1, r2
 8006698:	d902      	bls.n	80066a0 <memmove+0x10>
 800669a:	4284      	cmp	r4, r0
 800669c:	4623      	mov	r3, r4
 800669e:	d807      	bhi.n	80066b0 <memmove+0x20>
 80066a0:	1e43      	subs	r3, r0, #1
 80066a2:	42a1      	cmp	r1, r4
 80066a4:	d008      	beq.n	80066b8 <memmove+0x28>
 80066a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80066aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80066ae:	e7f8      	b.n	80066a2 <memmove+0x12>
 80066b0:	4601      	mov	r1, r0
 80066b2:	4402      	add	r2, r0
 80066b4:	428a      	cmp	r2, r1
 80066b6:	d100      	bne.n	80066ba <memmove+0x2a>
 80066b8:	bd10      	pop	{r4, pc}
 80066ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80066be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80066c2:	e7f7      	b.n	80066b4 <memmove+0x24>

080066c4 <_free_r>:
 80066c4:	b538      	push	{r3, r4, r5, lr}
 80066c6:	4605      	mov	r5, r0
 80066c8:	2900      	cmp	r1, #0
 80066ca:	d040      	beq.n	800674e <_free_r+0x8a>
 80066cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066d0:	1f0c      	subs	r4, r1, #4
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	bfb8      	it	lt
 80066d6:	18e4      	addlt	r4, r4, r3
 80066d8:	f000 f910 	bl	80068fc <__malloc_lock>
 80066dc:	4a1c      	ldr	r2, [pc, #112]	; (8006750 <_free_r+0x8c>)
 80066de:	6813      	ldr	r3, [r2, #0]
 80066e0:	b933      	cbnz	r3, 80066f0 <_free_r+0x2c>
 80066e2:	6063      	str	r3, [r4, #4]
 80066e4:	6014      	str	r4, [r2, #0]
 80066e6:	4628      	mov	r0, r5
 80066e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80066ec:	f000 b90c 	b.w	8006908 <__malloc_unlock>
 80066f0:	42a3      	cmp	r3, r4
 80066f2:	d908      	bls.n	8006706 <_free_r+0x42>
 80066f4:	6820      	ldr	r0, [r4, #0]
 80066f6:	1821      	adds	r1, r4, r0
 80066f8:	428b      	cmp	r3, r1
 80066fa:	bf01      	itttt	eq
 80066fc:	6819      	ldreq	r1, [r3, #0]
 80066fe:	685b      	ldreq	r3, [r3, #4]
 8006700:	1809      	addeq	r1, r1, r0
 8006702:	6021      	streq	r1, [r4, #0]
 8006704:	e7ed      	b.n	80066e2 <_free_r+0x1e>
 8006706:	461a      	mov	r2, r3
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	b10b      	cbz	r3, 8006710 <_free_r+0x4c>
 800670c:	42a3      	cmp	r3, r4
 800670e:	d9fa      	bls.n	8006706 <_free_r+0x42>
 8006710:	6811      	ldr	r1, [r2, #0]
 8006712:	1850      	adds	r0, r2, r1
 8006714:	42a0      	cmp	r0, r4
 8006716:	d10b      	bne.n	8006730 <_free_r+0x6c>
 8006718:	6820      	ldr	r0, [r4, #0]
 800671a:	4401      	add	r1, r0
 800671c:	1850      	adds	r0, r2, r1
 800671e:	4283      	cmp	r3, r0
 8006720:	6011      	str	r1, [r2, #0]
 8006722:	d1e0      	bne.n	80066e6 <_free_r+0x22>
 8006724:	6818      	ldr	r0, [r3, #0]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	4401      	add	r1, r0
 800672a:	6011      	str	r1, [r2, #0]
 800672c:	6053      	str	r3, [r2, #4]
 800672e:	e7da      	b.n	80066e6 <_free_r+0x22>
 8006730:	d902      	bls.n	8006738 <_free_r+0x74>
 8006732:	230c      	movs	r3, #12
 8006734:	602b      	str	r3, [r5, #0]
 8006736:	e7d6      	b.n	80066e6 <_free_r+0x22>
 8006738:	6820      	ldr	r0, [r4, #0]
 800673a:	1821      	adds	r1, r4, r0
 800673c:	428b      	cmp	r3, r1
 800673e:	bf01      	itttt	eq
 8006740:	6819      	ldreq	r1, [r3, #0]
 8006742:	685b      	ldreq	r3, [r3, #4]
 8006744:	1809      	addeq	r1, r1, r0
 8006746:	6021      	streq	r1, [r4, #0]
 8006748:	6063      	str	r3, [r4, #4]
 800674a:	6054      	str	r4, [r2, #4]
 800674c:	e7cb      	b.n	80066e6 <_free_r+0x22>
 800674e:	bd38      	pop	{r3, r4, r5, pc}
 8006750:	20001a8c 	.word	0x20001a8c

08006754 <sbrk_aligned>:
 8006754:	b570      	push	{r4, r5, r6, lr}
 8006756:	4e0e      	ldr	r6, [pc, #56]	; (8006790 <sbrk_aligned+0x3c>)
 8006758:	460c      	mov	r4, r1
 800675a:	6831      	ldr	r1, [r6, #0]
 800675c:	4605      	mov	r5, r0
 800675e:	b911      	cbnz	r1, 8006766 <sbrk_aligned+0x12>
 8006760:	f000 f8bc 	bl	80068dc <_sbrk_r>
 8006764:	6030      	str	r0, [r6, #0]
 8006766:	4621      	mov	r1, r4
 8006768:	4628      	mov	r0, r5
 800676a:	f000 f8b7 	bl	80068dc <_sbrk_r>
 800676e:	1c43      	adds	r3, r0, #1
 8006770:	d00a      	beq.n	8006788 <sbrk_aligned+0x34>
 8006772:	1cc4      	adds	r4, r0, #3
 8006774:	f024 0403 	bic.w	r4, r4, #3
 8006778:	42a0      	cmp	r0, r4
 800677a:	d007      	beq.n	800678c <sbrk_aligned+0x38>
 800677c:	1a21      	subs	r1, r4, r0
 800677e:	4628      	mov	r0, r5
 8006780:	f000 f8ac 	bl	80068dc <_sbrk_r>
 8006784:	3001      	adds	r0, #1
 8006786:	d101      	bne.n	800678c <sbrk_aligned+0x38>
 8006788:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800678c:	4620      	mov	r0, r4
 800678e:	bd70      	pop	{r4, r5, r6, pc}
 8006790:	20001a90 	.word	0x20001a90

08006794 <_malloc_r>:
 8006794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006798:	1ccd      	adds	r5, r1, #3
 800679a:	f025 0503 	bic.w	r5, r5, #3
 800679e:	3508      	adds	r5, #8
 80067a0:	2d0c      	cmp	r5, #12
 80067a2:	bf38      	it	cc
 80067a4:	250c      	movcc	r5, #12
 80067a6:	2d00      	cmp	r5, #0
 80067a8:	4607      	mov	r7, r0
 80067aa:	db01      	blt.n	80067b0 <_malloc_r+0x1c>
 80067ac:	42a9      	cmp	r1, r5
 80067ae:	d905      	bls.n	80067bc <_malloc_r+0x28>
 80067b0:	230c      	movs	r3, #12
 80067b2:	2600      	movs	r6, #0
 80067b4:	603b      	str	r3, [r7, #0]
 80067b6:	4630      	mov	r0, r6
 80067b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80067bc:	4e2e      	ldr	r6, [pc, #184]	; (8006878 <_malloc_r+0xe4>)
 80067be:	f000 f89d 	bl	80068fc <__malloc_lock>
 80067c2:	6833      	ldr	r3, [r6, #0]
 80067c4:	461c      	mov	r4, r3
 80067c6:	bb34      	cbnz	r4, 8006816 <_malloc_r+0x82>
 80067c8:	4629      	mov	r1, r5
 80067ca:	4638      	mov	r0, r7
 80067cc:	f7ff ffc2 	bl	8006754 <sbrk_aligned>
 80067d0:	1c43      	adds	r3, r0, #1
 80067d2:	4604      	mov	r4, r0
 80067d4:	d14d      	bne.n	8006872 <_malloc_r+0xde>
 80067d6:	6834      	ldr	r4, [r6, #0]
 80067d8:	4626      	mov	r6, r4
 80067da:	2e00      	cmp	r6, #0
 80067dc:	d140      	bne.n	8006860 <_malloc_r+0xcc>
 80067de:	6823      	ldr	r3, [r4, #0]
 80067e0:	4631      	mov	r1, r6
 80067e2:	4638      	mov	r0, r7
 80067e4:	eb04 0803 	add.w	r8, r4, r3
 80067e8:	f000 f878 	bl	80068dc <_sbrk_r>
 80067ec:	4580      	cmp	r8, r0
 80067ee:	d13a      	bne.n	8006866 <_malloc_r+0xd2>
 80067f0:	6821      	ldr	r1, [r4, #0]
 80067f2:	3503      	adds	r5, #3
 80067f4:	1a6d      	subs	r5, r5, r1
 80067f6:	f025 0503 	bic.w	r5, r5, #3
 80067fa:	3508      	adds	r5, #8
 80067fc:	2d0c      	cmp	r5, #12
 80067fe:	bf38      	it	cc
 8006800:	250c      	movcc	r5, #12
 8006802:	4638      	mov	r0, r7
 8006804:	4629      	mov	r1, r5
 8006806:	f7ff ffa5 	bl	8006754 <sbrk_aligned>
 800680a:	3001      	adds	r0, #1
 800680c:	d02b      	beq.n	8006866 <_malloc_r+0xd2>
 800680e:	6823      	ldr	r3, [r4, #0]
 8006810:	442b      	add	r3, r5
 8006812:	6023      	str	r3, [r4, #0]
 8006814:	e00e      	b.n	8006834 <_malloc_r+0xa0>
 8006816:	6822      	ldr	r2, [r4, #0]
 8006818:	1b52      	subs	r2, r2, r5
 800681a:	d41e      	bmi.n	800685a <_malloc_r+0xc6>
 800681c:	2a0b      	cmp	r2, #11
 800681e:	d916      	bls.n	800684e <_malloc_r+0xba>
 8006820:	1961      	adds	r1, r4, r5
 8006822:	42a3      	cmp	r3, r4
 8006824:	6025      	str	r5, [r4, #0]
 8006826:	bf18      	it	ne
 8006828:	6059      	strne	r1, [r3, #4]
 800682a:	6863      	ldr	r3, [r4, #4]
 800682c:	bf08      	it	eq
 800682e:	6031      	streq	r1, [r6, #0]
 8006830:	5162      	str	r2, [r4, r5]
 8006832:	604b      	str	r3, [r1, #4]
 8006834:	4638      	mov	r0, r7
 8006836:	f104 060b 	add.w	r6, r4, #11
 800683a:	f000 f865 	bl	8006908 <__malloc_unlock>
 800683e:	f026 0607 	bic.w	r6, r6, #7
 8006842:	1d23      	adds	r3, r4, #4
 8006844:	1af2      	subs	r2, r6, r3
 8006846:	d0b6      	beq.n	80067b6 <_malloc_r+0x22>
 8006848:	1b9b      	subs	r3, r3, r6
 800684a:	50a3      	str	r3, [r4, r2]
 800684c:	e7b3      	b.n	80067b6 <_malloc_r+0x22>
 800684e:	6862      	ldr	r2, [r4, #4]
 8006850:	42a3      	cmp	r3, r4
 8006852:	bf0c      	ite	eq
 8006854:	6032      	streq	r2, [r6, #0]
 8006856:	605a      	strne	r2, [r3, #4]
 8006858:	e7ec      	b.n	8006834 <_malloc_r+0xa0>
 800685a:	4623      	mov	r3, r4
 800685c:	6864      	ldr	r4, [r4, #4]
 800685e:	e7b2      	b.n	80067c6 <_malloc_r+0x32>
 8006860:	4634      	mov	r4, r6
 8006862:	6876      	ldr	r6, [r6, #4]
 8006864:	e7b9      	b.n	80067da <_malloc_r+0x46>
 8006866:	230c      	movs	r3, #12
 8006868:	4638      	mov	r0, r7
 800686a:	603b      	str	r3, [r7, #0]
 800686c:	f000 f84c 	bl	8006908 <__malloc_unlock>
 8006870:	e7a1      	b.n	80067b6 <_malloc_r+0x22>
 8006872:	6025      	str	r5, [r4, #0]
 8006874:	e7de      	b.n	8006834 <_malloc_r+0xa0>
 8006876:	bf00      	nop
 8006878:	20001a8c 	.word	0x20001a8c

0800687c <_realloc_r>:
 800687c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006880:	4680      	mov	r8, r0
 8006882:	4614      	mov	r4, r2
 8006884:	460e      	mov	r6, r1
 8006886:	b921      	cbnz	r1, 8006892 <_realloc_r+0x16>
 8006888:	4611      	mov	r1, r2
 800688a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800688e:	f7ff bf81 	b.w	8006794 <_malloc_r>
 8006892:	b92a      	cbnz	r2, 80068a0 <_realloc_r+0x24>
 8006894:	f7ff ff16 	bl	80066c4 <_free_r>
 8006898:	4625      	mov	r5, r4
 800689a:	4628      	mov	r0, r5
 800689c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068a0:	f000 f838 	bl	8006914 <_malloc_usable_size_r>
 80068a4:	4284      	cmp	r4, r0
 80068a6:	4607      	mov	r7, r0
 80068a8:	d802      	bhi.n	80068b0 <_realloc_r+0x34>
 80068aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80068ae:	d812      	bhi.n	80068d6 <_realloc_r+0x5a>
 80068b0:	4621      	mov	r1, r4
 80068b2:	4640      	mov	r0, r8
 80068b4:	f7ff ff6e 	bl	8006794 <_malloc_r>
 80068b8:	4605      	mov	r5, r0
 80068ba:	2800      	cmp	r0, #0
 80068bc:	d0ed      	beq.n	800689a <_realloc_r+0x1e>
 80068be:	42bc      	cmp	r4, r7
 80068c0:	4622      	mov	r2, r4
 80068c2:	4631      	mov	r1, r6
 80068c4:	bf28      	it	cs
 80068c6:	463a      	movcs	r2, r7
 80068c8:	f7fe feda 	bl	8005680 <memcpy>
 80068cc:	4631      	mov	r1, r6
 80068ce:	4640      	mov	r0, r8
 80068d0:	f7ff fef8 	bl	80066c4 <_free_r>
 80068d4:	e7e1      	b.n	800689a <_realloc_r+0x1e>
 80068d6:	4635      	mov	r5, r6
 80068d8:	e7df      	b.n	800689a <_realloc_r+0x1e>
	...

080068dc <_sbrk_r>:
 80068dc:	b538      	push	{r3, r4, r5, lr}
 80068de:	2300      	movs	r3, #0
 80068e0:	4d05      	ldr	r5, [pc, #20]	; (80068f8 <_sbrk_r+0x1c>)
 80068e2:	4604      	mov	r4, r0
 80068e4:	4608      	mov	r0, r1
 80068e6:	602b      	str	r3, [r5, #0]
 80068e8:	f7fa fee8 	bl	80016bc <_sbrk>
 80068ec:	1c43      	adds	r3, r0, #1
 80068ee:	d102      	bne.n	80068f6 <_sbrk_r+0x1a>
 80068f0:	682b      	ldr	r3, [r5, #0]
 80068f2:	b103      	cbz	r3, 80068f6 <_sbrk_r+0x1a>
 80068f4:	6023      	str	r3, [r4, #0]
 80068f6:	bd38      	pop	{r3, r4, r5, pc}
 80068f8:	20001a84 	.word	0x20001a84

080068fc <__malloc_lock>:
 80068fc:	4801      	ldr	r0, [pc, #4]	; (8006904 <__malloc_lock+0x8>)
 80068fe:	f7ff beb7 	b.w	8006670 <__retarget_lock_acquire_recursive>
 8006902:	bf00      	nop
 8006904:	20001a88 	.word	0x20001a88

08006908 <__malloc_unlock>:
 8006908:	4801      	ldr	r0, [pc, #4]	; (8006910 <__malloc_unlock+0x8>)
 800690a:	f7ff beb2 	b.w	8006672 <__retarget_lock_release_recursive>
 800690e:	bf00      	nop
 8006910:	20001a88 	.word	0x20001a88

08006914 <_malloc_usable_size_r>:
 8006914:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006918:	1f18      	subs	r0, r3, #4
 800691a:	2b00      	cmp	r3, #0
 800691c:	bfbc      	itt	lt
 800691e:	580b      	ldrlt	r3, [r1, r0]
 8006920:	18c0      	addlt	r0, r0, r3
 8006922:	4770      	bx	lr

08006924 <_init>:
 8006924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006926:	bf00      	nop
 8006928:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800692a:	bc08      	pop	{r3}
 800692c:	469e      	mov	lr, r3
 800692e:	4770      	bx	lr

08006930 <_fini>:
 8006930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006932:	bf00      	nop
 8006934:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006936:	bc08      	pop	{r3}
 8006938:	469e      	mov	lr, r3
 800693a:	4770      	bx	lr
